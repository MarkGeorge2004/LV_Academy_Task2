
Task3_s1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039a0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003ab0  08003ab0  00004ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b44  08003b44  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003b44  08003b44  00005068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003b44  08003b44  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b44  08003b44  00004b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b48  08003b48  00004b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003b4c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000068  08003bb4  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08003bb4  00005254  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000806b  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001889  00000000  00000000  0000d0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  0000e988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000060a  00000000  00000000  0000f180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e25  00000000  00000000  0000f78a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a83  00000000  00000000  000275af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000867fe  00000000  00000000  00031032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7830  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c0  00000000  00000000  000b7874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000ba034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08003a98 	.word	0x08003a98

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08003a98 	.word	0x08003a98

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <__io_putchar>:
/* USER CODE BEGIN 0 */
uint16_t temperature;
uint16_t throttle;

int __io_putchar(int ch) //makes printf work with uart
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8000764:	1d39      	adds	r1, r7, #4
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	2201      	movs	r2, #1
 800076c:	4803      	ldr	r0, [pc, #12]	@ (800077c <__io_putchar+0x20>)
 800076e:	f002 f829 	bl	80027c4 <HAL_UART_Transmit>
	return ch;
 8000772:	687b      	ldr	r3, [r7, #4]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000b4 	.word	0x200000b4

08000780 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000784:	f000 fb14 	bl	8000db0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000788:	f000 f87a 	bl	8000880 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800078c:	f000 f942 	bl	8000a14 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000790:	f000 f8c6 	bl	8000920 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8000794:	f000 f914 	bl	80009c0 <MX_USART1_UART_Init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_ADC_Start(&hadc1);
 8000798:	4833      	ldr	r0, [pc, #204]	@ (8000868 <main+0xe8>)
 800079a:	f000 fc67 	bl	800106c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 800079e:	2164      	movs	r1, #100	@ 0x64
 80007a0:	4831      	ldr	r0, [pc, #196]	@ (8000868 <main+0xe8>)
 80007a2:	f000 fd3d 	bl	8001220 <HAL_ADC_PollForConversion>
		throttle = HAL_ADC_GetValue(&hadc1);
 80007a6:	4830      	ldr	r0, [pc, #192]	@ (8000868 <main+0xe8>)
 80007a8:	f000 fe40 	bl	800142c <HAL_ADC_GetValue>
 80007ac:	4603      	mov	r3, r0
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b2e      	ldr	r3, [pc, #184]	@ (800086c <main+0xec>)
 80007b2:	801a      	strh	r2, [r3, #0]

		HAL_ADC_Start(&hadc1);
 80007b4:	482c      	ldr	r0, [pc, #176]	@ (8000868 <main+0xe8>)
 80007b6:	f000 fc59 	bl	800106c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 80007ba:	2164      	movs	r1, #100	@ 0x64
 80007bc:	482a      	ldr	r0, [pc, #168]	@ (8000868 <main+0xe8>)
 80007be:	f000 fd2f 	bl	8001220 <HAL_ADC_PollForConversion>
		temperature = HAL_ADC_GetValue(&hadc1);
 80007c2:	4829      	ldr	r0, [pc, #164]	@ (8000868 <main+0xe8>)
 80007c4:	f000 fe32 	bl	800142c <HAL_ADC_GetValue>
 80007c8:	4603      	mov	r3, r0
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	4b28      	ldr	r3, [pc, #160]	@ (8000870 <main+0xf0>)
 80007ce:	801a      	strh	r2, [r3, #0]

		HAL_ADC_Stop(&hadc1);
 80007d0:	4825      	ldr	r0, [pc, #148]	@ (8000868 <main+0xe8>)
 80007d2:	f000 fcf9 	bl	80011c8 <HAL_ADC_Stop>

		throttle = (uint8_t) (throttle * (150.0 / 4095.0));
 80007d6:	4b25      	ldr	r3, [pc, #148]	@ (800086c <main+0xec>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff34 	bl	8000648 <__aeabi_i2d>
 80007e0:	a31d      	add	r3, pc, #116	@ (adr r3, 8000858 <main+0xd8>)
 80007e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007e6:	f7ff fcb3 	bl	8000150 <__aeabi_dmul>
 80007ea:	4602      	mov	r2, r0
 80007ec:	460b      	mov	r3, r1
 80007ee:	4610      	mov	r0, r2
 80007f0:	4619      	mov	r1, r3
 80007f2:	f7ff ff93 	bl	800071c <__aeabi_d2uiz>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <main+0xec>)
 80007fe:	801a      	strh	r2, [r3, #0]
		temperature = (uint8_t) (temperature * (100.0 / 4095.0));
 8000800:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <main+0xf0>)
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff1f 	bl	8000648 <__aeabi_i2d>
 800080a:	a315      	add	r3, pc, #84	@ (adr r3, 8000860 <main+0xe0>)
 800080c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000810:	f7ff fc9e 	bl	8000150 <__aeabi_dmul>
 8000814:	4602      	mov	r2, r0
 8000816:	460b      	mov	r3, r1
 8000818:	4610      	mov	r0, r2
 800081a:	4619      	mov	r1, r3
 800081c:	f7ff ff7e 	bl	800071c <__aeabi_d2uiz>
 8000820:	4603      	mov	r3, r0
 8000822:	b2db      	uxtb	r3, r3
 8000824:	461a      	mov	r2, r3
 8000826:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <main+0xf0>)
 8000828:	801a      	strh	r2, [r3, #0]

		printf("Temp= %d", temperature);
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <main+0xf0>)
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	4619      	mov	r1, r3
 8000830:	4810      	ldr	r0, [pc, #64]	@ (8000874 <main+0xf4>)
 8000832:	f002 fa5d 	bl	8002cf0 <iprintf>
		printf(" Throttle= %d", throttle);
 8000836:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <main+0xec>)
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	4619      	mov	r1, r3
 800083c:	480e      	ldr	r0, [pc, #56]	@ (8000878 <main+0xf8>)
 800083e:	f002 fa57 	bl	8002cf0 <iprintf>
		printf("\r\n");
 8000842:	480e      	ldr	r0, [pc, #56]	@ (800087c <main+0xfc>)
 8000844:	f002 fabc 	bl	8002dc0 <puts>

		HAL_Delay(1000);
 8000848:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800084c:	f000 fb12 	bl	8000e74 <HAL_Delay>
	while (1) {
 8000850:	bf00      	nop
 8000852:	e7a1      	b.n	8000798 <main+0x18>
 8000854:	f3af 8000 	nop.w
 8000858:	12c12c13 	.word	0x12c12c13
 800085c:	3fa2c12c 	.word	0x3fa2c12c
 8000860:	19019019 	.word	0x19019019
 8000864:	3f990190 	.word	0x3f990190
 8000868:	20000084 	.word	0x20000084
 800086c:	200000fe 	.word	0x200000fe
 8000870:	200000fc 	.word	0x200000fc
 8000874:	08003ab0 	.word	0x08003ab0
 8000878:	08003abc 	.word	0x08003abc
 800087c:	08003acc 	.word	0x08003acc

08000880 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	@ 0x50
 8000884:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000886:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800088a:	2228      	movs	r2, #40	@ 0x28
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f002 fb76 	bl	8002f80 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b0:	2302      	movs	r3, #2
 80008b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b4:	2301      	movs	r3, #1
 80008b6:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b8:	2310      	movs	r3, #16
 80008ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008bc:	2300      	movs	r3, #0
 80008be:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008c4:	4618      	mov	r0, r3
 80008c6:	f001 f9b1 	bl	8001c2c <HAL_RCC_OscConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0x54>
		Error_Handler();
 80008d0:	f000 f8b6 	bl	8000a40 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008d4:	230f      	movs	r3, #15
 80008d6:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f001 fc1e 	bl	8002130 <HAL_RCC_ClockConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0x7e>
		Error_Handler();
 80008fa:	f000 f8a1 	bl	8000a40 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008fe:	2302      	movs	r3, #2
 8000900:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fd9f 	bl	800244c <HAL_RCCEx_PeriphCLKConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0x98>
		Error_Handler();
 8000914:	f000 f894 	bl	8000a40 <Error_Handler>
	}
}
 8000918:	bf00      	nop
 800091a:	3750      	adds	r7, #80	@ 0x50
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000930:	4b21      	ldr	r3, [pc, #132]	@ (80009b8 <MX_ADC1_Init+0x98>)
 8000932:	4a22      	ldr	r2, [pc, #136]	@ (80009bc <MX_ADC1_Init+0x9c>)
 8000934:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000936:	4b20      	ldr	r3, [pc, #128]	@ (80009b8 <MX_ADC1_Init+0x98>)
 8000938:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800093c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800093e:	4b1e      	ldr	r3, [pc, #120]	@ (80009b8 <MX_ADC1_Init+0x98>)
 8000940:	2200      	movs	r2, #0
 8000942:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000944:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <MX_ADC1_Init+0x98>)
 8000946:	2201      	movs	r2, #1
 8000948:	751a      	strb	r2, [r3, #20]
	hadc1.Init.NbrOfDiscConversion = 1;
 800094a:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <MX_ADC1_Init+0x98>)
 800094c:	2201      	movs	r2, #1
 800094e:	619a      	str	r2, [r3, #24]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000950:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <MX_ADC1_Init+0x98>)
 8000952:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000956:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000958:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <MX_ADC1_Init+0x98>)
 800095a:	2200      	movs	r2, #0
 800095c:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 2;
 800095e:	4b16      	ldr	r3, [pc, #88]	@ (80009b8 <MX_ADC1_Init+0x98>)
 8000960:	2202      	movs	r2, #2
 8000962:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000964:	4814      	ldr	r0, [pc, #80]	@ (80009b8 <MX_ADC1_Init+0x98>)
 8000966:	f000 faa9 	bl	8000ebc <HAL_ADC_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_ADC1_Init+0x54>
		Error_Handler();
 8000970:	f000 f866 	bl	8000a40 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000978:	2301      	movs	r3, #1
 800097a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800097c:	2304      	movs	r3, #4
 800097e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	4619      	mov	r1, r3
 8000984:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <MX_ADC1_Init+0x98>)
 8000986:	f000 fd5d 	bl	8001444 <HAL_ADC_ConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ADC1_Init+0x74>
		Error_Handler();
 8000990:	f000 f856 	bl	8000a40 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000994:	2301      	movs	r3, #1
 8000996:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000998:	2302      	movs	r3, #2
 800099a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	@ (80009b8 <MX_ADC1_Init+0x98>)
 80009a2:	f000 fd4f 	bl	8001444 <HAL_ADC_ConfigChannel>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_ADC1_Init+0x90>
		Error_Handler();
 80009ac:	f000 f848 	bl	8000a40 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000084 	.word	0x20000084
 80009bc:	40012400 	.word	0x40012400

080009c0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009c6:	4a12      	ldr	r2, [pc, #72]	@ (8000a10 <MX_USART1_UART_Init+0x50>)
 80009c8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009cc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80009d0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80009e4:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80009f6:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009f8:	f001 fe94 	bl	8002724 <HAL_UART_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000a02:	f000 f81d 	bl	8000a40 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200000b4 	.word	0x200000b4
 8000a10:	40013800 	.word	0x40013800

08000a14 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <MX_GPIO_Init+0x28>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	4a07      	ldr	r2, [pc, #28]	@ (8000a3c <MX_GPIO_Init+0x28>)
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	6193      	str	r3, [r2, #24]
 8000a26:	4b05      	ldr	r3, [pc, #20]	@ (8000a3c <MX_GPIO_Init+0x28>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	40021000 	.word	0x40021000

08000a40 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a44:	b672      	cpsid	i
}
 8000a46:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <Error_Handler+0x8>

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a52:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <HAL_MspInit+0x5c>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	4a14      	ldr	r2, [pc, #80]	@ (8000aa8 <HAL_MspInit+0x5c>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6193      	str	r3, [r2, #24]
 8000a5e:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <HAL_MspInit+0x5c>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <HAL_MspInit+0x5c>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa8 <HAL_MspInit+0x5c>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a74:	61d3      	str	r3, [r2, #28]
 8000a76:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <HAL_MspInit+0x5c>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000a82:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <HAL_MspInit+0x60>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	4a04      	ldr	r2, [pc, #16]	@ (8000aac <HAL_MspInit+0x60>)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010000 	.word	0x40010000

08000ab0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a14      	ldr	r2, [pc, #80]	@ (8000b1c <HAL_ADC_MspInit+0x6c>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d121      	bne.n	8000b14 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ad0:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <HAL_ADC_MspInit+0x70>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a12      	ldr	r2, [pc, #72]	@ (8000b20 <HAL_ADC_MspInit+0x70>)
 8000ad6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <HAL_ADC_MspInit+0x70>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <HAL_ADC_MspInit+0x70>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a0c      	ldr	r2, [pc, #48]	@ (8000b20 <HAL_ADC_MspInit+0x70>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <HAL_ADC_MspInit+0x70>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f003 0304 	and.w	r3, r3, #4
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b00:	2303      	movs	r3, #3
 8000b02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b04:	2303      	movs	r3, #3
 8000b06:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <HAL_ADC_MspInit+0x74>)
 8000b10:	f000 ff10 	bl	8001934 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b14:	bf00      	nop
 8000b16:	3720      	adds	r7, #32
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40012400 	.word	0x40012400
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40010800 	.word	0x40010800

08000b28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a1c      	ldr	r2, [pc, #112]	@ (8000bb4 <HAL_UART_MspInit+0x8c>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d131      	bne.n	8000bac <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b48:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb8 <HAL_UART_MspInit+0x90>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8000bb8 <HAL_UART_MspInit+0x90>)
 8000b4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <HAL_UART_MspInit+0x90>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <HAL_UART_MspInit+0x90>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a14      	ldr	r2, [pc, #80]	@ (8000bb8 <HAL_UART_MspInit+0x90>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <HAL_UART_MspInit+0x90>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0310 	add.w	r3, r7, #16
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480b      	ldr	r0, [pc, #44]	@ (8000bbc <HAL_UART_MspInit+0x94>)
 8000b8e:	f000 fed1 	bl	8001934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <HAL_UART_MspInit+0x94>)
 8000ba8:	f000 fec4 	bl	8001934 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000bac:	bf00      	nop
 8000bae:	3720      	adds	r7, #32
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40013800 	.word	0x40013800
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40010800 	.word	0x40010800

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c10:	f000 f914 	bl	8000e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	e00a      	b.n	8000c40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c2a:	f3af 8000 	nop.w
 8000c2e:	4601      	mov	r1, r0
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	1c5a      	adds	r2, r3, #1
 8000c34:	60ba      	str	r2, [r7, #8]
 8000c36:	b2ca      	uxtb	r2, r1
 8000c38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	dbf0      	blt.n	8000c2a <_read+0x12>
  }

  return len;
 8000c48:	687b      	ldr	r3, [r7, #4]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	e009      	b.n	8000c78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	60ba      	str	r2, [r7, #8]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fd75 	bl	800075c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dbf1      	blt.n	8000c64 <_write+0x12>
  }
  return len;
 8000c80:	687b      	ldr	r3, [r7, #4]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_close>:

int _close(int file)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cb0:	605a      	str	r2, [r3, #4]
  return 0;
 8000cb2:	2300      	movs	r3, #0
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr

08000cbe <_isatty>:

int _isatty(int file)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr

08000cd2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b085      	sub	sp, #20
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	60f8      	str	r0, [r7, #12]
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
	...

08000cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf4:	4a14      	ldr	r2, [pc, #80]	@ (8000d48 <_sbrk+0x5c>)
 8000cf6:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <_sbrk+0x60>)
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d00:	4b13      	ldr	r3, [pc, #76]	@ (8000d50 <_sbrk+0x64>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d102      	bne.n	8000d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d08:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <_sbrk+0x64>)
 8000d0a:	4a12      	ldr	r2, [pc, #72]	@ (8000d54 <_sbrk+0x68>)
 8000d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0e:	4b10      	ldr	r3, [pc, #64]	@ (8000d50 <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d207      	bcs.n	8000d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d1c:	f002 f97e 	bl	800301c <__errno>
 8000d20:	4603      	mov	r3, r0
 8000d22:	220c      	movs	r2, #12
 8000d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2a:	e009      	b.n	8000d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d2c:	4b08      	ldr	r3, [pc, #32]	@ (8000d50 <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d32:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	4a05      	ldr	r2, [pc, #20]	@ (8000d50 <_sbrk+0x64>)
 8000d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20002800 	.word	0x20002800
 8000d4c:	00000400 	.word	0x00000400
 8000d50:	20000100 	.word	0x20000100
 8000d54:	20000258 	.word	0x20000258

08000d58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d64:	f7ff fff8 	bl	8000d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d68:	480b      	ldr	r0, [pc, #44]	@ (8000d98 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d6a:	490c      	ldr	r1, [pc, #48]	@ (8000d9c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000da0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a09      	ldr	r2, [pc, #36]	@ (8000da4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d80:	4c09      	ldr	r4, [pc, #36]	@ (8000da8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f002 f94b 	bl	8003028 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d92:	f7ff fcf5 	bl	8000780 <main>
  bx lr
 8000d96:	4770      	bx	lr
  ldr r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d9c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000da0:	08003b4c 	.word	0x08003b4c
  ldr r2, =_sbss
 8000da4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000da8:	20000254 	.word	0x20000254

08000dac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC1_2_IRQHandler>
	...

08000db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db4:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <HAL_Init+0x28>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a07      	ldr	r2, [pc, #28]	@ (8000dd8 <HAL_Init+0x28>)
 8000dba:	f043 0310 	orr.w	r3, r3, #16
 8000dbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 fd83 	bl	80018cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc6:	200f      	movs	r0, #15
 8000dc8:	f000 f808 	bl	8000ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dcc:	f7ff fe3e 	bl	8000a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40022000 	.word	0x40022000

08000ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <HAL_InitTick+0x54>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <HAL_InitTick+0x58>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 fd8d 	bl	800191a <HAL_SYSTICK_Config>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00e      	b.n	8000e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b0f      	cmp	r3, #15
 8000e0e:	d80a      	bhi.n	8000e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e10:	2200      	movs	r2, #0
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f000 fd63 	bl	80018e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e1c:	4a06      	ldr	r2, [pc, #24]	@ (8000e38 <HAL_InitTick+0x5c>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e000      	b.n	8000e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20000008 	.word	0x20000008
 8000e38:	20000004 	.word	0x20000004

08000e3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e40:	4b05      	ldr	r3, [pc, #20]	@ (8000e58 <HAL_IncTick+0x1c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <HAL_IncTick+0x20>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	4a03      	ldr	r2, [pc, #12]	@ (8000e5c <HAL_IncTick+0x20>)
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000104 	.word	0x20000104

08000e60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b02      	ldr	r3, [pc, #8]	@ (8000e70 <HAL_GetTick+0x10>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	20000104 	.word	0x20000104

08000e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e7c:	f7ff fff0 	bl	8000e60 <HAL_GetTick>
 8000e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e8c:	d005      	beq.n	8000e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <HAL_Delay+0x44>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4413      	add	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e9a:	bf00      	nop
 8000e9c:	f7ff ffe0 	bl	8000e60 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8f7      	bhi.n	8000e9c <HAL_Delay+0x28>
  {
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008

08000ebc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e0be      	b.n	800105c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d109      	bne.n	8000f00 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff fdd8 	bl	8000ab0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 fbf1 	bl	80016e8 <ADC_ConversionStop_Disable>
 8000f06:	4603      	mov	r3, r0
 8000f08:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f040 8099 	bne.w	800104a <HAL_ADC_Init+0x18e>
 8000f18:	7dfb      	ldrb	r3, [r7, #23]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f040 8095 	bne.w	800104a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f24:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f28:	f023 0302 	bic.w	r3, r3, #2
 8000f2c:	f043 0202 	orr.w	r2, r3, #2
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f3c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	7b1b      	ldrb	r3, [r3, #12]
 8000f42:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f44:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f54:	d003      	beq.n	8000f5e <HAL_ADC_Init+0xa2>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d102      	bne.n	8000f64 <HAL_ADC_Init+0xa8>
 8000f5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f62:	e000      	b.n	8000f66 <HAL_ADC_Init+0xaa>
 8000f64:	2300      	movs	r3, #0
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	7d1b      	ldrb	r3, [r3, #20]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d119      	bne.n	8000fa8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	7b1b      	ldrb	r3, [r3, #12]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d109      	bne.n	8000f90 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	3b01      	subs	r3, #1
 8000f82:	035a      	lsls	r2, r3, #13
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	e00b      	b.n	8000fa8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f94:	f043 0220 	orr.w	r2, r3, #32
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fa0:	f043 0201 	orr.w	r2, r3, #1
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	4b28      	ldr	r3, [pc, #160]	@ (8001064 <HAL_ADC_Init+0x1a8>)
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	6812      	ldr	r2, [r2, #0]
 8000fca:	68b9      	ldr	r1, [r7, #8]
 8000fcc:	430b      	orrs	r3, r1
 8000fce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fd8:	d003      	beq.n	8000fe2 <HAL_ADC_Init+0x126>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d104      	bne.n	8000fec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	051b      	lsls	r3, r3, #20
 8000fea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ff2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	4b18      	ldr	r3, [pc, #96]	@ (8001068 <HAL_ADC_Init+0x1ac>)
 8001008:	4013      	ands	r3, r2
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	429a      	cmp	r2, r3
 800100e:	d10b      	bne.n	8001028 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800101a:	f023 0303 	bic.w	r3, r3, #3
 800101e:	f043 0201 	orr.w	r2, r3, #1
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001026:	e018      	b.n	800105a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800102c:	f023 0312 	bic.w	r3, r3, #18
 8001030:	f043 0210 	orr.w	r2, r3, #16
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800103c:	f043 0201 	orr.w	r2, r3, #1
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001048:	e007      	b.n	800105a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800104e:	f043 0210 	orr.w	r2, r3, #16
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800105a:	7dfb      	ldrb	r3, [r7, #23]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	ffe1f7fd 	.word	0xffe1f7fd
 8001068:	ff1f0efe 	.word	0xff1f0efe

0800106c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800107e:	2b01      	cmp	r3, #1
 8001080:	d101      	bne.n	8001086 <HAL_ADC_Start+0x1a>
 8001082:	2302      	movs	r3, #2
 8001084:	e098      	b.n	80011b8 <HAL_ADC_Start+0x14c>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 fad0 	bl	8001634 <ADC_Enable>
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	2b00      	cmp	r3, #0
 800109c:	f040 8087 	bne.w	80011ae <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80010a8:	f023 0301 	bic.w	r3, r3, #1
 80010ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a41      	ldr	r2, [pc, #260]	@ (80011c0 <HAL_ADC_Start+0x154>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d105      	bne.n	80010ca <HAL_ADC_Start+0x5e>
 80010be:	4b41      	ldr	r3, [pc, #260]	@ (80011c4 <HAL_ADC_Start+0x158>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d115      	bne.n	80010f6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ce:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d026      	beq.n	8001132 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010e8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010ec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010f4:	e01d      	b.n	8001132 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a2f      	ldr	r2, [pc, #188]	@ (80011c4 <HAL_ADC_Start+0x158>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d004      	beq.n	8001116 <HAL_ADC_Start+0xaa>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a2b      	ldr	r2, [pc, #172]	@ (80011c0 <HAL_ADC_Start+0x154>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d10d      	bne.n	8001132 <HAL_ADC_Start+0xc6>
 8001116:	4b2b      	ldr	r3, [pc, #172]	@ (80011c4 <HAL_ADC_Start+0x158>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800111e:	2b00      	cmp	r3, #0
 8001120:	d007      	beq.n	8001132 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001126:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800112a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001136:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d006      	beq.n	800114c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001142:	f023 0206 	bic.w	r2, r3, #6
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	62da      	str	r2, [r3, #44]	@ 0x2c
 800114a:	e002      	b.n	8001152 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f06f 0202 	mvn.w	r2, #2
 8001162:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800116e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001172:	d113      	bne.n	800119c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001178:	4a11      	ldr	r2, [pc, #68]	@ (80011c0 <HAL_ADC_Start+0x154>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d105      	bne.n	800118a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <HAL_ADC_Start+0x158>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001186:	2b00      	cmp	r3, #0
 8001188:	d108      	bne.n	800119c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	e00c      	b.n	80011b6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	e003      	b.n	80011b6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40012800 	.word	0x40012800
 80011c4:	40012400 	.word	0x40012400

080011c8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d0:	2300      	movs	r3, #0
 80011d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d101      	bne.n	80011e2 <HAL_ADC_Stop+0x1a>
 80011de:	2302      	movs	r3, #2
 80011e0:	e01a      	b.n	8001218 <HAL_ADC_Stop+0x50>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 fa7c 	bl	80016e8 <ADC_ConversionStop_Disable>
 80011f0:	4603      	mov	r3, r0
 80011f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d109      	bne.n	800120e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001202:	f023 0301 	bic.w	r3, r3, #1
 8001206:	f043 0201 	orr.w	r2, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001216:	7bfb      	ldrb	r3, [r7, #15]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001236:	f7ff fe13 	bl	8000e60 <HAL_GetTick>
 800123a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00b      	beq.n	8001262 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800124e:	f043 0220 	orr.w	r2, r3, #32
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e0d3      	b.n	800140a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800126c:	2b00      	cmp	r3, #0
 800126e:	d131      	bne.n	80012d4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001276:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800127a:	2b00      	cmp	r3, #0
 800127c:	d12a      	bne.n	80012d4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800127e:	e021      	b.n	80012c4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001286:	d01d      	beq.n	80012c4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d007      	beq.n	800129e <HAL_ADC_PollForConversion+0x7e>
 800128e:	f7ff fde7 	bl	8000e60 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	d212      	bcs.n	80012c4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d10b      	bne.n	80012c4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b0:	f043 0204 	orr.w	r2, r3, #4
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e0a2      	b.n	800140a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0d6      	beq.n	8001280 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80012d2:	e070      	b.n	80013b6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80012d4:	4b4f      	ldr	r3, [pc, #316]	@ (8001414 <HAL_ADC_PollForConversion+0x1f4>)
 80012d6:	681c      	ldr	r4, [r3, #0]
 80012d8:	2002      	movs	r0, #2
 80012da:	f001 f96d 	bl	80025b8 <HAL_RCCEx_GetPeriphCLKFreq>
 80012de:	4603      	mov	r3, r0
 80012e0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6919      	ldr	r1, [r3, #16]
 80012ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001418 <HAL_ADC_PollForConversion+0x1f8>)
 80012ec:	400b      	ands	r3, r1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d118      	bne.n	8001324 <HAL_ADC_PollForConversion+0x104>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68d9      	ldr	r1, [r3, #12]
 80012f8:	4b48      	ldr	r3, [pc, #288]	@ (800141c <HAL_ADC_PollForConversion+0x1fc>)
 80012fa:	400b      	ands	r3, r1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d111      	bne.n	8001324 <HAL_ADC_PollForConversion+0x104>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6919      	ldr	r1, [r3, #16]
 8001306:	4b46      	ldr	r3, [pc, #280]	@ (8001420 <HAL_ADC_PollForConversion+0x200>)
 8001308:	400b      	ands	r3, r1
 800130a:	2b00      	cmp	r3, #0
 800130c:	d108      	bne.n	8001320 <HAL_ADC_PollForConversion+0x100>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68d9      	ldr	r1, [r3, #12]
 8001314:	4b43      	ldr	r3, [pc, #268]	@ (8001424 <HAL_ADC_PollForConversion+0x204>)
 8001316:	400b      	ands	r3, r1
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <HAL_ADC_PollForConversion+0x100>
 800131c:	2314      	movs	r3, #20
 800131e:	e020      	b.n	8001362 <HAL_ADC_PollForConversion+0x142>
 8001320:	2329      	movs	r3, #41	@ 0x29
 8001322:	e01e      	b.n	8001362 <HAL_ADC_PollForConversion+0x142>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6919      	ldr	r1, [r3, #16]
 800132a:	4b3d      	ldr	r3, [pc, #244]	@ (8001420 <HAL_ADC_PollForConversion+0x200>)
 800132c:	400b      	ands	r3, r1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d106      	bne.n	8001340 <HAL_ADC_PollForConversion+0x120>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68d9      	ldr	r1, [r3, #12]
 8001338:	4b3a      	ldr	r3, [pc, #232]	@ (8001424 <HAL_ADC_PollForConversion+0x204>)
 800133a:	400b      	ands	r3, r1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00d      	beq.n	800135c <HAL_ADC_PollForConversion+0x13c>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6919      	ldr	r1, [r3, #16]
 8001346:	4b38      	ldr	r3, [pc, #224]	@ (8001428 <HAL_ADC_PollForConversion+0x208>)
 8001348:	400b      	ands	r3, r1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d108      	bne.n	8001360 <HAL_ADC_PollForConversion+0x140>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68d9      	ldr	r1, [r3, #12]
 8001354:	4b34      	ldr	r3, [pc, #208]	@ (8001428 <HAL_ADC_PollForConversion+0x208>)
 8001356:	400b      	ands	r3, r1
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <HAL_ADC_PollForConversion+0x140>
 800135c:	2354      	movs	r3, #84	@ 0x54
 800135e:	e000      	b.n	8001362 <HAL_ADC_PollForConversion+0x142>
 8001360:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001362:	fb02 f303 	mul.w	r3, r2, r3
 8001366:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001368:	e021      	b.n	80013ae <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001370:	d01a      	beq.n	80013a8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d007      	beq.n	8001388 <HAL_ADC_PollForConversion+0x168>
 8001378:	f7ff fd72 	bl	8000e60 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	429a      	cmp	r2, r3
 8001386:	d20f      	bcs.n	80013a8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	429a      	cmp	r2, r3
 800138e:	d90b      	bls.n	80013a8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001394:	f043 0204 	orr.w	r2, r3, #4
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e030      	b.n	800140a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3301      	adds	r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d8d9      	bhi.n	800136a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f06f 0212 	mvn.w	r2, #18
 80013be:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80013d6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80013da:	d115      	bne.n	8001408 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d111      	bne.n	8001408 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d105      	bne.n	8001408 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001400:	f043 0201 	orr.w	r2, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	371c      	adds	r7, #28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd90      	pop	{r4, r7, pc}
 8001412:	bf00      	nop
 8001414:	20000000 	.word	0x20000000
 8001418:	24924924 	.word	0x24924924
 800141c:	00924924 	.word	0x00924924
 8001420:	12492492 	.word	0x12492492
 8001424:	00492492 	.word	0x00492492
 8001428:	00249249 	.word	0x00249249

0800142c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800145c:	2b01      	cmp	r3, #1
 800145e:	d101      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x20>
 8001460:	2302      	movs	r3, #2
 8001462:	e0dc      	b.n	800161e <HAL_ADC_ConfigChannel+0x1da>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b06      	cmp	r3, #6
 8001472:	d81c      	bhi.n	80014ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	3b05      	subs	r3, #5
 8001486:	221f      	movs	r2, #31
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	4019      	ands	r1, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	3b05      	subs	r3, #5
 80014a0:	fa00 f203 	lsl.w	r2, r0, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80014ac:	e03c      	b.n	8001528 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b0c      	cmp	r3, #12
 80014b4:	d81c      	bhi.n	80014f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	3b23      	subs	r3, #35	@ 0x23
 80014c8:	221f      	movs	r2, #31
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	4019      	ands	r1, r3
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	3b23      	subs	r3, #35	@ 0x23
 80014e2:	fa00 f203 	lsl.w	r2, r0, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80014ee:	e01b      	b.n	8001528 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	3b41      	subs	r3, #65	@ 0x41
 8001502:	221f      	movs	r2, #31
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	4019      	ands	r1, r3
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	3b41      	subs	r3, #65	@ 0x41
 800151c:	fa00 f203 	lsl.w	r2, r0, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b09      	cmp	r3, #9
 800152e:	d91c      	bls.n	800156a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68d9      	ldr	r1, [r3, #12]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4613      	mov	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4413      	add	r3, r2
 8001540:	3b1e      	subs	r3, #30
 8001542:	2207      	movs	r2, #7
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	4019      	ands	r1, r3
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	6898      	ldr	r0, [r3, #8]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4613      	mov	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4413      	add	r3, r2
 800155a:	3b1e      	subs	r3, #30
 800155c:	fa00 f203 	lsl.w	r2, r0, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	e019      	b.n	800159e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6919      	ldr	r1, [r3, #16]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4613      	mov	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4413      	add	r3, r2
 800157a:	2207      	movs	r2, #7
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	4019      	ands	r1, r3
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	6898      	ldr	r0, [r3, #8]
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4613      	mov	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4413      	add	r3, r2
 8001592:	fa00 f203 	lsl.w	r2, r0, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b10      	cmp	r3, #16
 80015a4:	d003      	beq.n	80015ae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015aa:	2b11      	cmp	r3, #17
 80015ac:	d132      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001628 <HAL_ADC_ConfigChannel+0x1e4>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d125      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d126      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80015d4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b10      	cmp	r3, #16
 80015dc:	d11a      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015de:	4b13      	ldr	r3, [pc, #76]	@ (800162c <HAL_ADC_ConfigChannel+0x1e8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a13      	ldr	r2, [pc, #76]	@ (8001630 <HAL_ADC_ConfigChannel+0x1ec>)
 80015e4:	fba2 2303 	umull	r2, r3, r2, r3
 80015e8:	0c9a      	lsrs	r2, r3, #18
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015f4:	e002      	b.n	80015fc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f9      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x1b2>
 8001602:	e007      	b.n	8001614 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001608:	f043 0220 	orr.w	r2, r3, #32
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800161c:	7bfb      	ldrb	r3, [r7, #15]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	40012400 	.word	0x40012400
 800162c:	20000000 	.word	0x20000000
 8001630:	431bde83 	.word	0x431bde83

08001634 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b01      	cmp	r3, #1
 8001650:	d040      	beq.n	80016d4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 0201 	orr.w	r2, r2, #1
 8001660:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001662:	4b1f      	ldr	r3, [pc, #124]	@ (80016e0 <ADC_Enable+0xac>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a1f      	ldr	r2, [pc, #124]	@ (80016e4 <ADC_Enable+0xb0>)
 8001668:	fba2 2303 	umull	r2, r3, r2, r3
 800166c:	0c9b      	lsrs	r3, r3, #18
 800166e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001670:	e002      	b.n	8001678 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	3b01      	subs	r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f9      	bne.n	8001672 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800167e:	f7ff fbef 	bl	8000e60 <HAL_GetTick>
 8001682:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001684:	e01f      	b.n	80016c6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001686:	f7ff fbeb 	bl	8000e60 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d918      	bls.n	80016c6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d011      	beq.n	80016c6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a6:	f043 0210 	orr.w	r2, r3, #16
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b2:	f043 0201 	orr.w	r2, r3, #1
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e007      	b.n	80016d6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d1d8      	bne.n	8001686 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000000 	.word	0x20000000
 80016e4:	431bde83 	.word	0x431bde83

080016e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d12e      	bne.n	8001760 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0201 	bic.w	r2, r2, #1
 8001710:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001712:	f7ff fba5 	bl	8000e60 <HAL_GetTick>
 8001716:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001718:	e01b      	b.n	8001752 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800171a:	f7ff fba1 	bl	8000e60 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d914      	bls.n	8001752 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b01      	cmp	r3, #1
 8001734:	d10d      	bne.n	8001752 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800173a:	f043 0210 	orr.w	r2, r3, #16
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001746:	f043 0201 	orr.w	r2, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e007      	b.n	8001762 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b01      	cmp	r3, #1
 800175e:	d0dc      	beq.n	800171a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001788:	4013      	ands	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001794:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800179c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179e:	4a04      	ldr	r2, [pc, #16]	@ (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60d3      	str	r3, [r2, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b8:	4b04      	ldr	r3, [pc, #16]	@ (80017cc <__NVIC_GetPriorityGrouping+0x18>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	0a1b      	lsrs	r3, r3, #8
 80017be:	f003 0307 	and.w	r3, r3, #7
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db0a      	blt.n	80017fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	490c      	ldr	r1, [pc, #48]	@ (800181c <__NVIC_SetPriority+0x4c>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	0112      	lsls	r2, r2, #4
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	440b      	add	r3, r1
 80017f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f8:	e00a      	b.n	8001810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4908      	ldr	r1, [pc, #32]	@ (8001820 <__NVIC_SetPriority+0x50>)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	3b04      	subs	r3, #4
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	440b      	add	r3, r1
 800180e:	761a      	strb	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000e100 	.word	0xe000e100
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	@ 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f1c3 0307 	rsb	r3, r3, #7
 800183e:	2b04      	cmp	r3, #4
 8001840:	bf28      	it	cs
 8001842:	2304      	movcs	r3, #4
 8001844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3304      	adds	r3, #4
 800184a:	2b06      	cmp	r3, #6
 800184c:	d902      	bls.n	8001854 <NVIC_EncodePriority+0x30>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3b03      	subs	r3, #3
 8001852:	e000      	b.n	8001856 <NVIC_EncodePriority+0x32>
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	f04f 32ff 	mov.w	r2, #4294967295
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	401a      	ands	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	43d9      	mvns	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	4313      	orrs	r3, r2
         );
}
 800187e:	4618      	mov	r0, r3
 8001880:	3724      	adds	r7, #36	@ 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3b01      	subs	r3, #1
 8001894:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001898:	d301      	bcc.n	800189e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800189a:	2301      	movs	r3, #1
 800189c:	e00f      	b.n	80018be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800189e:	4a0a      	ldr	r2, [pc, #40]	@ (80018c8 <SysTick_Config+0x40>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a6:	210f      	movs	r1, #15
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	f7ff ff90 	bl	80017d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b0:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <SysTick_Config+0x40>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b6:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <SysTick_Config+0x40>)
 80018b8:	2207      	movs	r2, #7
 80018ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	e000e010 	.word	0xe000e010

080018cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ff49 	bl	800176c <__NVIC_SetPriorityGrouping>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b086      	sub	sp, #24
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	4603      	mov	r3, r0
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f4:	f7ff ff5e 	bl	80017b4 <__NVIC_GetPriorityGrouping>
 80018f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	68b9      	ldr	r1, [r7, #8]
 80018fe:	6978      	ldr	r0, [r7, #20]
 8001900:	f7ff ff90 	bl	8001824 <NVIC_EncodePriority>
 8001904:	4602      	mov	r2, r0
 8001906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190a:	4611      	mov	r1, r2
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff5f 	bl	80017d0 <__NVIC_SetPriority>
}
 8001912:	bf00      	nop
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ffb0 	bl	8001888 <SysTick_Config>
 8001928:	4603      	mov	r3, r0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001934:	b480      	push	{r7}
 8001936:	b08b      	sub	sp, #44	@ 0x2c
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800193e:	2300      	movs	r3, #0
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001946:	e161      	b.n	8001c0c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001948:	2201      	movs	r2, #1
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	429a      	cmp	r2, r3
 8001962:	f040 8150 	bne.w	8001c06 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	4a97      	ldr	r2, [pc, #604]	@ (8001bc8 <HAL_GPIO_Init+0x294>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d05e      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
 8001970:	4a95      	ldr	r2, [pc, #596]	@ (8001bc8 <HAL_GPIO_Init+0x294>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d875      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 8001976:	4a95      	ldr	r2, [pc, #596]	@ (8001bcc <HAL_GPIO_Init+0x298>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d058      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
 800197c:	4a93      	ldr	r2, [pc, #588]	@ (8001bcc <HAL_GPIO_Init+0x298>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d86f      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 8001982:	4a93      	ldr	r2, [pc, #588]	@ (8001bd0 <HAL_GPIO_Init+0x29c>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d052      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
 8001988:	4a91      	ldr	r2, [pc, #580]	@ (8001bd0 <HAL_GPIO_Init+0x29c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d869      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 800198e:	4a91      	ldr	r2, [pc, #580]	@ (8001bd4 <HAL_GPIO_Init+0x2a0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d04c      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
 8001994:	4a8f      	ldr	r2, [pc, #572]	@ (8001bd4 <HAL_GPIO_Init+0x2a0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d863      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 800199a:	4a8f      	ldr	r2, [pc, #572]	@ (8001bd8 <HAL_GPIO_Init+0x2a4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d046      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
 80019a0:	4a8d      	ldr	r2, [pc, #564]	@ (8001bd8 <HAL_GPIO_Init+0x2a4>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d85d      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 80019a6:	2b12      	cmp	r3, #18
 80019a8:	d82a      	bhi.n	8001a00 <HAL_GPIO_Init+0xcc>
 80019aa:	2b12      	cmp	r3, #18
 80019ac:	d859      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 80019ae:	a201      	add	r2, pc, #4	@ (adr r2, 80019b4 <HAL_GPIO_Init+0x80>)
 80019b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b4:	08001a2f 	.word	0x08001a2f
 80019b8:	08001a09 	.word	0x08001a09
 80019bc:	08001a1b 	.word	0x08001a1b
 80019c0:	08001a5d 	.word	0x08001a5d
 80019c4:	08001a63 	.word	0x08001a63
 80019c8:	08001a63 	.word	0x08001a63
 80019cc:	08001a63 	.word	0x08001a63
 80019d0:	08001a63 	.word	0x08001a63
 80019d4:	08001a63 	.word	0x08001a63
 80019d8:	08001a63 	.word	0x08001a63
 80019dc:	08001a63 	.word	0x08001a63
 80019e0:	08001a63 	.word	0x08001a63
 80019e4:	08001a63 	.word	0x08001a63
 80019e8:	08001a63 	.word	0x08001a63
 80019ec:	08001a63 	.word	0x08001a63
 80019f0:	08001a63 	.word	0x08001a63
 80019f4:	08001a63 	.word	0x08001a63
 80019f8:	08001a11 	.word	0x08001a11
 80019fc:	08001a25 	.word	0x08001a25
 8001a00:	4a76      	ldr	r2, [pc, #472]	@ (8001bdc <HAL_GPIO_Init+0x2a8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d013      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a06:	e02c      	b.n	8001a62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	623b      	str	r3, [r7, #32]
          break;
 8001a0e:	e029      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	3304      	adds	r3, #4
 8001a16:	623b      	str	r3, [r7, #32]
          break;
 8001a18:	e024      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	3308      	adds	r3, #8
 8001a20:	623b      	str	r3, [r7, #32]
          break;
 8001a22:	e01f      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	330c      	adds	r3, #12
 8001a2a:	623b      	str	r3, [r7, #32]
          break;
 8001a2c:	e01a      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d102      	bne.n	8001a3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a36:	2304      	movs	r3, #4
 8001a38:	623b      	str	r3, [r7, #32]
          break;
 8001a3a:	e013      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d105      	bne.n	8001a50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a44:	2308      	movs	r3, #8
 8001a46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	611a      	str	r2, [r3, #16]
          break;
 8001a4e:	e009      	b.n	8001a64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a50:	2308      	movs	r3, #8
 8001a52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69fa      	ldr	r2, [r7, #28]
 8001a58:	615a      	str	r2, [r3, #20]
          break;
 8001a5a:	e003      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	623b      	str	r3, [r7, #32]
          break;
 8001a60:	e000      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          break;
 8001a62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	2bff      	cmp	r3, #255	@ 0xff
 8001a68:	d801      	bhi.n	8001a6e <HAL_GPIO_Init+0x13a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	e001      	b.n	8001a72 <HAL_GPIO_Init+0x13e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3304      	adds	r3, #4
 8001a72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2bff      	cmp	r3, #255	@ 0xff
 8001a78:	d802      	bhi.n	8001a80 <HAL_GPIO_Init+0x14c>
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	e002      	b.n	8001a86 <HAL_GPIO_Init+0x152>
 8001a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a82:	3b08      	subs	r3, #8
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	210f      	movs	r1, #15
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	401a      	ands	r2, r3
 8001a98:	6a39      	ldr	r1, [r7, #32]
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80a9 	beq.w	8001c06 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ab4:	4b4a      	ldr	r3, [pc, #296]	@ (8001be0 <HAL_GPIO_Init+0x2ac>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4a49      	ldr	r2, [pc, #292]	@ (8001be0 <HAL_GPIO_Init+0x2ac>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6193      	str	r3, [r2, #24]
 8001ac0:	4b47      	ldr	r3, [pc, #284]	@ (8001be0 <HAL_GPIO_Init+0x2ac>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001acc:	4a45      	ldr	r2, [pc, #276]	@ (8001be4 <HAL_GPIO_Init+0x2b0>)
 8001ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	4013      	ands	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a3d      	ldr	r2, [pc, #244]	@ (8001be8 <HAL_GPIO_Init+0x2b4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d00d      	beq.n	8001b14 <HAL_GPIO_Init+0x1e0>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a3c      	ldr	r2, [pc, #240]	@ (8001bec <HAL_GPIO_Init+0x2b8>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d007      	beq.n	8001b10 <HAL_GPIO_Init+0x1dc>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a3b      	ldr	r2, [pc, #236]	@ (8001bf0 <HAL_GPIO_Init+0x2bc>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d101      	bne.n	8001b0c <HAL_GPIO_Init+0x1d8>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e004      	b.n	8001b16 <HAL_GPIO_Init+0x1e2>
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e002      	b.n	8001b16 <HAL_GPIO_Init+0x1e2>
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <HAL_GPIO_Init+0x1e2>
 8001b14:	2300      	movs	r3, #0
 8001b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b18:	f002 0203 	and.w	r2, r2, #3
 8001b1c:	0092      	lsls	r2, r2, #2
 8001b1e:	4093      	lsls	r3, r2
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b26:	492f      	ldr	r1, [pc, #188]	@ (8001be4 <HAL_GPIO_Init+0x2b0>)
 8001b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b40:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf4 <HAL_GPIO_Init+0x2c0>)
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	492b      	ldr	r1, [pc, #172]	@ (8001bf4 <HAL_GPIO_Init+0x2c0>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	608b      	str	r3, [r1, #8]
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b4e:	4b29      	ldr	r3, [pc, #164]	@ (8001bf4 <HAL_GPIO_Init+0x2c0>)
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	4927      	ldr	r1, [pc, #156]	@ (8001bf4 <HAL_GPIO_Init+0x2c0>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d006      	beq.n	8001b76 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b68:	4b22      	ldr	r3, [pc, #136]	@ (8001bf4 <HAL_GPIO_Init+0x2c0>)
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	4921      	ldr	r1, [pc, #132]	@ (8001bf4 <HAL_GPIO_Init+0x2c0>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	60cb      	str	r3, [r1, #12]
 8001b74:	e006      	b.n	8001b84 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b76:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf4 <HAL_GPIO_Init+0x2c0>)
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	491d      	ldr	r1, [pc, #116]	@ (8001bf4 <HAL_GPIO_Init+0x2c0>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d006      	beq.n	8001b9e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b90:	4b18      	ldr	r3, [pc, #96]	@ (8001bf4 <HAL_GPIO_Init+0x2c0>)
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	4917      	ldr	r1, [pc, #92]	@ (8001bf4 <HAL_GPIO_Init+0x2c0>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
 8001b9c:	e006      	b.n	8001bac <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b9e:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <HAL_GPIO_Init+0x2c0>)
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	4913      	ldr	r1, [pc, #76]	@ (8001bf4 <HAL_GPIO_Init+0x2c0>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d01f      	beq.n	8001bf8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf4 <HAL_GPIO_Init+0x2c0>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	490d      	ldr	r1, [pc, #52]	@ (8001bf4 <HAL_GPIO_Init+0x2c0>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	600b      	str	r3, [r1, #0]
 8001bc4:	e01f      	b.n	8001c06 <HAL_GPIO_Init+0x2d2>
 8001bc6:	bf00      	nop
 8001bc8:	10320000 	.word	0x10320000
 8001bcc:	10310000 	.word	0x10310000
 8001bd0:	10220000 	.word	0x10220000
 8001bd4:	10210000 	.word	0x10210000
 8001bd8:	10120000 	.word	0x10120000
 8001bdc:	10110000 	.word	0x10110000
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40010000 	.word	0x40010000
 8001be8:	40010800 	.word	0x40010800
 8001bec:	40010c00 	.word	0x40010c00
 8001bf0:	40011000 	.word	0x40011000
 8001bf4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <HAL_GPIO_Init+0x2f4>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	4909      	ldr	r1, [pc, #36]	@ (8001c28 <HAL_GPIO_Init+0x2f4>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	3301      	adds	r3, #1
 8001c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c12:	fa22 f303 	lsr.w	r3, r2, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f47f ae96 	bne.w	8001948 <HAL_GPIO_Init+0x14>
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	bf00      	nop
 8001c20:	372c      	adds	r7, #44	@ 0x2c
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	40010400 	.word	0x40010400

08001c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e272      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 8087 	beq.w	8001d5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c4c:	4b92      	ldr	r3, [pc, #584]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 030c 	and.w	r3, r3, #12
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d00c      	beq.n	8001c72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c58:	4b8f      	ldr	r3, [pc, #572]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d112      	bne.n	8001c8a <HAL_RCC_OscConfig+0x5e>
 8001c64:	4b8c      	ldr	r3, [pc, #560]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c70:	d10b      	bne.n	8001c8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c72:	4b89      	ldr	r3, [pc, #548]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d06c      	beq.n	8001d58 <HAL_RCC_OscConfig+0x12c>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d168      	bne.n	8001d58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e24c      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c92:	d106      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x76>
 8001c94:	4b80      	ldr	r3, [pc, #512]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a7f      	ldr	r2, [pc, #508]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	e02e      	b.n	8001d00 <HAL_RCC_OscConfig+0xd4>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x98>
 8001caa:	4b7b      	ldr	r3, [pc, #492]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a7a      	ldr	r2, [pc, #488]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	4b78      	ldr	r3, [pc, #480]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a77      	ldr	r2, [pc, #476]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e01d      	b.n	8001d00 <HAL_RCC_OscConfig+0xd4>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0xbc>
 8001cce:	4b72      	ldr	r3, [pc, #456]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a71      	ldr	r2, [pc, #452]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	4b6f      	ldr	r3, [pc, #444]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a6e      	ldr	r2, [pc, #440]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	e00b      	b.n	8001d00 <HAL_RCC_OscConfig+0xd4>
 8001ce8:	4b6b      	ldr	r3, [pc, #428]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a6a      	ldr	r2, [pc, #424]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	4b68      	ldr	r3, [pc, #416]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a67      	ldr	r2, [pc, #412]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d013      	beq.n	8001d30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff f8aa 	bl	8000e60 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff f8a6 	bl	8000e60 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	@ 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e200      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	4b5d      	ldr	r3, [pc, #372]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0xe4>
 8001d2e:	e014      	b.n	8001d5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7ff f896 	bl	8000e60 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d38:	f7ff f892 	bl	8000e60 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	@ 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e1ec      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	4b53      	ldr	r3, [pc, #332]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x10c>
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d063      	beq.n	8001e2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d66:	4b4c      	ldr	r3, [pc, #304]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00b      	beq.n	8001d8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d72:	4b49      	ldr	r3, [pc, #292]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d11c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x18c>
 8001d7e:	4b46      	ldr	r3, [pc, #280]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d116      	bne.n	8001db8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8a:	4b43      	ldr	r3, [pc, #268]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <HAL_RCC_OscConfig+0x176>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d001      	beq.n	8001da2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e1c0      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da2:	4b3d      	ldr	r3, [pc, #244]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4939      	ldr	r1, [pc, #228]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db6:	e03a      	b.n	8001e2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d020      	beq.n	8001e02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc0:	4b36      	ldr	r3, [pc, #216]	@ (8001e9c <HAL_RCC_OscConfig+0x270>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc6:	f7ff f84b 	bl	8000e60 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dce:	f7ff f847 	bl	8000e60 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e1a1      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dec:	4b2a      	ldr	r3, [pc, #168]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4927      	ldr	r1, [pc, #156]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]
 8001e00:	e015      	b.n	8001e2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e02:	4b26      	ldr	r3, [pc, #152]	@ (8001e9c <HAL_RCC_OscConfig+0x270>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7ff f82a 	bl	8000e60 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e10:	f7ff f826 	bl	8000e60 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e180      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	4b1d      	ldr	r3, [pc, #116]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d03a      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d019      	beq.n	8001e76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e42:	4b17      	ldr	r3, [pc, #92]	@ (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e48:	f7ff f80a 	bl	8000e60 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e50:	f7ff f806 	bl	8000e60 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e160      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e62:	4b0d      	ldr	r3, [pc, #52]	@ (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f000 face 	bl	8002410 <RCC_Delay>
 8001e74:	e01c      	b.n	8001eb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7c:	f7fe fff0 	bl	8000e60 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e82:	e00f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e84:	f7fe ffec 	bl	8000e60 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d908      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e146      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	42420000 	.word	0x42420000
 8001ea0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea4:	4b92      	ldr	r3, [pc, #584]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1e9      	bne.n	8001e84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80a6 	beq.w	800200a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec2:	4b8b      	ldr	r3, [pc, #556]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10d      	bne.n	8001eea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	4b88      	ldr	r3, [pc, #544]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	4a87      	ldr	r2, [pc, #540]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed8:	61d3      	str	r3, [r2, #28]
 8001eda:	4b85      	ldr	r3, [pc, #532]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eea:	4b82      	ldr	r3, [pc, #520]	@ (80020f4 <HAL_RCC_OscConfig+0x4c8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d118      	bne.n	8001f28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80020f4 <HAL_RCC_OscConfig+0x4c8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a7e      	ldr	r2, [pc, #504]	@ (80020f4 <HAL_RCC_OscConfig+0x4c8>)
 8001efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f02:	f7fe ffad 	bl	8000e60 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0a:	f7fe ffa9 	bl	8000e60 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b64      	cmp	r3, #100	@ 0x64
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e103      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	4b75      	ldr	r3, [pc, #468]	@ (80020f4 <HAL_RCC_OscConfig+0x4c8>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_OscConfig+0x312>
 8001f30:	4b6f      	ldr	r3, [pc, #444]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4a6e      	ldr	r2, [pc, #440]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6213      	str	r3, [r2, #32]
 8001f3c:	e02d      	b.n	8001f9a <HAL_RCC_OscConfig+0x36e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x334>
 8001f46:	4b6a      	ldr	r3, [pc, #424]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4a69      	ldr	r2, [pc, #420]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	f023 0301 	bic.w	r3, r3, #1
 8001f50:	6213      	str	r3, [r2, #32]
 8001f52:	4b67      	ldr	r3, [pc, #412]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	4a66      	ldr	r2, [pc, #408]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	f023 0304 	bic.w	r3, r3, #4
 8001f5c:	6213      	str	r3, [r2, #32]
 8001f5e:	e01c      	b.n	8001f9a <HAL_RCC_OscConfig+0x36e>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d10c      	bne.n	8001f82 <HAL_RCC_OscConfig+0x356>
 8001f68:	4b61      	ldr	r3, [pc, #388]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	4a60      	ldr	r2, [pc, #384]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f6e:	f043 0304 	orr.w	r3, r3, #4
 8001f72:	6213      	str	r3, [r2, #32]
 8001f74:	4b5e      	ldr	r3, [pc, #376]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4a5d      	ldr	r2, [pc, #372]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6213      	str	r3, [r2, #32]
 8001f80:	e00b      	b.n	8001f9a <HAL_RCC_OscConfig+0x36e>
 8001f82:	4b5b      	ldr	r3, [pc, #364]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	4a5a      	ldr	r2, [pc, #360]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	6213      	str	r3, [r2, #32]
 8001f8e:	4b58      	ldr	r3, [pc, #352]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	4a57      	ldr	r2, [pc, #348]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	f023 0304 	bic.w	r3, r3, #4
 8001f98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d015      	beq.n	8001fce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa2:	f7fe ff5d 	bl	8000e60 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa8:	e00a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7fe ff59 	bl	8000e60 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e0b1      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc0:	4b4b      	ldr	r3, [pc, #300]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0ee      	beq.n	8001faa <HAL_RCC_OscConfig+0x37e>
 8001fcc:	e014      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fce:	f7fe ff47 	bl	8000e60 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd6:	f7fe ff43 	bl	8000e60 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e09b      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fec:	4b40      	ldr	r3, [pc, #256]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1ee      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ff8:	7dfb      	ldrb	r3, [r7, #23]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d105      	bne.n	800200a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffe:	4b3c      	ldr	r3, [pc, #240]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	4a3b      	ldr	r2, [pc, #236]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8002004:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002008:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8087 	beq.w	8002122 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002014:	4b36      	ldr	r3, [pc, #216]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 030c 	and.w	r3, r3, #12
 800201c:	2b08      	cmp	r3, #8
 800201e:	d061      	beq.n	80020e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	2b02      	cmp	r3, #2
 8002026:	d146      	bne.n	80020b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002028:	4b33      	ldr	r3, [pc, #204]	@ (80020f8 <HAL_RCC_OscConfig+0x4cc>)
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202e:	f7fe ff17 	bl	8000e60 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002036:	f7fe ff13 	bl	8000e60 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e06d      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002048:	4b29      	ldr	r3, [pc, #164]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f0      	bne.n	8002036 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800205c:	d108      	bne.n	8002070 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800205e:	4b24      	ldr	r3, [pc, #144]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	4921      	ldr	r1, [pc, #132]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002070:	4b1f      	ldr	r3, [pc, #124]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a19      	ldr	r1, [r3, #32]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002080:	430b      	orrs	r3, r1
 8002082:	491b      	ldr	r1, [pc, #108]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002088:	4b1b      	ldr	r3, [pc, #108]	@ (80020f8 <HAL_RCC_OscConfig+0x4cc>)
 800208a:	2201      	movs	r2, #1
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7fe fee7 	bl	8000e60 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002096:	f7fe fee3 	bl	8000e60 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e03d      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020a8:	4b11      	ldr	r3, [pc, #68]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x46a>
 80020b4:	e035      	b.n	8002122 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b6:	4b10      	ldr	r3, [pc, #64]	@ (80020f8 <HAL_RCC_OscConfig+0x4cc>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7fe fed0 	bl	8000e60 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c4:	f7fe fecc 	bl	8000e60 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e026      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d6:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x498>
 80020e2:	e01e      	b.n	8002122 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d107      	bne.n	80020fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e019      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40007000 	.word	0x40007000
 80020f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020fc:	4b0b      	ldr	r3, [pc, #44]	@ (800212c <HAL_RCC_OscConfig+0x500>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	429a      	cmp	r2, r3
 800210e:	d106      	bne.n	800211e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211a:	429a      	cmp	r2, r3
 800211c:	d001      	beq.n	8002122 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40021000 	.word	0x40021000

08002130 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0d0      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002144:	4b6a      	ldr	r3, [pc, #424]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d910      	bls.n	8002174 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002152:	4b67      	ldr	r3, [pc, #412]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 0207 	bic.w	r2, r3, #7
 800215a:	4965      	ldr	r1, [pc, #404]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002162:	4b63      	ldr	r3, [pc, #396]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d001      	beq.n	8002174 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0b8      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d020      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800218c:	4b59      	ldr	r3, [pc, #356]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4a58      	ldr	r2, [pc, #352]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002196:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a4:	4b53      	ldr	r3, [pc, #332]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4a52      	ldr	r2, [pc, #328]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80021ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b0:	4b50      	ldr	r3, [pc, #320]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	494d      	ldr	r1, [pc, #308]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d040      	beq.n	8002250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	4b47      	ldr	r3, [pc, #284]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d115      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e07f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ee:	4b41      	ldr	r3, [pc, #260]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e073      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fe:	4b3d      	ldr	r3, [pc, #244]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e06b      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800220e:	4b39      	ldr	r3, [pc, #228]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f023 0203 	bic.w	r2, r3, #3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	4936      	ldr	r1, [pc, #216]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002220:	f7fe fe1e 	bl	8000e60 <HAL_GetTick>
 8002224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002226:	e00a      	b.n	800223e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002228:	f7fe fe1a 	bl	8000e60 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e053      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	4b2d      	ldr	r3, [pc, #180]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 020c 	and.w	r2, r3, #12
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	429a      	cmp	r2, r3
 800224e:	d1eb      	bne.n	8002228 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002250:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d210      	bcs.n	8002280 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225e:	4b24      	ldr	r3, [pc, #144]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 0207 	bic.w	r2, r3, #7
 8002266:	4922      	ldr	r1, [pc, #136]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226e:	4b20      	ldr	r3, [pc, #128]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e032      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800228c:	4b19      	ldr	r3, [pc, #100]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4916      	ldr	r1, [pc, #88]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	4313      	orrs	r3, r2
 800229c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d009      	beq.n	80022be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022aa:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	490e      	ldr	r1, [pc, #56]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022be:	f000 f821 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 80022c2:	4602      	mov	r2, r0
 80022c4:	4b0b      	ldr	r3, [pc, #44]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	490a      	ldr	r1, [pc, #40]	@ (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 80022d0:	5ccb      	ldrb	r3, [r1, r3]
 80022d2:	fa22 f303 	lsr.w	r3, r2, r3
 80022d6:	4a09      	ldr	r2, [pc, #36]	@ (80022fc <HAL_RCC_ClockConfig+0x1cc>)
 80022d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022da:	4b09      	ldr	r3, [pc, #36]	@ (8002300 <HAL_RCC_ClockConfig+0x1d0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe fd7c 	bl	8000ddc <HAL_InitTick>

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40022000 	.word	0x40022000
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08003ad0 	.word	0x08003ad0
 80022fc:	20000000 	.word	0x20000000
 8002300:	20000004 	.word	0x20000004

08002304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002304:	b480      	push	{r7}
 8002306:	b087      	sub	sp, #28
 8002308:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	2300      	movs	r3, #0
 8002318:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800231e:	4b1e      	ldr	r3, [pc, #120]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x94>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 030c 	and.w	r3, r3, #12
 800232a:	2b04      	cmp	r3, #4
 800232c:	d002      	beq.n	8002334 <HAL_RCC_GetSysClockFreq+0x30>
 800232e:	2b08      	cmp	r3, #8
 8002330:	d003      	beq.n	800233a <HAL_RCC_GetSysClockFreq+0x36>
 8002332:	e027      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002334:	4b19      	ldr	r3, [pc, #100]	@ (800239c <HAL_RCC_GetSysClockFreq+0x98>)
 8002336:	613b      	str	r3, [r7, #16]
      break;
 8002338:	e027      	b.n	800238a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	0c9b      	lsrs	r3, r3, #18
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	4a17      	ldr	r2, [pc, #92]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002344:	5cd3      	ldrb	r3, [r2, r3]
 8002346:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d010      	beq.n	8002374 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002352:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x94>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	0c5b      	lsrs	r3, r3, #17
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	4a11      	ldr	r2, [pc, #68]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800235e:	5cd3      	ldrb	r3, [r2, r3]
 8002360:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a0d      	ldr	r2, [pc, #52]	@ (800239c <HAL_RCC_GetSysClockFreq+0x98>)
 8002366:	fb03 f202 	mul.w	r2, r3, r2
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	e004      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a0c      	ldr	r2, [pc, #48]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	613b      	str	r3, [r7, #16]
      break;
 8002382:	e002      	b.n	800238a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002384:	4b05      	ldr	r3, [pc, #20]	@ (800239c <HAL_RCC_GetSysClockFreq+0x98>)
 8002386:	613b      	str	r3, [r7, #16]
      break;
 8002388:	bf00      	nop
    }
  }
  return sysclockfreq;
 800238a:	693b      	ldr	r3, [r7, #16]
}
 800238c:	4618      	mov	r0, r3
 800238e:	371c      	adds	r7, #28
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
 800239c:	007a1200 	.word	0x007a1200
 80023a0:	08003ae8 	.word	0x08003ae8
 80023a4:	08003af8 	.word	0x08003af8
 80023a8:	003d0900 	.word	0x003d0900

080023ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b0:	4b02      	ldr	r3, [pc, #8]	@ (80023bc <HAL_RCC_GetHCLKFreq+0x10>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	20000000 	.word	0x20000000

080023c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023c4:	f7ff fff2 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023c8:	4602      	mov	r2, r0
 80023ca:	4b05      	ldr	r3, [pc, #20]	@ (80023e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	0a1b      	lsrs	r3, r3, #8
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	4903      	ldr	r1, [pc, #12]	@ (80023e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023d6:	5ccb      	ldrb	r3, [r1, r3]
 80023d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023dc:	4618      	mov	r0, r3
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000
 80023e4:	08003ae0 	.word	0x08003ae0

080023e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023ec:	f7ff ffde 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023f0:	4602      	mov	r2, r0
 80023f2:	4b05      	ldr	r3, [pc, #20]	@ (8002408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	0adb      	lsrs	r3, r3, #11
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	4903      	ldr	r1, [pc, #12]	@ (800240c <HAL_RCC_GetPCLK2Freq+0x24>)
 80023fe:	5ccb      	ldrb	r3, [r1, r3]
 8002400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002404:	4618      	mov	r0, r3
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40021000 	.word	0x40021000
 800240c:	08003ae0 	.word	0x08003ae0

08002410 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002418:	4b0a      	ldr	r3, [pc, #40]	@ (8002444 <RCC_Delay+0x34>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0a      	ldr	r2, [pc, #40]	@ (8002448 <RCC_Delay+0x38>)
 800241e:	fba2 2303 	umull	r2, r3, r2, r3
 8002422:	0a5b      	lsrs	r3, r3, #9
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	fb02 f303 	mul.w	r3, r2, r3
 800242a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800242c:	bf00      	nop
  }
  while (Delay --);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1e5a      	subs	r2, r3, #1
 8002432:	60fa      	str	r2, [r7, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f9      	bne.n	800242c <RCC_Delay+0x1c>
}
 8002438:	bf00      	nop
 800243a:	bf00      	nop
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr
 8002444:	20000000 	.word	0x20000000
 8002448:	10624dd3 	.word	0x10624dd3

0800244c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	2300      	movs	r3, #0
 800245a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	d07d      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002468:	2300      	movs	r3, #0
 800246a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246c:	4b4f      	ldr	r3, [pc, #316]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10d      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002478:	4b4c      	ldr	r3, [pc, #304]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	4a4b      	ldr	r2, [pc, #300]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800247e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002482:	61d3      	str	r3, [r2, #28]
 8002484:	4b49      	ldr	r3, [pc, #292]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002490:	2301      	movs	r3, #1
 8002492:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002494:	4b46      	ldr	r3, [pc, #280]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249c:	2b00      	cmp	r3, #0
 800249e:	d118      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a0:	4b43      	ldr	r3, [pc, #268]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a42      	ldr	r2, [pc, #264]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ac:	f7fe fcd8 	bl	8000e60 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b2:	e008      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b4:	f7fe fcd4 	bl	8000e60 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	@ 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e06d      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c6:	4b3a      	ldr	r3, [pc, #232]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024d2:	4b36      	ldr	r3, [pc, #216]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d02e      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d027      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024f0:	4b2e      	ldr	r3, [pc, #184]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024fa:	4b2e      	ldr	r3, [pc, #184]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002500:	4b2c      	ldr	r3, [pc, #176]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002506:	4a29      	ldr	r2, [pc, #164]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d014      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7fe fca3 	bl	8000e60 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251c:	e00a      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251e:	f7fe fc9f 	bl	8000e60 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	f241 3288 	movw	r2, #5000	@ 0x1388
 800252c:	4293      	cmp	r3, r2
 800252e:	d901      	bls.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e036      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002534:	4b1d      	ldr	r3, [pc, #116]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0ee      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002540:	4b1a      	ldr	r3, [pc, #104]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	4917      	ldr	r1, [pc, #92]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800254e:	4313      	orrs	r3, r2
 8002550:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002552:	7dfb      	ldrb	r3, [r7, #23]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d105      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002558:	4b14      	ldr	r3, [pc, #80]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	4a13      	ldr	r2, [pc, #76]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002562:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002570:	4b0e      	ldr	r3, [pc, #56]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	490b      	ldr	r1, [pc, #44]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800257e:	4313      	orrs	r3, r2
 8002580:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800258e:	4b07      	ldr	r3, [pc, #28]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	4904      	ldr	r1, [pc, #16]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40007000 	.word	0x40007000
 80025b4:	42420440 	.word	0x42420440

080025b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	2300      	movs	r3, #0
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	2300      	movs	r3, #0
 80025ca:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	2300      	movs	r3, #0
 80025d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b10      	cmp	r3, #16
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b10      	cmp	r3, #16
 80025de:	f200 808a 	bhi.w	80026f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d045      	beq.n	8002674 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d075      	beq.n	80026da <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80025ee:	e082      	b.n	80026f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80025f0:	4b46      	ldr	r3, [pc, #280]	@ (800270c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80025f6:	4b45      	ldr	r3, [pc, #276]	@ (800270c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d07b      	beq.n	80026fa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	0c9b      	lsrs	r3, r3, #18
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	4a41      	ldr	r2, [pc, #260]	@ (8002710 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800260c:	5cd3      	ldrb	r3, [r2, r3]
 800260e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d015      	beq.n	8002646 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800261a:	4b3c      	ldr	r3, [pc, #240]	@ (800270c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	0c5b      	lsrs	r3, r3, #17
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	4a3b      	ldr	r2, [pc, #236]	@ (8002714 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002626:	5cd3      	ldrb	r3, [r2, r3]
 8002628:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00d      	beq.n	8002650 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002634:	4a38      	ldr	r2, [pc, #224]	@ (8002718 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	fbb2 f2f3 	udiv	r2, r2, r3
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	fb02 f303 	mul.w	r3, r2, r3
 8002642:	61fb      	str	r3, [r7, #28]
 8002644:	e004      	b.n	8002650 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4a34      	ldr	r2, [pc, #208]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002650:	4b2e      	ldr	r3, [pc, #184]	@ (800270c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002658:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800265c:	d102      	bne.n	8002664 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	61bb      	str	r3, [r7, #24]
      break;
 8002662:	e04a      	b.n	80026fa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4a2d      	ldr	r2, [pc, #180]	@ (8002720 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	085b      	lsrs	r3, r3, #1
 8002670:	61bb      	str	r3, [r7, #24]
      break;
 8002672:	e042      	b.n	80026fa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002674:	4b25      	ldr	r3, [pc, #148]	@ (800270c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002680:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002684:	d108      	bne.n	8002698 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002690:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	e01f      	b.n	80026d8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800269e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026a2:	d109      	bne.n	80026b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80026a4:	4b19      	ldr	r3, [pc, #100]	@ (800270c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80026b0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80026b4:	61bb      	str	r3, [r7, #24]
 80026b6:	e00f      	b.n	80026d8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026c2:	d11c      	bne.n	80026fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80026c4:	4b11      	ldr	r3, [pc, #68]	@ (800270c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d016      	beq.n	80026fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80026d0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80026d4:	61bb      	str	r3, [r7, #24]
      break;
 80026d6:	e012      	b.n	80026fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80026d8:	e011      	b.n	80026fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80026da:	f7ff fe85 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 80026de:	4602      	mov	r2, r0
 80026e0:	4b0a      	ldr	r3, [pc, #40]	@ (800270c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	0b9b      	lsrs	r3, r3, #14
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	3301      	adds	r3, #1
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f2:	61bb      	str	r3, [r7, #24]
      break;
 80026f4:	e004      	b.n	8002700 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80026f6:	bf00      	nop
 80026f8:	e002      	b.n	8002700 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80026fa:	bf00      	nop
 80026fc:	e000      	b.n	8002700 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80026fe:	bf00      	nop
    }
  }
  return (frequency);
 8002700:	69bb      	ldr	r3, [r7, #24]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3720      	adds	r7, #32
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000
 8002710:	08003afc 	.word	0x08003afc
 8002714:	08003b0c 	.word	0x08003b0c
 8002718:	007a1200 	.word	0x007a1200
 800271c:	003d0900 	.word	0x003d0900
 8002720:	aaaaaaab 	.word	0xaaaaaaab

08002724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e042      	b.n	80027bc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe f9ec 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2224      	movs	r2, #36	@ 0x24
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002766:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f971 	bl	8002a50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800277c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800278c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800279c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08a      	sub	sp, #40	@ 0x28
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	4613      	mov	r3, r2
 80027d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b20      	cmp	r3, #32
 80027e2:	d175      	bne.n	80028d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_UART_Transmit+0x2c>
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e06e      	b.n	80028d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2221      	movs	r2, #33	@ 0x21
 80027fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002802:	f7fe fb2d 	bl	8000e60 <HAL_GetTick>
 8002806:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	88fa      	ldrh	r2, [r7, #6]
 800280c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	88fa      	ldrh	r2, [r7, #6]
 8002812:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800281c:	d108      	bne.n	8002830 <HAL_UART_Transmit+0x6c>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d104      	bne.n	8002830 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	e003      	b.n	8002838 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002834:	2300      	movs	r3, #0
 8002836:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002838:	e02e      	b.n	8002898 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2200      	movs	r2, #0
 8002842:	2180      	movs	r1, #128	@ 0x80
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f848 	bl	80028da <UART_WaitOnFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e03a      	b.n	80028d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10b      	bne.n	800287a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002870:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	3302      	adds	r3, #2
 8002876:	61bb      	str	r3, [r7, #24]
 8002878:	e007      	b.n	800288a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	3301      	adds	r3, #1
 8002888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800288e:	b29b      	uxth	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1cb      	bne.n	800283a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2200      	movs	r2, #0
 80028aa:	2140      	movs	r1, #64	@ 0x40
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 f814 	bl	80028da <UART_WaitOnFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e006      	b.n	80028d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e000      	b.n	80028d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80028d0:	2302      	movs	r3, #2
  }
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3720      	adds	r7, #32
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	4613      	mov	r3, r2
 80028e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ea:	e03b      	b.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f2:	d037      	beq.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f4:	f7fe fab4 	bl	8000e60 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	6a3a      	ldr	r2, [r7, #32]
 8002900:	429a      	cmp	r2, r3
 8002902:	d302      	bcc.n	800290a <UART_WaitOnFlagUntilTimeout+0x30>
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e03a      	b.n	8002984 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d023      	beq.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b80      	cmp	r3, #128	@ 0x80
 8002920:	d020      	beq.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b40      	cmp	r3, #64	@ 0x40
 8002926:	d01d      	beq.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b08      	cmp	r3, #8
 8002934:	d116      	bne.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f81d 	bl	800298c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2208      	movs	r2, #8
 8002956:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e00f      	b.n	8002984 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	4013      	ands	r3, r2
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	429a      	cmp	r2, r3
 8002972:	bf0c      	ite	eq
 8002974:	2301      	moveq	r3, #1
 8002976:	2300      	movne	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	429a      	cmp	r2, r3
 8002980:	d0b4      	beq.n	80028ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800298c:	b480      	push	{r7}
 800298e:	b095      	sub	sp, #84	@ 0x54
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	330c      	adds	r3, #12
 800299a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800299e:	e853 3f00 	ldrex	r3, [r3]
 80029a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80029a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	330c      	adds	r3, #12
 80029b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80029b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80029ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029bc:	e841 2300 	strex	r3, r2, [r1]
 80029c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80029c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1e5      	bne.n	8002994 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3314      	adds	r3, #20
 80029ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	e853 3f00 	ldrex	r3, [r3]
 80029d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f023 0301 	bic.w	r3, r3, #1
 80029de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3314      	adds	r3, #20
 80029e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029f0:	e841 2300 	strex	r3, r2, [r1]
 80029f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1e5      	bne.n	80029c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d119      	bne.n	8002a38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	330c      	adds	r3, #12
 8002a0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	e853 3f00 	ldrex	r3, [r3]
 8002a12:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f023 0310 	bic.w	r3, r3, #16
 8002a1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	330c      	adds	r3, #12
 8002a22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a24:	61ba      	str	r2, [r7, #24]
 8002a26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a28:	6979      	ldr	r1, [r7, #20]
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	e841 2300 	strex	r3, r2, [r1]
 8002a30:	613b      	str	r3, [r7, #16]
   return(result);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1e5      	bne.n	8002a04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a46:	bf00      	nop
 8002a48:	3754      	adds	r7, #84	@ 0x54
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002a8a:	f023 030c 	bic.w	r3, r3, #12
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	68b9      	ldr	r1, [r7, #8]
 8002a94:	430b      	orrs	r3, r1
 8002a96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a2c      	ldr	r2, [pc, #176]	@ (8002b64 <UART_SetConfig+0x114>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d103      	bne.n	8002ac0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ab8:	f7ff fc96 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	e002      	b.n	8002ac6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ac0:	f7ff fc7e 	bl	80023c0 <HAL_RCC_GetPCLK1Freq>
 8002ac4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	009a      	lsls	r2, r3, #2
 8002ad0:	441a      	add	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002adc:	4a22      	ldr	r2, [pc, #136]	@ (8002b68 <UART_SetConfig+0x118>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	0119      	lsls	r1, r3, #4
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	009a      	lsls	r2, r3, #2
 8002af0:	441a      	add	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002afc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b68 <UART_SetConfig+0x118>)
 8002afe:	fba3 0302 	umull	r0, r3, r3, r2
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	2064      	movs	r0, #100	@ 0x64
 8002b06:	fb00 f303 	mul.w	r3, r0, r3
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	3332      	adds	r3, #50	@ 0x32
 8002b10:	4a15      	ldr	r2, [pc, #84]	@ (8002b68 <UART_SetConfig+0x118>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b1c:	4419      	add	r1, r3
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	009a      	lsls	r2, r3, #2
 8002b28:	441a      	add	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b34:	4b0c      	ldr	r3, [pc, #48]	@ (8002b68 <UART_SetConfig+0x118>)
 8002b36:	fba3 0302 	umull	r0, r3, r3, r2
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	2064      	movs	r0, #100	@ 0x64
 8002b3e:	fb00 f303 	mul.w	r3, r0, r3
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	3332      	adds	r3, #50	@ 0x32
 8002b48:	4a07      	ldr	r2, [pc, #28]	@ (8002b68 <UART_SetConfig+0x118>)
 8002b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	f003 020f 	and.w	r2, r3, #15
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	440a      	add	r2, r1
 8002b5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b5c:	bf00      	nop
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40013800 	.word	0x40013800
 8002b68:	51eb851f 	.word	0x51eb851f

08002b6c <std>:
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	b510      	push	{r4, lr}
 8002b70:	4604      	mov	r4, r0
 8002b72:	e9c0 3300 	strd	r3, r3, [r0]
 8002b76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b7a:	6083      	str	r3, [r0, #8]
 8002b7c:	8181      	strh	r1, [r0, #12]
 8002b7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002b80:	81c2      	strh	r2, [r0, #14]
 8002b82:	6183      	str	r3, [r0, #24]
 8002b84:	4619      	mov	r1, r3
 8002b86:	2208      	movs	r2, #8
 8002b88:	305c      	adds	r0, #92	@ 0x5c
 8002b8a:	f000 f9f9 	bl	8002f80 <memset>
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc4 <std+0x58>)
 8002b90:	6224      	str	r4, [r4, #32]
 8002b92:	6263      	str	r3, [r4, #36]	@ 0x24
 8002b94:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc8 <std+0x5c>)
 8002b96:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002b98:	4b0c      	ldr	r3, [pc, #48]	@ (8002bcc <std+0x60>)
 8002b9a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd0 <std+0x64>)
 8002b9e:	6323      	str	r3, [r4, #48]	@ 0x30
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd4 <std+0x68>)
 8002ba2:	429c      	cmp	r4, r3
 8002ba4:	d006      	beq.n	8002bb4 <std+0x48>
 8002ba6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002baa:	4294      	cmp	r4, r2
 8002bac:	d002      	beq.n	8002bb4 <std+0x48>
 8002bae:	33d0      	adds	r3, #208	@ 0xd0
 8002bb0:	429c      	cmp	r4, r3
 8002bb2:	d105      	bne.n	8002bc0 <std+0x54>
 8002bb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bbc:	f000 ba58 	b.w	8003070 <__retarget_lock_init_recursive>
 8002bc0:	bd10      	pop	{r4, pc}
 8002bc2:	bf00      	nop
 8002bc4:	08002dd1 	.word	0x08002dd1
 8002bc8:	08002df3 	.word	0x08002df3
 8002bcc:	08002e2b 	.word	0x08002e2b
 8002bd0:	08002e4f 	.word	0x08002e4f
 8002bd4:	20000108 	.word	0x20000108

08002bd8 <stdio_exit_handler>:
 8002bd8:	4a02      	ldr	r2, [pc, #8]	@ (8002be4 <stdio_exit_handler+0xc>)
 8002bda:	4903      	ldr	r1, [pc, #12]	@ (8002be8 <stdio_exit_handler+0x10>)
 8002bdc:	4803      	ldr	r0, [pc, #12]	@ (8002bec <stdio_exit_handler+0x14>)
 8002bde:	f000 b869 	b.w	8002cb4 <_fwalk_sglue>
 8002be2:	bf00      	nop
 8002be4:	2000000c 	.word	0x2000000c
 8002be8:	08003905 	.word	0x08003905
 8002bec:	2000001c 	.word	0x2000001c

08002bf0 <cleanup_stdio>:
 8002bf0:	6841      	ldr	r1, [r0, #4]
 8002bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8002c24 <cleanup_stdio+0x34>)
 8002bf4:	b510      	push	{r4, lr}
 8002bf6:	4299      	cmp	r1, r3
 8002bf8:	4604      	mov	r4, r0
 8002bfa:	d001      	beq.n	8002c00 <cleanup_stdio+0x10>
 8002bfc:	f000 fe82 	bl	8003904 <_fflush_r>
 8002c00:	68a1      	ldr	r1, [r4, #8]
 8002c02:	4b09      	ldr	r3, [pc, #36]	@ (8002c28 <cleanup_stdio+0x38>)
 8002c04:	4299      	cmp	r1, r3
 8002c06:	d002      	beq.n	8002c0e <cleanup_stdio+0x1e>
 8002c08:	4620      	mov	r0, r4
 8002c0a:	f000 fe7b 	bl	8003904 <_fflush_r>
 8002c0e:	68e1      	ldr	r1, [r4, #12]
 8002c10:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <cleanup_stdio+0x3c>)
 8002c12:	4299      	cmp	r1, r3
 8002c14:	d004      	beq.n	8002c20 <cleanup_stdio+0x30>
 8002c16:	4620      	mov	r0, r4
 8002c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c1c:	f000 be72 	b.w	8003904 <_fflush_r>
 8002c20:	bd10      	pop	{r4, pc}
 8002c22:	bf00      	nop
 8002c24:	20000108 	.word	0x20000108
 8002c28:	20000170 	.word	0x20000170
 8002c2c:	200001d8 	.word	0x200001d8

08002c30 <global_stdio_init.part.0>:
 8002c30:	b510      	push	{r4, lr}
 8002c32:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <global_stdio_init.part.0+0x30>)
 8002c34:	4c0b      	ldr	r4, [pc, #44]	@ (8002c64 <global_stdio_init.part.0+0x34>)
 8002c36:	4a0c      	ldr	r2, [pc, #48]	@ (8002c68 <global_stdio_init.part.0+0x38>)
 8002c38:	4620      	mov	r0, r4
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	2104      	movs	r1, #4
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f7ff ff94 	bl	8002b6c <std>
 8002c44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002c48:	2201      	movs	r2, #1
 8002c4a:	2109      	movs	r1, #9
 8002c4c:	f7ff ff8e 	bl	8002b6c <std>
 8002c50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002c54:	2202      	movs	r2, #2
 8002c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c5a:	2112      	movs	r1, #18
 8002c5c:	f7ff bf86 	b.w	8002b6c <std>
 8002c60:	20000240 	.word	0x20000240
 8002c64:	20000108 	.word	0x20000108
 8002c68:	08002bd9 	.word	0x08002bd9

08002c6c <__sfp_lock_acquire>:
 8002c6c:	4801      	ldr	r0, [pc, #4]	@ (8002c74 <__sfp_lock_acquire+0x8>)
 8002c6e:	f000 ba00 	b.w	8003072 <__retarget_lock_acquire_recursive>
 8002c72:	bf00      	nop
 8002c74:	20000249 	.word	0x20000249

08002c78 <__sfp_lock_release>:
 8002c78:	4801      	ldr	r0, [pc, #4]	@ (8002c80 <__sfp_lock_release+0x8>)
 8002c7a:	f000 b9fb 	b.w	8003074 <__retarget_lock_release_recursive>
 8002c7e:	bf00      	nop
 8002c80:	20000249 	.word	0x20000249

08002c84 <__sinit>:
 8002c84:	b510      	push	{r4, lr}
 8002c86:	4604      	mov	r4, r0
 8002c88:	f7ff fff0 	bl	8002c6c <__sfp_lock_acquire>
 8002c8c:	6a23      	ldr	r3, [r4, #32]
 8002c8e:	b11b      	cbz	r3, 8002c98 <__sinit+0x14>
 8002c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c94:	f7ff bff0 	b.w	8002c78 <__sfp_lock_release>
 8002c98:	4b04      	ldr	r3, [pc, #16]	@ (8002cac <__sinit+0x28>)
 8002c9a:	6223      	str	r3, [r4, #32]
 8002c9c:	4b04      	ldr	r3, [pc, #16]	@ (8002cb0 <__sinit+0x2c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f5      	bne.n	8002c90 <__sinit+0xc>
 8002ca4:	f7ff ffc4 	bl	8002c30 <global_stdio_init.part.0>
 8002ca8:	e7f2      	b.n	8002c90 <__sinit+0xc>
 8002caa:	bf00      	nop
 8002cac:	08002bf1 	.word	0x08002bf1
 8002cb0:	20000240 	.word	0x20000240

08002cb4 <_fwalk_sglue>:
 8002cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cb8:	4607      	mov	r7, r0
 8002cba:	4688      	mov	r8, r1
 8002cbc:	4614      	mov	r4, r2
 8002cbe:	2600      	movs	r6, #0
 8002cc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002cc4:	f1b9 0901 	subs.w	r9, r9, #1
 8002cc8:	d505      	bpl.n	8002cd6 <_fwalk_sglue+0x22>
 8002cca:	6824      	ldr	r4, [r4, #0]
 8002ccc:	2c00      	cmp	r4, #0
 8002cce:	d1f7      	bne.n	8002cc0 <_fwalk_sglue+0xc>
 8002cd0:	4630      	mov	r0, r6
 8002cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cd6:	89ab      	ldrh	r3, [r5, #12]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d907      	bls.n	8002cec <_fwalk_sglue+0x38>
 8002cdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	d003      	beq.n	8002cec <_fwalk_sglue+0x38>
 8002ce4:	4629      	mov	r1, r5
 8002ce6:	4638      	mov	r0, r7
 8002ce8:	47c0      	blx	r8
 8002cea:	4306      	orrs	r6, r0
 8002cec:	3568      	adds	r5, #104	@ 0x68
 8002cee:	e7e9      	b.n	8002cc4 <_fwalk_sglue+0x10>

08002cf0 <iprintf>:
 8002cf0:	b40f      	push	{r0, r1, r2, r3}
 8002cf2:	b507      	push	{r0, r1, r2, lr}
 8002cf4:	4906      	ldr	r1, [pc, #24]	@ (8002d10 <iprintf+0x20>)
 8002cf6:	ab04      	add	r3, sp, #16
 8002cf8:	6808      	ldr	r0, [r1, #0]
 8002cfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cfe:	6881      	ldr	r1, [r0, #8]
 8002d00:	9301      	str	r3, [sp, #4]
 8002d02:	f000 fad7 	bl	80032b4 <_vfiprintf_r>
 8002d06:	b003      	add	sp, #12
 8002d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d0c:	b004      	add	sp, #16
 8002d0e:	4770      	bx	lr
 8002d10:	20000018 	.word	0x20000018

08002d14 <_puts_r>:
 8002d14:	6a03      	ldr	r3, [r0, #32]
 8002d16:	b570      	push	{r4, r5, r6, lr}
 8002d18:	4605      	mov	r5, r0
 8002d1a:	460e      	mov	r6, r1
 8002d1c:	6884      	ldr	r4, [r0, #8]
 8002d1e:	b90b      	cbnz	r3, 8002d24 <_puts_r+0x10>
 8002d20:	f7ff ffb0 	bl	8002c84 <__sinit>
 8002d24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d26:	07db      	lsls	r3, r3, #31
 8002d28:	d405      	bmi.n	8002d36 <_puts_r+0x22>
 8002d2a:	89a3      	ldrh	r3, [r4, #12]
 8002d2c:	0598      	lsls	r0, r3, #22
 8002d2e:	d402      	bmi.n	8002d36 <_puts_r+0x22>
 8002d30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d32:	f000 f99e 	bl	8003072 <__retarget_lock_acquire_recursive>
 8002d36:	89a3      	ldrh	r3, [r4, #12]
 8002d38:	0719      	lsls	r1, r3, #28
 8002d3a:	d502      	bpl.n	8002d42 <_puts_r+0x2e>
 8002d3c:	6923      	ldr	r3, [r4, #16]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d135      	bne.n	8002dae <_puts_r+0x9a>
 8002d42:	4621      	mov	r1, r4
 8002d44:	4628      	mov	r0, r5
 8002d46:	f000 f8c5 	bl	8002ed4 <__swsetup_r>
 8002d4a:	b380      	cbz	r0, 8002dae <_puts_r+0x9a>
 8002d4c:	f04f 35ff 	mov.w	r5, #4294967295
 8002d50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d52:	07da      	lsls	r2, r3, #31
 8002d54:	d405      	bmi.n	8002d62 <_puts_r+0x4e>
 8002d56:	89a3      	ldrh	r3, [r4, #12]
 8002d58:	059b      	lsls	r3, r3, #22
 8002d5a:	d402      	bmi.n	8002d62 <_puts_r+0x4e>
 8002d5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d5e:	f000 f989 	bl	8003074 <__retarget_lock_release_recursive>
 8002d62:	4628      	mov	r0, r5
 8002d64:	bd70      	pop	{r4, r5, r6, pc}
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	da04      	bge.n	8002d74 <_puts_r+0x60>
 8002d6a:	69a2      	ldr	r2, [r4, #24]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	dc17      	bgt.n	8002da0 <_puts_r+0x8c>
 8002d70:	290a      	cmp	r1, #10
 8002d72:	d015      	beq.n	8002da0 <_puts_r+0x8c>
 8002d74:	6823      	ldr	r3, [r4, #0]
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	6022      	str	r2, [r4, #0]
 8002d7a:	7019      	strb	r1, [r3, #0]
 8002d7c:	68a3      	ldr	r3, [r4, #8]
 8002d7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d82:	3b01      	subs	r3, #1
 8002d84:	60a3      	str	r3, [r4, #8]
 8002d86:	2900      	cmp	r1, #0
 8002d88:	d1ed      	bne.n	8002d66 <_puts_r+0x52>
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	da11      	bge.n	8002db2 <_puts_r+0x9e>
 8002d8e:	4622      	mov	r2, r4
 8002d90:	210a      	movs	r1, #10
 8002d92:	4628      	mov	r0, r5
 8002d94:	f000 f85f 	bl	8002e56 <__swbuf_r>
 8002d98:	3001      	adds	r0, #1
 8002d9a:	d0d7      	beq.n	8002d4c <_puts_r+0x38>
 8002d9c:	250a      	movs	r5, #10
 8002d9e:	e7d7      	b.n	8002d50 <_puts_r+0x3c>
 8002da0:	4622      	mov	r2, r4
 8002da2:	4628      	mov	r0, r5
 8002da4:	f000 f857 	bl	8002e56 <__swbuf_r>
 8002da8:	3001      	adds	r0, #1
 8002daa:	d1e7      	bne.n	8002d7c <_puts_r+0x68>
 8002dac:	e7ce      	b.n	8002d4c <_puts_r+0x38>
 8002dae:	3e01      	subs	r6, #1
 8002db0:	e7e4      	b.n	8002d7c <_puts_r+0x68>
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	6022      	str	r2, [r4, #0]
 8002db8:	220a      	movs	r2, #10
 8002dba:	701a      	strb	r2, [r3, #0]
 8002dbc:	e7ee      	b.n	8002d9c <_puts_r+0x88>
	...

08002dc0 <puts>:
 8002dc0:	4b02      	ldr	r3, [pc, #8]	@ (8002dcc <puts+0xc>)
 8002dc2:	4601      	mov	r1, r0
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	f7ff bfa5 	b.w	8002d14 <_puts_r>
 8002dca:	bf00      	nop
 8002dcc:	20000018 	.word	0x20000018

08002dd0 <__sread>:
 8002dd0:	b510      	push	{r4, lr}
 8002dd2:	460c      	mov	r4, r1
 8002dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dd8:	f000 f8fc 	bl	8002fd4 <_read_r>
 8002ddc:	2800      	cmp	r0, #0
 8002dde:	bfab      	itete	ge
 8002de0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002de2:	89a3      	ldrhlt	r3, [r4, #12]
 8002de4:	181b      	addge	r3, r3, r0
 8002de6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002dea:	bfac      	ite	ge
 8002dec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002dee:	81a3      	strhlt	r3, [r4, #12]
 8002df0:	bd10      	pop	{r4, pc}

08002df2 <__swrite>:
 8002df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002df6:	461f      	mov	r7, r3
 8002df8:	898b      	ldrh	r3, [r1, #12]
 8002dfa:	4605      	mov	r5, r0
 8002dfc:	05db      	lsls	r3, r3, #23
 8002dfe:	460c      	mov	r4, r1
 8002e00:	4616      	mov	r6, r2
 8002e02:	d505      	bpl.n	8002e10 <__swrite+0x1e>
 8002e04:	2302      	movs	r3, #2
 8002e06:	2200      	movs	r2, #0
 8002e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e0c:	f000 f8d0 	bl	8002fb0 <_lseek_r>
 8002e10:	89a3      	ldrh	r3, [r4, #12]
 8002e12:	4632      	mov	r2, r6
 8002e14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e18:	81a3      	strh	r3, [r4, #12]
 8002e1a:	4628      	mov	r0, r5
 8002e1c:	463b      	mov	r3, r7
 8002e1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e26:	f000 b8e7 	b.w	8002ff8 <_write_r>

08002e2a <__sseek>:
 8002e2a:	b510      	push	{r4, lr}
 8002e2c:	460c      	mov	r4, r1
 8002e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e32:	f000 f8bd 	bl	8002fb0 <_lseek_r>
 8002e36:	1c43      	adds	r3, r0, #1
 8002e38:	89a3      	ldrh	r3, [r4, #12]
 8002e3a:	bf15      	itete	ne
 8002e3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002e3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002e42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002e46:	81a3      	strheq	r3, [r4, #12]
 8002e48:	bf18      	it	ne
 8002e4a:	81a3      	strhne	r3, [r4, #12]
 8002e4c:	bd10      	pop	{r4, pc}

08002e4e <__sclose>:
 8002e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e52:	f000 b89d 	b.w	8002f90 <_close_r>

08002e56 <__swbuf_r>:
 8002e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e58:	460e      	mov	r6, r1
 8002e5a:	4614      	mov	r4, r2
 8002e5c:	4605      	mov	r5, r0
 8002e5e:	b118      	cbz	r0, 8002e68 <__swbuf_r+0x12>
 8002e60:	6a03      	ldr	r3, [r0, #32]
 8002e62:	b90b      	cbnz	r3, 8002e68 <__swbuf_r+0x12>
 8002e64:	f7ff ff0e 	bl	8002c84 <__sinit>
 8002e68:	69a3      	ldr	r3, [r4, #24]
 8002e6a:	60a3      	str	r3, [r4, #8]
 8002e6c:	89a3      	ldrh	r3, [r4, #12]
 8002e6e:	071a      	lsls	r2, r3, #28
 8002e70:	d501      	bpl.n	8002e76 <__swbuf_r+0x20>
 8002e72:	6923      	ldr	r3, [r4, #16]
 8002e74:	b943      	cbnz	r3, 8002e88 <__swbuf_r+0x32>
 8002e76:	4621      	mov	r1, r4
 8002e78:	4628      	mov	r0, r5
 8002e7a:	f000 f82b 	bl	8002ed4 <__swsetup_r>
 8002e7e:	b118      	cbz	r0, 8002e88 <__swbuf_r+0x32>
 8002e80:	f04f 37ff 	mov.w	r7, #4294967295
 8002e84:	4638      	mov	r0, r7
 8002e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e88:	6823      	ldr	r3, [r4, #0]
 8002e8a:	6922      	ldr	r2, [r4, #16]
 8002e8c:	b2f6      	uxtb	r6, r6
 8002e8e:	1a98      	subs	r0, r3, r2
 8002e90:	6963      	ldr	r3, [r4, #20]
 8002e92:	4637      	mov	r7, r6
 8002e94:	4283      	cmp	r3, r0
 8002e96:	dc05      	bgt.n	8002ea4 <__swbuf_r+0x4e>
 8002e98:	4621      	mov	r1, r4
 8002e9a:	4628      	mov	r0, r5
 8002e9c:	f000 fd32 	bl	8003904 <_fflush_r>
 8002ea0:	2800      	cmp	r0, #0
 8002ea2:	d1ed      	bne.n	8002e80 <__swbuf_r+0x2a>
 8002ea4:	68a3      	ldr	r3, [r4, #8]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	60a3      	str	r3, [r4, #8]
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	6022      	str	r2, [r4, #0]
 8002eb0:	701e      	strb	r6, [r3, #0]
 8002eb2:	6962      	ldr	r2, [r4, #20]
 8002eb4:	1c43      	adds	r3, r0, #1
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d004      	beq.n	8002ec4 <__swbuf_r+0x6e>
 8002eba:	89a3      	ldrh	r3, [r4, #12]
 8002ebc:	07db      	lsls	r3, r3, #31
 8002ebe:	d5e1      	bpl.n	8002e84 <__swbuf_r+0x2e>
 8002ec0:	2e0a      	cmp	r6, #10
 8002ec2:	d1df      	bne.n	8002e84 <__swbuf_r+0x2e>
 8002ec4:	4621      	mov	r1, r4
 8002ec6:	4628      	mov	r0, r5
 8002ec8:	f000 fd1c 	bl	8003904 <_fflush_r>
 8002ecc:	2800      	cmp	r0, #0
 8002ece:	d0d9      	beq.n	8002e84 <__swbuf_r+0x2e>
 8002ed0:	e7d6      	b.n	8002e80 <__swbuf_r+0x2a>
	...

08002ed4 <__swsetup_r>:
 8002ed4:	b538      	push	{r3, r4, r5, lr}
 8002ed6:	4b29      	ldr	r3, [pc, #164]	@ (8002f7c <__swsetup_r+0xa8>)
 8002ed8:	4605      	mov	r5, r0
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	460c      	mov	r4, r1
 8002ede:	b118      	cbz	r0, 8002ee8 <__swsetup_r+0x14>
 8002ee0:	6a03      	ldr	r3, [r0, #32]
 8002ee2:	b90b      	cbnz	r3, 8002ee8 <__swsetup_r+0x14>
 8002ee4:	f7ff fece 	bl	8002c84 <__sinit>
 8002ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002eec:	0719      	lsls	r1, r3, #28
 8002eee:	d422      	bmi.n	8002f36 <__swsetup_r+0x62>
 8002ef0:	06da      	lsls	r2, r3, #27
 8002ef2:	d407      	bmi.n	8002f04 <__swsetup_r+0x30>
 8002ef4:	2209      	movs	r2, #9
 8002ef6:	602a      	str	r2, [r5, #0]
 8002ef8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002efc:	f04f 30ff 	mov.w	r0, #4294967295
 8002f00:	81a3      	strh	r3, [r4, #12]
 8002f02:	e033      	b.n	8002f6c <__swsetup_r+0x98>
 8002f04:	0758      	lsls	r0, r3, #29
 8002f06:	d512      	bpl.n	8002f2e <__swsetup_r+0x5a>
 8002f08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f0a:	b141      	cbz	r1, 8002f1e <__swsetup_r+0x4a>
 8002f0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002f10:	4299      	cmp	r1, r3
 8002f12:	d002      	beq.n	8002f1a <__swsetup_r+0x46>
 8002f14:	4628      	mov	r0, r5
 8002f16:	f000 f8af 	bl	8003078 <_free_r>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f1e:	89a3      	ldrh	r3, [r4, #12]
 8002f20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002f24:	81a3      	strh	r3, [r4, #12]
 8002f26:	2300      	movs	r3, #0
 8002f28:	6063      	str	r3, [r4, #4]
 8002f2a:	6923      	ldr	r3, [r4, #16]
 8002f2c:	6023      	str	r3, [r4, #0]
 8002f2e:	89a3      	ldrh	r3, [r4, #12]
 8002f30:	f043 0308 	orr.w	r3, r3, #8
 8002f34:	81a3      	strh	r3, [r4, #12]
 8002f36:	6923      	ldr	r3, [r4, #16]
 8002f38:	b94b      	cbnz	r3, 8002f4e <__swsetup_r+0x7a>
 8002f3a:	89a3      	ldrh	r3, [r4, #12]
 8002f3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f44:	d003      	beq.n	8002f4e <__swsetup_r+0x7a>
 8002f46:	4621      	mov	r1, r4
 8002f48:	4628      	mov	r0, r5
 8002f4a:	f000 fd28 	bl	800399e <__smakebuf_r>
 8002f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f52:	f013 0201 	ands.w	r2, r3, #1
 8002f56:	d00a      	beq.n	8002f6e <__swsetup_r+0x9a>
 8002f58:	2200      	movs	r2, #0
 8002f5a:	60a2      	str	r2, [r4, #8]
 8002f5c:	6962      	ldr	r2, [r4, #20]
 8002f5e:	4252      	negs	r2, r2
 8002f60:	61a2      	str	r2, [r4, #24]
 8002f62:	6922      	ldr	r2, [r4, #16]
 8002f64:	b942      	cbnz	r2, 8002f78 <__swsetup_r+0xa4>
 8002f66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002f6a:	d1c5      	bne.n	8002ef8 <__swsetup_r+0x24>
 8002f6c:	bd38      	pop	{r3, r4, r5, pc}
 8002f6e:	0799      	lsls	r1, r3, #30
 8002f70:	bf58      	it	pl
 8002f72:	6962      	ldrpl	r2, [r4, #20]
 8002f74:	60a2      	str	r2, [r4, #8]
 8002f76:	e7f4      	b.n	8002f62 <__swsetup_r+0x8e>
 8002f78:	2000      	movs	r0, #0
 8002f7a:	e7f7      	b.n	8002f6c <__swsetup_r+0x98>
 8002f7c:	20000018 	.word	0x20000018

08002f80 <memset>:
 8002f80:	4603      	mov	r3, r0
 8002f82:	4402      	add	r2, r0
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d100      	bne.n	8002f8a <memset+0xa>
 8002f88:	4770      	bx	lr
 8002f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f8e:	e7f9      	b.n	8002f84 <memset+0x4>

08002f90 <_close_r>:
 8002f90:	b538      	push	{r3, r4, r5, lr}
 8002f92:	2300      	movs	r3, #0
 8002f94:	4d05      	ldr	r5, [pc, #20]	@ (8002fac <_close_r+0x1c>)
 8002f96:	4604      	mov	r4, r0
 8002f98:	4608      	mov	r0, r1
 8002f9a:	602b      	str	r3, [r5, #0]
 8002f9c:	f7fd fe75 	bl	8000c8a <_close>
 8002fa0:	1c43      	adds	r3, r0, #1
 8002fa2:	d102      	bne.n	8002faa <_close_r+0x1a>
 8002fa4:	682b      	ldr	r3, [r5, #0]
 8002fa6:	b103      	cbz	r3, 8002faa <_close_r+0x1a>
 8002fa8:	6023      	str	r3, [r4, #0]
 8002faa:	bd38      	pop	{r3, r4, r5, pc}
 8002fac:	20000244 	.word	0x20000244

08002fb0 <_lseek_r>:
 8002fb0:	b538      	push	{r3, r4, r5, lr}
 8002fb2:	4604      	mov	r4, r0
 8002fb4:	4608      	mov	r0, r1
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	2200      	movs	r2, #0
 8002fba:	4d05      	ldr	r5, [pc, #20]	@ (8002fd0 <_lseek_r+0x20>)
 8002fbc:	602a      	str	r2, [r5, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f7fd fe87 	bl	8000cd2 <_lseek>
 8002fc4:	1c43      	adds	r3, r0, #1
 8002fc6:	d102      	bne.n	8002fce <_lseek_r+0x1e>
 8002fc8:	682b      	ldr	r3, [r5, #0]
 8002fca:	b103      	cbz	r3, 8002fce <_lseek_r+0x1e>
 8002fcc:	6023      	str	r3, [r4, #0]
 8002fce:	bd38      	pop	{r3, r4, r5, pc}
 8002fd0:	20000244 	.word	0x20000244

08002fd4 <_read_r>:
 8002fd4:	b538      	push	{r3, r4, r5, lr}
 8002fd6:	4604      	mov	r4, r0
 8002fd8:	4608      	mov	r0, r1
 8002fda:	4611      	mov	r1, r2
 8002fdc:	2200      	movs	r2, #0
 8002fde:	4d05      	ldr	r5, [pc, #20]	@ (8002ff4 <_read_r+0x20>)
 8002fe0:	602a      	str	r2, [r5, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	f7fd fe18 	bl	8000c18 <_read>
 8002fe8:	1c43      	adds	r3, r0, #1
 8002fea:	d102      	bne.n	8002ff2 <_read_r+0x1e>
 8002fec:	682b      	ldr	r3, [r5, #0]
 8002fee:	b103      	cbz	r3, 8002ff2 <_read_r+0x1e>
 8002ff0:	6023      	str	r3, [r4, #0]
 8002ff2:	bd38      	pop	{r3, r4, r5, pc}
 8002ff4:	20000244 	.word	0x20000244

08002ff8 <_write_r>:
 8002ff8:	b538      	push	{r3, r4, r5, lr}
 8002ffa:	4604      	mov	r4, r0
 8002ffc:	4608      	mov	r0, r1
 8002ffe:	4611      	mov	r1, r2
 8003000:	2200      	movs	r2, #0
 8003002:	4d05      	ldr	r5, [pc, #20]	@ (8003018 <_write_r+0x20>)
 8003004:	602a      	str	r2, [r5, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	f7fd fe23 	bl	8000c52 <_write>
 800300c:	1c43      	adds	r3, r0, #1
 800300e:	d102      	bne.n	8003016 <_write_r+0x1e>
 8003010:	682b      	ldr	r3, [r5, #0]
 8003012:	b103      	cbz	r3, 8003016 <_write_r+0x1e>
 8003014:	6023      	str	r3, [r4, #0]
 8003016:	bd38      	pop	{r3, r4, r5, pc}
 8003018:	20000244 	.word	0x20000244

0800301c <__errno>:
 800301c:	4b01      	ldr	r3, [pc, #4]	@ (8003024 <__errno+0x8>)
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	20000018 	.word	0x20000018

08003028 <__libc_init_array>:
 8003028:	b570      	push	{r4, r5, r6, lr}
 800302a:	2600      	movs	r6, #0
 800302c:	4d0c      	ldr	r5, [pc, #48]	@ (8003060 <__libc_init_array+0x38>)
 800302e:	4c0d      	ldr	r4, [pc, #52]	@ (8003064 <__libc_init_array+0x3c>)
 8003030:	1b64      	subs	r4, r4, r5
 8003032:	10a4      	asrs	r4, r4, #2
 8003034:	42a6      	cmp	r6, r4
 8003036:	d109      	bne.n	800304c <__libc_init_array+0x24>
 8003038:	f000 fd2e 	bl	8003a98 <_init>
 800303c:	2600      	movs	r6, #0
 800303e:	4d0a      	ldr	r5, [pc, #40]	@ (8003068 <__libc_init_array+0x40>)
 8003040:	4c0a      	ldr	r4, [pc, #40]	@ (800306c <__libc_init_array+0x44>)
 8003042:	1b64      	subs	r4, r4, r5
 8003044:	10a4      	asrs	r4, r4, #2
 8003046:	42a6      	cmp	r6, r4
 8003048:	d105      	bne.n	8003056 <__libc_init_array+0x2e>
 800304a:	bd70      	pop	{r4, r5, r6, pc}
 800304c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003050:	4798      	blx	r3
 8003052:	3601      	adds	r6, #1
 8003054:	e7ee      	b.n	8003034 <__libc_init_array+0xc>
 8003056:	f855 3b04 	ldr.w	r3, [r5], #4
 800305a:	4798      	blx	r3
 800305c:	3601      	adds	r6, #1
 800305e:	e7f2      	b.n	8003046 <__libc_init_array+0x1e>
 8003060:	08003b44 	.word	0x08003b44
 8003064:	08003b44 	.word	0x08003b44
 8003068:	08003b44 	.word	0x08003b44
 800306c:	08003b48 	.word	0x08003b48

08003070 <__retarget_lock_init_recursive>:
 8003070:	4770      	bx	lr

08003072 <__retarget_lock_acquire_recursive>:
 8003072:	4770      	bx	lr

08003074 <__retarget_lock_release_recursive>:
 8003074:	4770      	bx	lr
	...

08003078 <_free_r>:
 8003078:	b538      	push	{r3, r4, r5, lr}
 800307a:	4605      	mov	r5, r0
 800307c:	2900      	cmp	r1, #0
 800307e:	d040      	beq.n	8003102 <_free_r+0x8a>
 8003080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003084:	1f0c      	subs	r4, r1, #4
 8003086:	2b00      	cmp	r3, #0
 8003088:	bfb8      	it	lt
 800308a:	18e4      	addlt	r4, r4, r3
 800308c:	f000 f8de 	bl	800324c <__malloc_lock>
 8003090:	4a1c      	ldr	r2, [pc, #112]	@ (8003104 <_free_r+0x8c>)
 8003092:	6813      	ldr	r3, [r2, #0]
 8003094:	b933      	cbnz	r3, 80030a4 <_free_r+0x2c>
 8003096:	6063      	str	r3, [r4, #4]
 8003098:	6014      	str	r4, [r2, #0]
 800309a:	4628      	mov	r0, r5
 800309c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030a0:	f000 b8da 	b.w	8003258 <__malloc_unlock>
 80030a4:	42a3      	cmp	r3, r4
 80030a6:	d908      	bls.n	80030ba <_free_r+0x42>
 80030a8:	6820      	ldr	r0, [r4, #0]
 80030aa:	1821      	adds	r1, r4, r0
 80030ac:	428b      	cmp	r3, r1
 80030ae:	bf01      	itttt	eq
 80030b0:	6819      	ldreq	r1, [r3, #0]
 80030b2:	685b      	ldreq	r3, [r3, #4]
 80030b4:	1809      	addeq	r1, r1, r0
 80030b6:	6021      	streq	r1, [r4, #0]
 80030b8:	e7ed      	b.n	8003096 <_free_r+0x1e>
 80030ba:	461a      	mov	r2, r3
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	b10b      	cbz	r3, 80030c4 <_free_r+0x4c>
 80030c0:	42a3      	cmp	r3, r4
 80030c2:	d9fa      	bls.n	80030ba <_free_r+0x42>
 80030c4:	6811      	ldr	r1, [r2, #0]
 80030c6:	1850      	adds	r0, r2, r1
 80030c8:	42a0      	cmp	r0, r4
 80030ca:	d10b      	bne.n	80030e4 <_free_r+0x6c>
 80030cc:	6820      	ldr	r0, [r4, #0]
 80030ce:	4401      	add	r1, r0
 80030d0:	1850      	adds	r0, r2, r1
 80030d2:	4283      	cmp	r3, r0
 80030d4:	6011      	str	r1, [r2, #0]
 80030d6:	d1e0      	bne.n	800309a <_free_r+0x22>
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	4408      	add	r0, r1
 80030de:	6010      	str	r0, [r2, #0]
 80030e0:	6053      	str	r3, [r2, #4]
 80030e2:	e7da      	b.n	800309a <_free_r+0x22>
 80030e4:	d902      	bls.n	80030ec <_free_r+0x74>
 80030e6:	230c      	movs	r3, #12
 80030e8:	602b      	str	r3, [r5, #0]
 80030ea:	e7d6      	b.n	800309a <_free_r+0x22>
 80030ec:	6820      	ldr	r0, [r4, #0]
 80030ee:	1821      	adds	r1, r4, r0
 80030f0:	428b      	cmp	r3, r1
 80030f2:	bf01      	itttt	eq
 80030f4:	6819      	ldreq	r1, [r3, #0]
 80030f6:	685b      	ldreq	r3, [r3, #4]
 80030f8:	1809      	addeq	r1, r1, r0
 80030fa:	6021      	streq	r1, [r4, #0]
 80030fc:	6063      	str	r3, [r4, #4]
 80030fe:	6054      	str	r4, [r2, #4]
 8003100:	e7cb      	b.n	800309a <_free_r+0x22>
 8003102:	bd38      	pop	{r3, r4, r5, pc}
 8003104:	20000250 	.word	0x20000250

08003108 <sbrk_aligned>:
 8003108:	b570      	push	{r4, r5, r6, lr}
 800310a:	4e0f      	ldr	r6, [pc, #60]	@ (8003148 <sbrk_aligned+0x40>)
 800310c:	460c      	mov	r4, r1
 800310e:	6831      	ldr	r1, [r6, #0]
 8003110:	4605      	mov	r5, r0
 8003112:	b911      	cbnz	r1, 800311a <sbrk_aligned+0x12>
 8003114:	f000 fca2 	bl	8003a5c <_sbrk_r>
 8003118:	6030      	str	r0, [r6, #0]
 800311a:	4621      	mov	r1, r4
 800311c:	4628      	mov	r0, r5
 800311e:	f000 fc9d 	bl	8003a5c <_sbrk_r>
 8003122:	1c43      	adds	r3, r0, #1
 8003124:	d103      	bne.n	800312e <sbrk_aligned+0x26>
 8003126:	f04f 34ff 	mov.w	r4, #4294967295
 800312a:	4620      	mov	r0, r4
 800312c:	bd70      	pop	{r4, r5, r6, pc}
 800312e:	1cc4      	adds	r4, r0, #3
 8003130:	f024 0403 	bic.w	r4, r4, #3
 8003134:	42a0      	cmp	r0, r4
 8003136:	d0f8      	beq.n	800312a <sbrk_aligned+0x22>
 8003138:	1a21      	subs	r1, r4, r0
 800313a:	4628      	mov	r0, r5
 800313c:	f000 fc8e 	bl	8003a5c <_sbrk_r>
 8003140:	3001      	adds	r0, #1
 8003142:	d1f2      	bne.n	800312a <sbrk_aligned+0x22>
 8003144:	e7ef      	b.n	8003126 <sbrk_aligned+0x1e>
 8003146:	bf00      	nop
 8003148:	2000024c 	.word	0x2000024c

0800314c <_malloc_r>:
 800314c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003150:	1ccd      	adds	r5, r1, #3
 8003152:	f025 0503 	bic.w	r5, r5, #3
 8003156:	3508      	adds	r5, #8
 8003158:	2d0c      	cmp	r5, #12
 800315a:	bf38      	it	cc
 800315c:	250c      	movcc	r5, #12
 800315e:	2d00      	cmp	r5, #0
 8003160:	4606      	mov	r6, r0
 8003162:	db01      	blt.n	8003168 <_malloc_r+0x1c>
 8003164:	42a9      	cmp	r1, r5
 8003166:	d904      	bls.n	8003172 <_malloc_r+0x26>
 8003168:	230c      	movs	r3, #12
 800316a:	6033      	str	r3, [r6, #0]
 800316c:	2000      	movs	r0, #0
 800316e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003172:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003248 <_malloc_r+0xfc>
 8003176:	f000 f869 	bl	800324c <__malloc_lock>
 800317a:	f8d8 3000 	ldr.w	r3, [r8]
 800317e:	461c      	mov	r4, r3
 8003180:	bb44      	cbnz	r4, 80031d4 <_malloc_r+0x88>
 8003182:	4629      	mov	r1, r5
 8003184:	4630      	mov	r0, r6
 8003186:	f7ff ffbf 	bl	8003108 <sbrk_aligned>
 800318a:	1c43      	adds	r3, r0, #1
 800318c:	4604      	mov	r4, r0
 800318e:	d158      	bne.n	8003242 <_malloc_r+0xf6>
 8003190:	f8d8 4000 	ldr.w	r4, [r8]
 8003194:	4627      	mov	r7, r4
 8003196:	2f00      	cmp	r7, #0
 8003198:	d143      	bne.n	8003222 <_malloc_r+0xd6>
 800319a:	2c00      	cmp	r4, #0
 800319c:	d04b      	beq.n	8003236 <_malloc_r+0xea>
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	4639      	mov	r1, r7
 80031a2:	4630      	mov	r0, r6
 80031a4:	eb04 0903 	add.w	r9, r4, r3
 80031a8:	f000 fc58 	bl	8003a5c <_sbrk_r>
 80031ac:	4581      	cmp	r9, r0
 80031ae:	d142      	bne.n	8003236 <_malloc_r+0xea>
 80031b0:	6821      	ldr	r1, [r4, #0]
 80031b2:	4630      	mov	r0, r6
 80031b4:	1a6d      	subs	r5, r5, r1
 80031b6:	4629      	mov	r1, r5
 80031b8:	f7ff ffa6 	bl	8003108 <sbrk_aligned>
 80031bc:	3001      	adds	r0, #1
 80031be:	d03a      	beq.n	8003236 <_malloc_r+0xea>
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	442b      	add	r3, r5
 80031c4:	6023      	str	r3, [r4, #0]
 80031c6:	f8d8 3000 	ldr.w	r3, [r8]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	bb62      	cbnz	r2, 8003228 <_malloc_r+0xdc>
 80031ce:	f8c8 7000 	str.w	r7, [r8]
 80031d2:	e00f      	b.n	80031f4 <_malloc_r+0xa8>
 80031d4:	6822      	ldr	r2, [r4, #0]
 80031d6:	1b52      	subs	r2, r2, r5
 80031d8:	d420      	bmi.n	800321c <_malloc_r+0xd0>
 80031da:	2a0b      	cmp	r2, #11
 80031dc:	d917      	bls.n	800320e <_malloc_r+0xc2>
 80031de:	1961      	adds	r1, r4, r5
 80031e0:	42a3      	cmp	r3, r4
 80031e2:	6025      	str	r5, [r4, #0]
 80031e4:	bf18      	it	ne
 80031e6:	6059      	strne	r1, [r3, #4]
 80031e8:	6863      	ldr	r3, [r4, #4]
 80031ea:	bf08      	it	eq
 80031ec:	f8c8 1000 	streq.w	r1, [r8]
 80031f0:	5162      	str	r2, [r4, r5]
 80031f2:	604b      	str	r3, [r1, #4]
 80031f4:	4630      	mov	r0, r6
 80031f6:	f000 f82f 	bl	8003258 <__malloc_unlock>
 80031fa:	f104 000b 	add.w	r0, r4, #11
 80031fe:	1d23      	adds	r3, r4, #4
 8003200:	f020 0007 	bic.w	r0, r0, #7
 8003204:	1ac2      	subs	r2, r0, r3
 8003206:	bf1c      	itt	ne
 8003208:	1a1b      	subne	r3, r3, r0
 800320a:	50a3      	strne	r3, [r4, r2]
 800320c:	e7af      	b.n	800316e <_malloc_r+0x22>
 800320e:	6862      	ldr	r2, [r4, #4]
 8003210:	42a3      	cmp	r3, r4
 8003212:	bf0c      	ite	eq
 8003214:	f8c8 2000 	streq.w	r2, [r8]
 8003218:	605a      	strne	r2, [r3, #4]
 800321a:	e7eb      	b.n	80031f4 <_malloc_r+0xa8>
 800321c:	4623      	mov	r3, r4
 800321e:	6864      	ldr	r4, [r4, #4]
 8003220:	e7ae      	b.n	8003180 <_malloc_r+0x34>
 8003222:	463c      	mov	r4, r7
 8003224:	687f      	ldr	r7, [r7, #4]
 8003226:	e7b6      	b.n	8003196 <_malloc_r+0x4a>
 8003228:	461a      	mov	r2, r3
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	42a3      	cmp	r3, r4
 800322e:	d1fb      	bne.n	8003228 <_malloc_r+0xdc>
 8003230:	2300      	movs	r3, #0
 8003232:	6053      	str	r3, [r2, #4]
 8003234:	e7de      	b.n	80031f4 <_malloc_r+0xa8>
 8003236:	230c      	movs	r3, #12
 8003238:	4630      	mov	r0, r6
 800323a:	6033      	str	r3, [r6, #0]
 800323c:	f000 f80c 	bl	8003258 <__malloc_unlock>
 8003240:	e794      	b.n	800316c <_malloc_r+0x20>
 8003242:	6005      	str	r5, [r0, #0]
 8003244:	e7d6      	b.n	80031f4 <_malloc_r+0xa8>
 8003246:	bf00      	nop
 8003248:	20000250 	.word	0x20000250

0800324c <__malloc_lock>:
 800324c:	4801      	ldr	r0, [pc, #4]	@ (8003254 <__malloc_lock+0x8>)
 800324e:	f7ff bf10 	b.w	8003072 <__retarget_lock_acquire_recursive>
 8003252:	bf00      	nop
 8003254:	20000248 	.word	0x20000248

08003258 <__malloc_unlock>:
 8003258:	4801      	ldr	r0, [pc, #4]	@ (8003260 <__malloc_unlock+0x8>)
 800325a:	f7ff bf0b 	b.w	8003074 <__retarget_lock_release_recursive>
 800325e:	bf00      	nop
 8003260:	20000248 	.word	0x20000248

08003264 <__sfputc_r>:
 8003264:	6893      	ldr	r3, [r2, #8]
 8003266:	b410      	push	{r4}
 8003268:	3b01      	subs	r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	6093      	str	r3, [r2, #8]
 800326e:	da07      	bge.n	8003280 <__sfputc_r+0x1c>
 8003270:	6994      	ldr	r4, [r2, #24]
 8003272:	42a3      	cmp	r3, r4
 8003274:	db01      	blt.n	800327a <__sfputc_r+0x16>
 8003276:	290a      	cmp	r1, #10
 8003278:	d102      	bne.n	8003280 <__sfputc_r+0x1c>
 800327a:	bc10      	pop	{r4}
 800327c:	f7ff bdeb 	b.w	8002e56 <__swbuf_r>
 8003280:	6813      	ldr	r3, [r2, #0]
 8003282:	1c58      	adds	r0, r3, #1
 8003284:	6010      	str	r0, [r2, #0]
 8003286:	7019      	strb	r1, [r3, #0]
 8003288:	4608      	mov	r0, r1
 800328a:	bc10      	pop	{r4}
 800328c:	4770      	bx	lr

0800328e <__sfputs_r>:
 800328e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003290:	4606      	mov	r6, r0
 8003292:	460f      	mov	r7, r1
 8003294:	4614      	mov	r4, r2
 8003296:	18d5      	adds	r5, r2, r3
 8003298:	42ac      	cmp	r4, r5
 800329a:	d101      	bne.n	80032a0 <__sfputs_r+0x12>
 800329c:	2000      	movs	r0, #0
 800329e:	e007      	b.n	80032b0 <__sfputs_r+0x22>
 80032a0:	463a      	mov	r2, r7
 80032a2:	4630      	mov	r0, r6
 80032a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032a8:	f7ff ffdc 	bl	8003264 <__sfputc_r>
 80032ac:	1c43      	adds	r3, r0, #1
 80032ae:	d1f3      	bne.n	8003298 <__sfputs_r+0xa>
 80032b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080032b4 <_vfiprintf_r>:
 80032b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032b8:	460d      	mov	r5, r1
 80032ba:	4614      	mov	r4, r2
 80032bc:	4698      	mov	r8, r3
 80032be:	4606      	mov	r6, r0
 80032c0:	b09d      	sub	sp, #116	@ 0x74
 80032c2:	b118      	cbz	r0, 80032cc <_vfiprintf_r+0x18>
 80032c4:	6a03      	ldr	r3, [r0, #32]
 80032c6:	b90b      	cbnz	r3, 80032cc <_vfiprintf_r+0x18>
 80032c8:	f7ff fcdc 	bl	8002c84 <__sinit>
 80032cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80032ce:	07d9      	lsls	r1, r3, #31
 80032d0:	d405      	bmi.n	80032de <_vfiprintf_r+0x2a>
 80032d2:	89ab      	ldrh	r3, [r5, #12]
 80032d4:	059a      	lsls	r2, r3, #22
 80032d6:	d402      	bmi.n	80032de <_vfiprintf_r+0x2a>
 80032d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80032da:	f7ff feca 	bl	8003072 <__retarget_lock_acquire_recursive>
 80032de:	89ab      	ldrh	r3, [r5, #12]
 80032e0:	071b      	lsls	r3, r3, #28
 80032e2:	d501      	bpl.n	80032e8 <_vfiprintf_r+0x34>
 80032e4:	692b      	ldr	r3, [r5, #16]
 80032e6:	b99b      	cbnz	r3, 8003310 <_vfiprintf_r+0x5c>
 80032e8:	4629      	mov	r1, r5
 80032ea:	4630      	mov	r0, r6
 80032ec:	f7ff fdf2 	bl	8002ed4 <__swsetup_r>
 80032f0:	b170      	cbz	r0, 8003310 <_vfiprintf_r+0x5c>
 80032f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80032f4:	07dc      	lsls	r4, r3, #31
 80032f6:	d504      	bpl.n	8003302 <_vfiprintf_r+0x4e>
 80032f8:	f04f 30ff 	mov.w	r0, #4294967295
 80032fc:	b01d      	add	sp, #116	@ 0x74
 80032fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003302:	89ab      	ldrh	r3, [r5, #12]
 8003304:	0598      	lsls	r0, r3, #22
 8003306:	d4f7      	bmi.n	80032f8 <_vfiprintf_r+0x44>
 8003308:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800330a:	f7ff feb3 	bl	8003074 <__retarget_lock_release_recursive>
 800330e:	e7f3      	b.n	80032f8 <_vfiprintf_r+0x44>
 8003310:	2300      	movs	r3, #0
 8003312:	9309      	str	r3, [sp, #36]	@ 0x24
 8003314:	2320      	movs	r3, #32
 8003316:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800331a:	2330      	movs	r3, #48	@ 0x30
 800331c:	f04f 0901 	mov.w	r9, #1
 8003320:	f8cd 800c 	str.w	r8, [sp, #12]
 8003324:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80034d0 <_vfiprintf_r+0x21c>
 8003328:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800332c:	4623      	mov	r3, r4
 800332e:	469a      	mov	sl, r3
 8003330:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003334:	b10a      	cbz	r2, 800333a <_vfiprintf_r+0x86>
 8003336:	2a25      	cmp	r2, #37	@ 0x25
 8003338:	d1f9      	bne.n	800332e <_vfiprintf_r+0x7a>
 800333a:	ebba 0b04 	subs.w	fp, sl, r4
 800333e:	d00b      	beq.n	8003358 <_vfiprintf_r+0xa4>
 8003340:	465b      	mov	r3, fp
 8003342:	4622      	mov	r2, r4
 8003344:	4629      	mov	r1, r5
 8003346:	4630      	mov	r0, r6
 8003348:	f7ff ffa1 	bl	800328e <__sfputs_r>
 800334c:	3001      	adds	r0, #1
 800334e:	f000 80a7 	beq.w	80034a0 <_vfiprintf_r+0x1ec>
 8003352:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003354:	445a      	add	r2, fp
 8003356:	9209      	str	r2, [sp, #36]	@ 0x24
 8003358:	f89a 3000 	ldrb.w	r3, [sl]
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 809f 	beq.w	80034a0 <_vfiprintf_r+0x1ec>
 8003362:	2300      	movs	r3, #0
 8003364:	f04f 32ff 	mov.w	r2, #4294967295
 8003368:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800336c:	f10a 0a01 	add.w	sl, sl, #1
 8003370:	9304      	str	r3, [sp, #16]
 8003372:	9307      	str	r3, [sp, #28]
 8003374:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003378:	931a      	str	r3, [sp, #104]	@ 0x68
 800337a:	4654      	mov	r4, sl
 800337c:	2205      	movs	r2, #5
 800337e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003382:	4853      	ldr	r0, [pc, #332]	@ (80034d0 <_vfiprintf_r+0x21c>)
 8003384:	f000 fb7a 	bl	8003a7c <memchr>
 8003388:	9a04      	ldr	r2, [sp, #16]
 800338a:	b9d8      	cbnz	r0, 80033c4 <_vfiprintf_r+0x110>
 800338c:	06d1      	lsls	r1, r2, #27
 800338e:	bf44      	itt	mi
 8003390:	2320      	movmi	r3, #32
 8003392:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003396:	0713      	lsls	r3, r2, #28
 8003398:	bf44      	itt	mi
 800339a:	232b      	movmi	r3, #43	@ 0x2b
 800339c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033a0:	f89a 3000 	ldrb.w	r3, [sl]
 80033a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80033a6:	d015      	beq.n	80033d4 <_vfiprintf_r+0x120>
 80033a8:	4654      	mov	r4, sl
 80033aa:	2000      	movs	r0, #0
 80033ac:	f04f 0c0a 	mov.w	ip, #10
 80033b0:	9a07      	ldr	r2, [sp, #28]
 80033b2:	4621      	mov	r1, r4
 80033b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033b8:	3b30      	subs	r3, #48	@ 0x30
 80033ba:	2b09      	cmp	r3, #9
 80033bc:	d94b      	bls.n	8003456 <_vfiprintf_r+0x1a2>
 80033be:	b1b0      	cbz	r0, 80033ee <_vfiprintf_r+0x13a>
 80033c0:	9207      	str	r2, [sp, #28]
 80033c2:	e014      	b.n	80033ee <_vfiprintf_r+0x13a>
 80033c4:	eba0 0308 	sub.w	r3, r0, r8
 80033c8:	fa09 f303 	lsl.w	r3, r9, r3
 80033cc:	4313      	orrs	r3, r2
 80033ce:	46a2      	mov	sl, r4
 80033d0:	9304      	str	r3, [sp, #16]
 80033d2:	e7d2      	b.n	800337a <_vfiprintf_r+0xc6>
 80033d4:	9b03      	ldr	r3, [sp, #12]
 80033d6:	1d19      	adds	r1, r3, #4
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	9103      	str	r1, [sp, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	bfbb      	ittet	lt
 80033e0:	425b      	neglt	r3, r3
 80033e2:	f042 0202 	orrlt.w	r2, r2, #2
 80033e6:	9307      	strge	r3, [sp, #28]
 80033e8:	9307      	strlt	r3, [sp, #28]
 80033ea:	bfb8      	it	lt
 80033ec:	9204      	strlt	r2, [sp, #16]
 80033ee:	7823      	ldrb	r3, [r4, #0]
 80033f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80033f2:	d10a      	bne.n	800340a <_vfiprintf_r+0x156>
 80033f4:	7863      	ldrb	r3, [r4, #1]
 80033f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80033f8:	d132      	bne.n	8003460 <_vfiprintf_r+0x1ac>
 80033fa:	9b03      	ldr	r3, [sp, #12]
 80033fc:	3402      	adds	r4, #2
 80033fe:	1d1a      	adds	r2, r3, #4
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	9203      	str	r2, [sp, #12]
 8003404:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003408:	9305      	str	r3, [sp, #20]
 800340a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80034d4 <_vfiprintf_r+0x220>
 800340e:	2203      	movs	r2, #3
 8003410:	4650      	mov	r0, sl
 8003412:	7821      	ldrb	r1, [r4, #0]
 8003414:	f000 fb32 	bl	8003a7c <memchr>
 8003418:	b138      	cbz	r0, 800342a <_vfiprintf_r+0x176>
 800341a:	2240      	movs	r2, #64	@ 0x40
 800341c:	9b04      	ldr	r3, [sp, #16]
 800341e:	eba0 000a 	sub.w	r0, r0, sl
 8003422:	4082      	lsls	r2, r0
 8003424:	4313      	orrs	r3, r2
 8003426:	3401      	adds	r4, #1
 8003428:	9304      	str	r3, [sp, #16]
 800342a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800342e:	2206      	movs	r2, #6
 8003430:	4829      	ldr	r0, [pc, #164]	@ (80034d8 <_vfiprintf_r+0x224>)
 8003432:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003436:	f000 fb21 	bl	8003a7c <memchr>
 800343a:	2800      	cmp	r0, #0
 800343c:	d03f      	beq.n	80034be <_vfiprintf_r+0x20a>
 800343e:	4b27      	ldr	r3, [pc, #156]	@ (80034dc <_vfiprintf_r+0x228>)
 8003440:	bb1b      	cbnz	r3, 800348a <_vfiprintf_r+0x1d6>
 8003442:	9b03      	ldr	r3, [sp, #12]
 8003444:	3307      	adds	r3, #7
 8003446:	f023 0307 	bic.w	r3, r3, #7
 800344a:	3308      	adds	r3, #8
 800344c:	9303      	str	r3, [sp, #12]
 800344e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003450:	443b      	add	r3, r7
 8003452:	9309      	str	r3, [sp, #36]	@ 0x24
 8003454:	e76a      	b.n	800332c <_vfiprintf_r+0x78>
 8003456:	460c      	mov	r4, r1
 8003458:	2001      	movs	r0, #1
 800345a:	fb0c 3202 	mla	r2, ip, r2, r3
 800345e:	e7a8      	b.n	80033b2 <_vfiprintf_r+0xfe>
 8003460:	2300      	movs	r3, #0
 8003462:	f04f 0c0a 	mov.w	ip, #10
 8003466:	4619      	mov	r1, r3
 8003468:	3401      	adds	r4, #1
 800346a:	9305      	str	r3, [sp, #20]
 800346c:	4620      	mov	r0, r4
 800346e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003472:	3a30      	subs	r2, #48	@ 0x30
 8003474:	2a09      	cmp	r2, #9
 8003476:	d903      	bls.n	8003480 <_vfiprintf_r+0x1cc>
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0c6      	beq.n	800340a <_vfiprintf_r+0x156>
 800347c:	9105      	str	r1, [sp, #20]
 800347e:	e7c4      	b.n	800340a <_vfiprintf_r+0x156>
 8003480:	4604      	mov	r4, r0
 8003482:	2301      	movs	r3, #1
 8003484:	fb0c 2101 	mla	r1, ip, r1, r2
 8003488:	e7f0      	b.n	800346c <_vfiprintf_r+0x1b8>
 800348a:	ab03      	add	r3, sp, #12
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	462a      	mov	r2, r5
 8003490:	4630      	mov	r0, r6
 8003492:	4b13      	ldr	r3, [pc, #76]	@ (80034e0 <_vfiprintf_r+0x22c>)
 8003494:	a904      	add	r1, sp, #16
 8003496:	f3af 8000 	nop.w
 800349a:	4607      	mov	r7, r0
 800349c:	1c78      	adds	r0, r7, #1
 800349e:	d1d6      	bne.n	800344e <_vfiprintf_r+0x19a>
 80034a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80034a2:	07d9      	lsls	r1, r3, #31
 80034a4:	d405      	bmi.n	80034b2 <_vfiprintf_r+0x1fe>
 80034a6:	89ab      	ldrh	r3, [r5, #12]
 80034a8:	059a      	lsls	r2, r3, #22
 80034aa:	d402      	bmi.n	80034b2 <_vfiprintf_r+0x1fe>
 80034ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034ae:	f7ff fde1 	bl	8003074 <__retarget_lock_release_recursive>
 80034b2:	89ab      	ldrh	r3, [r5, #12]
 80034b4:	065b      	lsls	r3, r3, #25
 80034b6:	f53f af1f 	bmi.w	80032f8 <_vfiprintf_r+0x44>
 80034ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80034bc:	e71e      	b.n	80032fc <_vfiprintf_r+0x48>
 80034be:	ab03      	add	r3, sp, #12
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	462a      	mov	r2, r5
 80034c4:	4630      	mov	r0, r6
 80034c6:	4b06      	ldr	r3, [pc, #24]	@ (80034e0 <_vfiprintf_r+0x22c>)
 80034c8:	a904      	add	r1, sp, #16
 80034ca:	f000 f87d 	bl	80035c8 <_printf_i>
 80034ce:	e7e4      	b.n	800349a <_vfiprintf_r+0x1e6>
 80034d0:	08003b0e 	.word	0x08003b0e
 80034d4:	08003b14 	.word	0x08003b14
 80034d8:	08003b18 	.word	0x08003b18
 80034dc:	00000000 	.word	0x00000000
 80034e0:	0800328f 	.word	0x0800328f

080034e4 <_printf_common>:
 80034e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034e8:	4616      	mov	r6, r2
 80034ea:	4698      	mov	r8, r3
 80034ec:	688a      	ldr	r2, [r1, #8]
 80034ee:	690b      	ldr	r3, [r1, #16]
 80034f0:	4607      	mov	r7, r0
 80034f2:	4293      	cmp	r3, r2
 80034f4:	bfb8      	it	lt
 80034f6:	4613      	movlt	r3, r2
 80034f8:	6033      	str	r3, [r6, #0]
 80034fa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80034fe:	460c      	mov	r4, r1
 8003500:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003504:	b10a      	cbz	r2, 800350a <_printf_common+0x26>
 8003506:	3301      	adds	r3, #1
 8003508:	6033      	str	r3, [r6, #0]
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	0699      	lsls	r1, r3, #26
 800350e:	bf42      	ittt	mi
 8003510:	6833      	ldrmi	r3, [r6, #0]
 8003512:	3302      	addmi	r3, #2
 8003514:	6033      	strmi	r3, [r6, #0]
 8003516:	6825      	ldr	r5, [r4, #0]
 8003518:	f015 0506 	ands.w	r5, r5, #6
 800351c:	d106      	bne.n	800352c <_printf_common+0x48>
 800351e:	f104 0a19 	add.w	sl, r4, #25
 8003522:	68e3      	ldr	r3, [r4, #12]
 8003524:	6832      	ldr	r2, [r6, #0]
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	42ab      	cmp	r3, r5
 800352a:	dc2b      	bgt.n	8003584 <_printf_common+0xa0>
 800352c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003530:	6822      	ldr	r2, [r4, #0]
 8003532:	3b00      	subs	r3, #0
 8003534:	bf18      	it	ne
 8003536:	2301      	movne	r3, #1
 8003538:	0692      	lsls	r2, r2, #26
 800353a:	d430      	bmi.n	800359e <_printf_common+0xba>
 800353c:	4641      	mov	r1, r8
 800353e:	4638      	mov	r0, r7
 8003540:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003544:	47c8      	blx	r9
 8003546:	3001      	adds	r0, #1
 8003548:	d023      	beq.n	8003592 <_printf_common+0xae>
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	6922      	ldr	r2, [r4, #16]
 800354e:	f003 0306 	and.w	r3, r3, #6
 8003552:	2b04      	cmp	r3, #4
 8003554:	bf14      	ite	ne
 8003556:	2500      	movne	r5, #0
 8003558:	6833      	ldreq	r3, [r6, #0]
 800355a:	f04f 0600 	mov.w	r6, #0
 800355e:	bf08      	it	eq
 8003560:	68e5      	ldreq	r5, [r4, #12]
 8003562:	f104 041a 	add.w	r4, r4, #26
 8003566:	bf08      	it	eq
 8003568:	1aed      	subeq	r5, r5, r3
 800356a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800356e:	bf08      	it	eq
 8003570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003574:	4293      	cmp	r3, r2
 8003576:	bfc4      	itt	gt
 8003578:	1a9b      	subgt	r3, r3, r2
 800357a:	18ed      	addgt	r5, r5, r3
 800357c:	42b5      	cmp	r5, r6
 800357e:	d11a      	bne.n	80035b6 <_printf_common+0xd2>
 8003580:	2000      	movs	r0, #0
 8003582:	e008      	b.n	8003596 <_printf_common+0xb2>
 8003584:	2301      	movs	r3, #1
 8003586:	4652      	mov	r2, sl
 8003588:	4641      	mov	r1, r8
 800358a:	4638      	mov	r0, r7
 800358c:	47c8      	blx	r9
 800358e:	3001      	adds	r0, #1
 8003590:	d103      	bne.n	800359a <_printf_common+0xb6>
 8003592:	f04f 30ff 	mov.w	r0, #4294967295
 8003596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800359a:	3501      	adds	r5, #1
 800359c:	e7c1      	b.n	8003522 <_printf_common+0x3e>
 800359e:	2030      	movs	r0, #48	@ 0x30
 80035a0:	18e1      	adds	r1, r4, r3
 80035a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80035ac:	4422      	add	r2, r4
 80035ae:	3302      	adds	r3, #2
 80035b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80035b4:	e7c2      	b.n	800353c <_printf_common+0x58>
 80035b6:	2301      	movs	r3, #1
 80035b8:	4622      	mov	r2, r4
 80035ba:	4641      	mov	r1, r8
 80035bc:	4638      	mov	r0, r7
 80035be:	47c8      	blx	r9
 80035c0:	3001      	adds	r0, #1
 80035c2:	d0e6      	beq.n	8003592 <_printf_common+0xae>
 80035c4:	3601      	adds	r6, #1
 80035c6:	e7d9      	b.n	800357c <_printf_common+0x98>

080035c8 <_printf_i>:
 80035c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035cc:	7e0f      	ldrb	r7, [r1, #24]
 80035ce:	4691      	mov	r9, r2
 80035d0:	2f78      	cmp	r7, #120	@ 0x78
 80035d2:	4680      	mov	r8, r0
 80035d4:	460c      	mov	r4, r1
 80035d6:	469a      	mov	sl, r3
 80035d8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80035da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80035de:	d807      	bhi.n	80035f0 <_printf_i+0x28>
 80035e0:	2f62      	cmp	r7, #98	@ 0x62
 80035e2:	d80a      	bhi.n	80035fa <_printf_i+0x32>
 80035e4:	2f00      	cmp	r7, #0
 80035e6:	f000 80d1 	beq.w	800378c <_printf_i+0x1c4>
 80035ea:	2f58      	cmp	r7, #88	@ 0x58
 80035ec:	f000 80b8 	beq.w	8003760 <_printf_i+0x198>
 80035f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80035f8:	e03a      	b.n	8003670 <_printf_i+0xa8>
 80035fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80035fe:	2b15      	cmp	r3, #21
 8003600:	d8f6      	bhi.n	80035f0 <_printf_i+0x28>
 8003602:	a101      	add	r1, pc, #4	@ (adr r1, 8003608 <_printf_i+0x40>)
 8003604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003608:	08003661 	.word	0x08003661
 800360c:	08003675 	.word	0x08003675
 8003610:	080035f1 	.word	0x080035f1
 8003614:	080035f1 	.word	0x080035f1
 8003618:	080035f1 	.word	0x080035f1
 800361c:	080035f1 	.word	0x080035f1
 8003620:	08003675 	.word	0x08003675
 8003624:	080035f1 	.word	0x080035f1
 8003628:	080035f1 	.word	0x080035f1
 800362c:	080035f1 	.word	0x080035f1
 8003630:	080035f1 	.word	0x080035f1
 8003634:	08003773 	.word	0x08003773
 8003638:	0800369f 	.word	0x0800369f
 800363c:	0800372d 	.word	0x0800372d
 8003640:	080035f1 	.word	0x080035f1
 8003644:	080035f1 	.word	0x080035f1
 8003648:	08003795 	.word	0x08003795
 800364c:	080035f1 	.word	0x080035f1
 8003650:	0800369f 	.word	0x0800369f
 8003654:	080035f1 	.word	0x080035f1
 8003658:	080035f1 	.word	0x080035f1
 800365c:	08003735 	.word	0x08003735
 8003660:	6833      	ldr	r3, [r6, #0]
 8003662:	1d1a      	adds	r2, r3, #4
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6032      	str	r2, [r6, #0]
 8003668:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800366c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003670:	2301      	movs	r3, #1
 8003672:	e09c      	b.n	80037ae <_printf_i+0x1e6>
 8003674:	6833      	ldr	r3, [r6, #0]
 8003676:	6820      	ldr	r0, [r4, #0]
 8003678:	1d19      	adds	r1, r3, #4
 800367a:	6031      	str	r1, [r6, #0]
 800367c:	0606      	lsls	r6, r0, #24
 800367e:	d501      	bpl.n	8003684 <_printf_i+0xbc>
 8003680:	681d      	ldr	r5, [r3, #0]
 8003682:	e003      	b.n	800368c <_printf_i+0xc4>
 8003684:	0645      	lsls	r5, r0, #25
 8003686:	d5fb      	bpl.n	8003680 <_printf_i+0xb8>
 8003688:	f9b3 5000 	ldrsh.w	r5, [r3]
 800368c:	2d00      	cmp	r5, #0
 800368e:	da03      	bge.n	8003698 <_printf_i+0xd0>
 8003690:	232d      	movs	r3, #45	@ 0x2d
 8003692:	426d      	negs	r5, r5
 8003694:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003698:	230a      	movs	r3, #10
 800369a:	4858      	ldr	r0, [pc, #352]	@ (80037fc <_printf_i+0x234>)
 800369c:	e011      	b.n	80036c2 <_printf_i+0xfa>
 800369e:	6821      	ldr	r1, [r4, #0]
 80036a0:	6833      	ldr	r3, [r6, #0]
 80036a2:	0608      	lsls	r0, r1, #24
 80036a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80036a8:	d402      	bmi.n	80036b0 <_printf_i+0xe8>
 80036aa:	0649      	lsls	r1, r1, #25
 80036ac:	bf48      	it	mi
 80036ae:	b2ad      	uxthmi	r5, r5
 80036b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80036b2:	6033      	str	r3, [r6, #0]
 80036b4:	bf14      	ite	ne
 80036b6:	230a      	movne	r3, #10
 80036b8:	2308      	moveq	r3, #8
 80036ba:	4850      	ldr	r0, [pc, #320]	@ (80037fc <_printf_i+0x234>)
 80036bc:	2100      	movs	r1, #0
 80036be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80036c2:	6866      	ldr	r6, [r4, #4]
 80036c4:	2e00      	cmp	r6, #0
 80036c6:	60a6      	str	r6, [r4, #8]
 80036c8:	db05      	blt.n	80036d6 <_printf_i+0x10e>
 80036ca:	6821      	ldr	r1, [r4, #0]
 80036cc:	432e      	orrs	r6, r5
 80036ce:	f021 0104 	bic.w	r1, r1, #4
 80036d2:	6021      	str	r1, [r4, #0]
 80036d4:	d04b      	beq.n	800376e <_printf_i+0x1a6>
 80036d6:	4616      	mov	r6, r2
 80036d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80036dc:	fb03 5711 	mls	r7, r3, r1, r5
 80036e0:	5dc7      	ldrb	r7, [r0, r7]
 80036e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80036e6:	462f      	mov	r7, r5
 80036e8:	42bb      	cmp	r3, r7
 80036ea:	460d      	mov	r5, r1
 80036ec:	d9f4      	bls.n	80036d8 <_printf_i+0x110>
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d10b      	bne.n	800370a <_printf_i+0x142>
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	07df      	lsls	r7, r3, #31
 80036f6:	d508      	bpl.n	800370a <_printf_i+0x142>
 80036f8:	6923      	ldr	r3, [r4, #16]
 80036fa:	6861      	ldr	r1, [r4, #4]
 80036fc:	4299      	cmp	r1, r3
 80036fe:	bfde      	ittt	le
 8003700:	2330      	movle	r3, #48	@ 0x30
 8003702:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003706:	f106 36ff 	addle.w	r6, r6, #4294967295
 800370a:	1b92      	subs	r2, r2, r6
 800370c:	6122      	str	r2, [r4, #16]
 800370e:	464b      	mov	r3, r9
 8003710:	4621      	mov	r1, r4
 8003712:	4640      	mov	r0, r8
 8003714:	f8cd a000 	str.w	sl, [sp]
 8003718:	aa03      	add	r2, sp, #12
 800371a:	f7ff fee3 	bl	80034e4 <_printf_common>
 800371e:	3001      	adds	r0, #1
 8003720:	d14a      	bne.n	80037b8 <_printf_i+0x1f0>
 8003722:	f04f 30ff 	mov.w	r0, #4294967295
 8003726:	b004      	add	sp, #16
 8003728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800372c:	6823      	ldr	r3, [r4, #0]
 800372e:	f043 0320 	orr.w	r3, r3, #32
 8003732:	6023      	str	r3, [r4, #0]
 8003734:	2778      	movs	r7, #120	@ 0x78
 8003736:	4832      	ldr	r0, [pc, #200]	@ (8003800 <_printf_i+0x238>)
 8003738:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	6831      	ldr	r1, [r6, #0]
 8003740:	061f      	lsls	r7, r3, #24
 8003742:	f851 5b04 	ldr.w	r5, [r1], #4
 8003746:	d402      	bmi.n	800374e <_printf_i+0x186>
 8003748:	065f      	lsls	r7, r3, #25
 800374a:	bf48      	it	mi
 800374c:	b2ad      	uxthmi	r5, r5
 800374e:	6031      	str	r1, [r6, #0]
 8003750:	07d9      	lsls	r1, r3, #31
 8003752:	bf44      	itt	mi
 8003754:	f043 0320 	orrmi.w	r3, r3, #32
 8003758:	6023      	strmi	r3, [r4, #0]
 800375a:	b11d      	cbz	r5, 8003764 <_printf_i+0x19c>
 800375c:	2310      	movs	r3, #16
 800375e:	e7ad      	b.n	80036bc <_printf_i+0xf4>
 8003760:	4826      	ldr	r0, [pc, #152]	@ (80037fc <_printf_i+0x234>)
 8003762:	e7e9      	b.n	8003738 <_printf_i+0x170>
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	f023 0320 	bic.w	r3, r3, #32
 800376a:	6023      	str	r3, [r4, #0]
 800376c:	e7f6      	b.n	800375c <_printf_i+0x194>
 800376e:	4616      	mov	r6, r2
 8003770:	e7bd      	b.n	80036ee <_printf_i+0x126>
 8003772:	6833      	ldr	r3, [r6, #0]
 8003774:	6825      	ldr	r5, [r4, #0]
 8003776:	1d18      	adds	r0, r3, #4
 8003778:	6961      	ldr	r1, [r4, #20]
 800377a:	6030      	str	r0, [r6, #0]
 800377c:	062e      	lsls	r6, r5, #24
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	d501      	bpl.n	8003786 <_printf_i+0x1be>
 8003782:	6019      	str	r1, [r3, #0]
 8003784:	e002      	b.n	800378c <_printf_i+0x1c4>
 8003786:	0668      	lsls	r0, r5, #25
 8003788:	d5fb      	bpl.n	8003782 <_printf_i+0x1ba>
 800378a:	8019      	strh	r1, [r3, #0]
 800378c:	2300      	movs	r3, #0
 800378e:	4616      	mov	r6, r2
 8003790:	6123      	str	r3, [r4, #16]
 8003792:	e7bc      	b.n	800370e <_printf_i+0x146>
 8003794:	6833      	ldr	r3, [r6, #0]
 8003796:	2100      	movs	r1, #0
 8003798:	1d1a      	adds	r2, r3, #4
 800379a:	6032      	str	r2, [r6, #0]
 800379c:	681e      	ldr	r6, [r3, #0]
 800379e:	6862      	ldr	r2, [r4, #4]
 80037a0:	4630      	mov	r0, r6
 80037a2:	f000 f96b 	bl	8003a7c <memchr>
 80037a6:	b108      	cbz	r0, 80037ac <_printf_i+0x1e4>
 80037a8:	1b80      	subs	r0, r0, r6
 80037aa:	6060      	str	r0, [r4, #4]
 80037ac:	6863      	ldr	r3, [r4, #4]
 80037ae:	6123      	str	r3, [r4, #16]
 80037b0:	2300      	movs	r3, #0
 80037b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037b6:	e7aa      	b.n	800370e <_printf_i+0x146>
 80037b8:	4632      	mov	r2, r6
 80037ba:	4649      	mov	r1, r9
 80037bc:	4640      	mov	r0, r8
 80037be:	6923      	ldr	r3, [r4, #16]
 80037c0:	47d0      	blx	sl
 80037c2:	3001      	adds	r0, #1
 80037c4:	d0ad      	beq.n	8003722 <_printf_i+0x15a>
 80037c6:	6823      	ldr	r3, [r4, #0]
 80037c8:	079b      	lsls	r3, r3, #30
 80037ca:	d413      	bmi.n	80037f4 <_printf_i+0x22c>
 80037cc:	68e0      	ldr	r0, [r4, #12]
 80037ce:	9b03      	ldr	r3, [sp, #12]
 80037d0:	4298      	cmp	r0, r3
 80037d2:	bfb8      	it	lt
 80037d4:	4618      	movlt	r0, r3
 80037d6:	e7a6      	b.n	8003726 <_printf_i+0x15e>
 80037d8:	2301      	movs	r3, #1
 80037da:	4632      	mov	r2, r6
 80037dc:	4649      	mov	r1, r9
 80037de:	4640      	mov	r0, r8
 80037e0:	47d0      	blx	sl
 80037e2:	3001      	adds	r0, #1
 80037e4:	d09d      	beq.n	8003722 <_printf_i+0x15a>
 80037e6:	3501      	adds	r5, #1
 80037e8:	68e3      	ldr	r3, [r4, #12]
 80037ea:	9903      	ldr	r1, [sp, #12]
 80037ec:	1a5b      	subs	r3, r3, r1
 80037ee:	42ab      	cmp	r3, r5
 80037f0:	dcf2      	bgt.n	80037d8 <_printf_i+0x210>
 80037f2:	e7eb      	b.n	80037cc <_printf_i+0x204>
 80037f4:	2500      	movs	r5, #0
 80037f6:	f104 0619 	add.w	r6, r4, #25
 80037fa:	e7f5      	b.n	80037e8 <_printf_i+0x220>
 80037fc:	08003b1f 	.word	0x08003b1f
 8003800:	08003b30 	.word	0x08003b30

08003804 <__sflush_r>:
 8003804:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380a:	0716      	lsls	r6, r2, #28
 800380c:	4605      	mov	r5, r0
 800380e:	460c      	mov	r4, r1
 8003810:	d454      	bmi.n	80038bc <__sflush_r+0xb8>
 8003812:	684b      	ldr	r3, [r1, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	dc02      	bgt.n	800381e <__sflush_r+0x1a>
 8003818:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	dd48      	ble.n	80038b0 <__sflush_r+0xac>
 800381e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003820:	2e00      	cmp	r6, #0
 8003822:	d045      	beq.n	80038b0 <__sflush_r+0xac>
 8003824:	2300      	movs	r3, #0
 8003826:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800382a:	682f      	ldr	r7, [r5, #0]
 800382c:	6a21      	ldr	r1, [r4, #32]
 800382e:	602b      	str	r3, [r5, #0]
 8003830:	d030      	beq.n	8003894 <__sflush_r+0x90>
 8003832:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003834:	89a3      	ldrh	r3, [r4, #12]
 8003836:	0759      	lsls	r1, r3, #29
 8003838:	d505      	bpl.n	8003846 <__sflush_r+0x42>
 800383a:	6863      	ldr	r3, [r4, #4]
 800383c:	1ad2      	subs	r2, r2, r3
 800383e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003840:	b10b      	cbz	r3, 8003846 <__sflush_r+0x42>
 8003842:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003844:	1ad2      	subs	r2, r2, r3
 8003846:	2300      	movs	r3, #0
 8003848:	4628      	mov	r0, r5
 800384a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800384c:	6a21      	ldr	r1, [r4, #32]
 800384e:	47b0      	blx	r6
 8003850:	1c43      	adds	r3, r0, #1
 8003852:	89a3      	ldrh	r3, [r4, #12]
 8003854:	d106      	bne.n	8003864 <__sflush_r+0x60>
 8003856:	6829      	ldr	r1, [r5, #0]
 8003858:	291d      	cmp	r1, #29
 800385a:	d82b      	bhi.n	80038b4 <__sflush_r+0xb0>
 800385c:	4a28      	ldr	r2, [pc, #160]	@ (8003900 <__sflush_r+0xfc>)
 800385e:	40ca      	lsrs	r2, r1
 8003860:	07d6      	lsls	r6, r2, #31
 8003862:	d527      	bpl.n	80038b4 <__sflush_r+0xb0>
 8003864:	2200      	movs	r2, #0
 8003866:	6062      	str	r2, [r4, #4]
 8003868:	6922      	ldr	r2, [r4, #16]
 800386a:	04d9      	lsls	r1, r3, #19
 800386c:	6022      	str	r2, [r4, #0]
 800386e:	d504      	bpl.n	800387a <__sflush_r+0x76>
 8003870:	1c42      	adds	r2, r0, #1
 8003872:	d101      	bne.n	8003878 <__sflush_r+0x74>
 8003874:	682b      	ldr	r3, [r5, #0]
 8003876:	b903      	cbnz	r3, 800387a <__sflush_r+0x76>
 8003878:	6560      	str	r0, [r4, #84]	@ 0x54
 800387a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800387c:	602f      	str	r7, [r5, #0]
 800387e:	b1b9      	cbz	r1, 80038b0 <__sflush_r+0xac>
 8003880:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003884:	4299      	cmp	r1, r3
 8003886:	d002      	beq.n	800388e <__sflush_r+0x8a>
 8003888:	4628      	mov	r0, r5
 800388a:	f7ff fbf5 	bl	8003078 <_free_r>
 800388e:	2300      	movs	r3, #0
 8003890:	6363      	str	r3, [r4, #52]	@ 0x34
 8003892:	e00d      	b.n	80038b0 <__sflush_r+0xac>
 8003894:	2301      	movs	r3, #1
 8003896:	4628      	mov	r0, r5
 8003898:	47b0      	blx	r6
 800389a:	4602      	mov	r2, r0
 800389c:	1c50      	adds	r0, r2, #1
 800389e:	d1c9      	bne.n	8003834 <__sflush_r+0x30>
 80038a0:	682b      	ldr	r3, [r5, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0c6      	beq.n	8003834 <__sflush_r+0x30>
 80038a6:	2b1d      	cmp	r3, #29
 80038a8:	d001      	beq.n	80038ae <__sflush_r+0xaa>
 80038aa:	2b16      	cmp	r3, #22
 80038ac:	d11d      	bne.n	80038ea <__sflush_r+0xe6>
 80038ae:	602f      	str	r7, [r5, #0]
 80038b0:	2000      	movs	r0, #0
 80038b2:	e021      	b.n	80038f8 <__sflush_r+0xf4>
 80038b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038b8:	b21b      	sxth	r3, r3
 80038ba:	e01a      	b.n	80038f2 <__sflush_r+0xee>
 80038bc:	690f      	ldr	r7, [r1, #16]
 80038be:	2f00      	cmp	r7, #0
 80038c0:	d0f6      	beq.n	80038b0 <__sflush_r+0xac>
 80038c2:	0793      	lsls	r3, r2, #30
 80038c4:	bf18      	it	ne
 80038c6:	2300      	movne	r3, #0
 80038c8:	680e      	ldr	r6, [r1, #0]
 80038ca:	bf08      	it	eq
 80038cc:	694b      	ldreq	r3, [r1, #20]
 80038ce:	1bf6      	subs	r6, r6, r7
 80038d0:	600f      	str	r7, [r1, #0]
 80038d2:	608b      	str	r3, [r1, #8]
 80038d4:	2e00      	cmp	r6, #0
 80038d6:	ddeb      	ble.n	80038b0 <__sflush_r+0xac>
 80038d8:	4633      	mov	r3, r6
 80038da:	463a      	mov	r2, r7
 80038dc:	4628      	mov	r0, r5
 80038de:	6a21      	ldr	r1, [r4, #32]
 80038e0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80038e4:	47e0      	blx	ip
 80038e6:	2800      	cmp	r0, #0
 80038e8:	dc07      	bgt.n	80038fa <__sflush_r+0xf6>
 80038ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038f2:	f04f 30ff 	mov.w	r0, #4294967295
 80038f6:	81a3      	strh	r3, [r4, #12]
 80038f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038fa:	4407      	add	r7, r0
 80038fc:	1a36      	subs	r6, r6, r0
 80038fe:	e7e9      	b.n	80038d4 <__sflush_r+0xd0>
 8003900:	20400001 	.word	0x20400001

08003904 <_fflush_r>:
 8003904:	b538      	push	{r3, r4, r5, lr}
 8003906:	690b      	ldr	r3, [r1, #16]
 8003908:	4605      	mov	r5, r0
 800390a:	460c      	mov	r4, r1
 800390c:	b913      	cbnz	r3, 8003914 <_fflush_r+0x10>
 800390e:	2500      	movs	r5, #0
 8003910:	4628      	mov	r0, r5
 8003912:	bd38      	pop	{r3, r4, r5, pc}
 8003914:	b118      	cbz	r0, 800391e <_fflush_r+0x1a>
 8003916:	6a03      	ldr	r3, [r0, #32]
 8003918:	b90b      	cbnz	r3, 800391e <_fflush_r+0x1a>
 800391a:	f7ff f9b3 	bl	8002c84 <__sinit>
 800391e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0f3      	beq.n	800390e <_fflush_r+0xa>
 8003926:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003928:	07d0      	lsls	r0, r2, #31
 800392a:	d404      	bmi.n	8003936 <_fflush_r+0x32>
 800392c:	0599      	lsls	r1, r3, #22
 800392e:	d402      	bmi.n	8003936 <_fflush_r+0x32>
 8003930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003932:	f7ff fb9e 	bl	8003072 <__retarget_lock_acquire_recursive>
 8003936:	4628      	mov	r0, r5
 8003938:	4621      	mov	r1, r4
 800393a:	f7ff ff63 	bl	8003804 <__sflush_r>
 800393e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003940:	4605      	mov	r5, r0
 8003942:	07da      	lsls	r2, r3, #31
 8003944:	d4e4      	bmi.n	8003910 <_fflush_r+0xc>
 8003946:	89a3      	ldrh	r3, [r4, #12]
 8003948:	059b      	lsls	r3, r3, #22
 800394a:	d4e1      	bmi.n	8003910 <_fflush_r+0xc>
 800394c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800394e:	f7ff fb91 	bl	8003074 <__retarget_lock_release_recursive>
 8003952:	e7dd      	b.n	8003910 <_fflush_r+0xc>

08003954 <__swhatbuf_r>:
 8003954:	b570      	push	{r4, r5, r6, lr}
 8003956:	460c      	mov	r4, r1
 8003958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800395c:	4615      	mov	r5, r2
 800395e:	2900      	cmp	r1, #0
 8003960:	461e      	mov	r6, r3
 8003962:	b096      	sub	sp, #88	@ 0x58
 8003964:	da0c      	bge.n	8003980 <__swhatbuf_r+0x2c>
 8003966:	89a3      	ldrh	r3, [r4, #12]
 8003968:	2100      	movs	r1, #0
 800396a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800396e:	bf14      	ite	ne
 8003970:	2340      	movne	r3, #64	@ 0x40
 8003972:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003976:	2000      	movs	r0, #0
 8003978:	6031      	str	r1, [r6, #0]
 800397a:	602b      	str	r3, [r5, #0]
 800397c:	b016      	add	sp, #88	@ 0x58
 800397e:	bd70      	pop	{r4, r5, r6, pc}
 8003980:	466a      	mov	r2, sp
 8003982:	f000 f849 	bl	8003a18 <_fstat_r>
 8003986:	2800      	cmp	r0, #0
 8003988:	dbed      	blt.n	8003966 <__swhatbuf_r+0x12>
 800398a:	9901      	ldr	r1, [sp, #4]
 800398c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003990:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003994:	4259      	negs	r1, r3
 8003996:	4159      	adcs	r1, r3
 8003998:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800399c:	e7eb      	b.n	8003976 <__swhatbuf_r+0x22>

0800399e <__smakebuf_r>:
 800399e:	898b      	ldrh	r3, [r1, #12]
 80039a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039a2:	079d      	lsls	r5, r3, #30
 80039a4:	4606      	mov	r6, r0
 80039a6:	460c      	mov	r4, r1
 80039a8:	d507      	bpl.n	80039ba <__smakebuf_r+0x1c>
 80039aa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80039ae:	6023      	str	r3, [r4, #0]
 80039b0:	6123      	str	r3, [r4, #16]
 80039b2:	2301      	movs	r3, #1
 80039b4:	6163      	str	r3, [r4, #20]
 80039b6:	b003      	add	sp, #12
 80039b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ba:	466a      	mov	r2, sp
 80039bc:	ab01      	add	r3, sp, #4
 80039be:	f7ff ffc9 	bl	8003954 <__swhatbuf_r>
 80039c2:	9f00      	ldr	r7, [sp, #0]
 80039c4:	4605      	mov	r5, r0
 80039c6:	4639      	mov	r1, r7
 80039c8:	4630      	mov	r0, r6
 80039ca:	f7ff fbbf 	bl	800314c <_malloc_r>
 80039ce:	b948      	cbnz	r0, 80039e4 <__smakebuf_r+0x46>
 80039d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039d4:	059a      	lsls	r2, r3, #22
 80039d6:	d4ee      	bmi.n	80039b6 <__smakebuf_r+0x18>
 80039d8:	f023 0303 	bic.w	r3, r3, #3
 80039dc:	f043 0302 	orr.w	r3, r3, #2
 80039e0:	81a3      	strh	r3, [r4, #12]
 80039e2:	e7e2      	b.n	80039aa <__smakebuf_r+0xc>
 80039e4:	89a3      	ldrh	r3, [r4, #12]
 80039e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80039ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039ee:	81a3      	strh	r3, [r4, #12]
 80039f0:	9b01      	ldr	r3, [sp, #4]
 80039f2:	6020      	str	r0, [r4, #0]
 80039f4:	b15b      	cbz	r3, 8003a0e <__smakebuf_r+0x70>
 80039f6:	4630      	mov	r0, r6
 80039f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039fc:	f000 f81e 	bl	8003a3c <_isatty_r>
 8003a00:	b128      	cbz	r0, 8003a0e <__smakebuf_r+0x70>
 8003a02:	89a3      	ldrh	r3, [r4, #12]
 8003a04:	f023 0303 	bic.w	r3, r3, #3
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	81a3      	strh	r3, [r4, #12]
 8003a0e:	89a3      	ldrh	r3, [r4, #12]
 8003a10:	431d      	orrs	r5, r3
 8003a12:	81a5      	strh	r5, [r4, #12]
 8003a14:	e7cf      	b.n	80039b6 <__smakebuf_r+0x18>
	...

08003a18 <_fstat_r>:
 8003a18:	b538      	push	{r3, r4, r5, lr}
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	4d06      	ldr	r5, [pc, #24]	@ (8003a38 <_fstat_r+0x20>)
 8003a1e:	4604      	mov	r4, r0
 8003a20:	4608      	mov	r0, r1
 8003a22:	4611      	mov	r1, r2
 8003a24:	602b      	str	r3, [r5, #0]
 8003a26:	f7fd f93b 	bl	8000ca0 <_fstat>
 8003a2a:	1c43      	adds	r3, r0, #1
 8003a2c:	d102      	bne.n	8003a34 <_fstat_r+0x1c>
 8003a2e:	682b      	ldr	r3, [r5, #0]
 8003a30:	b103      	cbz	r3, 8003a34 <_fstat_r+0x1c>
 8003a32:	6023      	str	r3, [r4, #0]
 8003a34:	bd38      	pop	{r3, r4, r5, pc}
 8003a36:	bf00      	nop
 8003a38:	20000244 	.word	0x20000244

08003a3c <_isatty_r>:
 8003a3c:	b538      	push	{r3, r4, r5, lr}
 8003a3e:	2300      	movs	r3, #0
 8003a40:	4d05      	ldr	r5, [pc, #20]	@ (8003a58 <_isatty_r+0x1c>)
 8003a42:	4604      	mov	r4, r0
 8003a44:	4608      	mov	r0, r1
 8003a46:	602b      	str	r3, [r5, #0]
 8003a48:	f7fd f939 	bl	8000cbe <_isatty>
 8003a4c:	1c43      	adds	r3, r0, #1
 8003a4e:	d102      	bne.n	8003a56 <_isatty_r+0x1a>
 8003a50:	682b      	ldr	r3, [r5, #0]
 8003a52:	b103      	cbz	r3, 8003a56 <_isatty_r+0x1a>
 8003a54:	6023      	str	r3, [r4, #0]
 8003a56:	bd38      	pop	{r3, r4, r5, pc}
 8003a58:	20000244 	.word	0x20000244

08003a5c <_sbrk_r>:
 8003a5c:	b538      	push	{r3, r4, r5, lr}
 8003a5e:	2300      	movs	r3, #0
 8003a60:	4d05      	ldr	r5, [pc, #20]	@ (8003a78 <_sbrk_r+0x1c>)
 8003a62:	4604      	mov	r4, r0
 8003a64:	4608      	mov	r0, r1
 8003a66:	602b      	str	r3, [r5, #0]
 8003a68:	f7fd f940 	bl	8000cec <_sbrk>
 8003a6c:	1c43      	adds	r3, r0, #1
 8003a6e:	d102      	bne.n	8003a76 <_sbrk_r+0x1a>
 8003a70:	682b      	ldr	r3, [r5, #0]
 8003a72:	b103      	cbz	r3, 8003a76 <_sbrk_r+0x1a>
 8003a74:	6023      	str	r3, [r4, #0]
 8003a76:	bd38      	pop	{r3, r4, r5, pc}
 8003a78:	20000244 	.word	0x20000244

08003a7c <memchr>:
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	b510      	push	{r4, lr}
 8003a80:	b2c9      	uxtb	r1, r1
 8003a82:	4402      	add	r2, r0
 8003a84:	4293      	cmp	r3, r2
 8003a86:	4618      	mov	r0, r3
 8003a88:	d101      	bne.n	8003a8e <memchr+0x12>
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	e003      	b.n	8003a96 <memchr+0x1a>
 8003a8e:	7804      	ldrb	r4, [r0, #0]
 8003a90:	3301      	adds	r3, #1
 8003a92:	428c      	cmp	r4, r1
 8003a94:	d1f6      	bne.n	8003a84 <memchr+0x8>
 8003a96:	bd10      	pop	{r4, pc}

08003a98 <_init>:
 8003a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9a:	bf00      	nop
 8003a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a9e:	bc08      	pop	{r3}
 8003aa0:	469e      	mov	lr, r3
 8003aa2:	4770      	bx	lr

08003aa4 <_fini>:
 8003aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa6:	bf00      	nop
 8003aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aaa:	bc08      	pop	{r3}
 8003aac:	469e      	mov	lr, r3
 8003aae:	4770      	bx	lr
