
Task3_s3_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003040  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800314c  0800314c  0000414c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031f8  080031f8  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080031f8  080031f8  00005068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080031f8  080031f8  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031f8  080031f8  000041f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031fc  080031fc  000041fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003200  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000068  08003268  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08003268  00005278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008587  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001766  00000000  00000000  0000d618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  0000ed80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000069a  00000000  00000000  0000f628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176dd  00000000  00000000  0000fcc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ba4  00000000  00000000  0002739f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008336b  00000000  00000000  00030f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b42ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a54  00000000  00000000  000b42f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000b6d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003134 	.word	0x08003134

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003134 	.word	0x08003134

0800014c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) //makes printf work with uart
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f04f 33ff 	mov.w	r3, #4294967295
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <__io_putchar+0x20>)
 800015e:	f001 fde8 	bl	8001d32 <HAL_UART_Transmit>
	return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200000dc 	.word	0x200000dc

08000170 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000170:	b5b0      	push	{r4, r5, r7, lr}
 8000172:	b08a      	sub	sp, #40	@ 0x28
 8000174:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000176:	f000 fb97 	bl	80008a8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800017a:	f000 f8f5 	bl	8000368 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800017e:	f000 f98f 	bl	80004a0 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000182:	f000 f92d 	bl	80003e0 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8000186:	f000 f961 	bl	800044c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	uint64_t txData = 0;
 800018a:	f04f 0200 	mov.w	r2, #0
 800018e:	f04f 0300 	mov.w	r3, #0
 8000192:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint64_t rxData = 0;
 8000196:	f04f 0200 	mov.w	r2, #0
 800019a:	f04f 0300 	mov.w	r3, #0
 800019e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint8_t selection = 1;
 80001a2:	2301      	movs	r3, #1
 80001a4:	71fb      	strb	r3, [r7, #7]
	uint16_t bat_volt = 0;
 80001a6:	2300      	movs	r3, #0
 80001a8:	83fb      	strh	r3, [r7, #30]
	uint16_t speed = 0;
 80001aa:	2300      	movs	r3, #0
 80001ac:	83bb      	strh	r3, [r7, #28]
	uint16_t engine_temp = 0;
 80001ae:	2300      	movs	r3, #0
 80001b0:	837b      	strh	r3, [r7, #26]
	uint16_t throttle_Pos = 0;
 80001b2:	2300      	movs	r3, #0
 80001b4:	833b      	strh	r3, [r7, #24]
	uint32_t dummy = 0xffffffff;
 80001b6:	f04f 33ff 	mov.w	r3, #4294967295
 80001ba:	603b      	str	r3, [r7, #0]
	printf("System Start\r\n");
 80001bc:	4860      	ldr	r0, [pc, #384]	@ (8000340 <main+0x1d0>)
 80001be:	f002 f94d 	bl	800245c <puts>
	HAL_Delay(50);
 80001c2:	2032      	movs	r0, #50	@ 0x32
 80001c4:	f000 fbd2 	bl	800096c <HAL_Delay>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		HAL_UART_Receive(&huart1, &selection, 1, HAL_MAX_DELAY);
 80001c8:	1df9      	adds	r1, r7, #7
 80001ca:	f04f 33ff 	mov.w	r3, #4294967295
 80001ce:	2201      	movs	r2, #1
 80001d0:	485c      	ldr	r0, [pc, #368]	@ (8000344 <main+0x1d4>)
 80001d2:	f001 fe39 	bl	8001e48 <HAL_UART_Receive>
		if (selection >= '0') {
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80001da:	d903      	bls.n	80001e4 <main+0x74>
			selection -= '0'; //converte selection from ascii to normal digits
 80001dc:	79fb      	ldrb	r3, [r7, #7]
 80001de:	3b30      	subs	r3, #48	@ 0x30
 80001e0:	b2db      	uxtb	r3, r3
 80001e2:	71fb      	strb	r3, [r7, #7]
		}

		if (selection > 0 && selection <= 5) {
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d04d      	beq.n	8000286 <main+0x116>
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	2b05      	cmp	r3, #5
 80001ee:	d84a      	bhi.n	8000286 <main+0x116>
			txData = selection | 0x1000;
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80001f6:	17da      	asrs	r2, r3, #31
 80001f8:	461c      	mov	r4, r3
 80001fa:	4615      	mov	r5, r2
 80001fc:	e9c7 4504 	strd	r4, r5, [r7, #16]

			//transmit the current ID
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000200:	2200      	movs	r2, #0
 8000202:	2101      	movs	r1, #1
 8000204:	4850      	ldr	r0, [pc, #320]	@ (8000348 <main+0x1d8>)
 8000206:	f000 fe35 	bl	8000e74 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &txData,
 800020a:	f107 0208 	add.w	r2, r7, #8
 800020e:	f107 0110 	add.w	r1, r7, #16
 8000212:	f04f 33ff 	mov.w	r3, #4294967295
 8000216:	9300      	str	r3, [sp, #0]
 8000218:	2308      	movs	r3, #8
 800021a:	484c      	ldr	r0, [pc, #304]	@ (800034c <main+0x1dc>)
 800021c:	f001 fad6 	bl	80017cc <HAL_SPI_TransmitReceive>
					(uint8_t*) &rxData, sizeof(txData), HAL_MAX_DELAY);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000220:	2201      	movs	r2, #1
 8000222:	2101      	movs	r1, #1
 8000224:	4848      	ldr	r0, [pc, #288]	@ (8000348 <main+0x1d8>)
 8000226:	f000 fe25 	bl	8000e74 <HAL_GPIO_WritePin>

			HAL_Delay(10);
 800022a:	200a      	movs	r0, #10
 800022c:	f000 fb9e 	bl	800096c <HAL_Delay>

			//transmit any data to refresh the received data
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000230:	2200      	movs	r2, #0
 8000232:	2101      	movs	r1, #1
 8000234:	4844      	ldr	r0, [pc, #272]	@ (8000348 <main+0x1d8>)
 8000236:	f000 fe1d 	bl	8000e74 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &dummy,
 800023a:	f107 0208 	add.w	r2, r7, #8
 800023e:	4639      	mov	r1, r7
 8000240:	f04f 33ff 	mov.w	r3, #4294967295
 8000244:	9300      	str	r3, [sp, #0]
 8000246:	2308      	movs	r3, #8
 8000248:	4840      	ldr	r0, [pc, #256]	@ (800034c <main+0x1dc>)
 800024a:	f001 fabf 	bl	80017cc <HAL_SPI_TransmitReceive>
					(uint8_t*) &rxData, sizeof(txData), HAL_MAX_DELAY);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800024e:	2201      	movs	r2, #1
 8000250:	2101      	movs	r1, #1
 8000252:	483d      	ldr	r0, [pc, #244]	@ (8000348 <main+0x1d8>)
 8000254:	f000 fe0e 	bl	8000e74 <HAL_GPIO_WritePin>

			HAL_Delay(10);
 8000258:	200a      	movs	r0, #10
 800025a:	f000 fb87 	bl	800096c <HAL_Delay>

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800025e:	2200      	movs	r2, #0
 8000260:	2101      	movs	r1, #1
 8000262:	4839      	ldr	r0, [pc, #228]	@ (8000348 <main+0x1d8>)
 8000264:	f000 fe06 	bl	8000e74 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &dummy,
 8000268:	f107 0208 	add.w	r2, r7, #8
 800026c:	4639      	mov	r1, r7
 800026e:	f04f 33ff 	mov.w	r3, #4294967295
 8000272:	9300      	str	r3, [sp, #0]
 8000274:	2308      	movs	r3, #8
 8000276:	4835      	ldr	r0, [pc, #212]	@ (800034c <main+0x1dc>)
 8000278:	f001 faa8 	bl	80017cc <HAL_SPI_TransmitReceive>
					(uint8_t*) &rxData, sizeof(txData), HAL_MAX_DELAY);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800027c:	2201      	movs	r2, #1
 800027e:	2101      	movs	r1, #1
 8000280:	4831      	ldr	r0, [pc, #196]	@ (8000348 <main+0x1d8>)
 8000282:	f000 fdf7 	bl	8000e74 <HAL_GPIO_WritePin>
		}

		speed = ((0x0fff) & (rxData >> 16)); //0x0fff are 12 bits mask
 8000286:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800028a:	f04f 0200 	mov.w	r2, #0
 800028e:	f04f 0300 	mov.w	r3, #0
 8000292:	0c02      	lsrs	r2, r0, #16
 8000294:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000298:	0c0b      	lsrs	r3, r1, #16
 800029a:	b293      	uxth	r3, r2
 800029c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002a0:	83bb      	strh	r3, [r7, #28]
		bat_volt = ((0x0fff) & (rxData >> 28));
 80002a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80002a6:	f04f 0200 	mov.w	r2, #0
 80002aa:	f04f 0300 	mov.w	r3, #0
 80002ae:	0f02      	lsrs	r2, r0, #28
 80002b0:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80002b4:	0f0b      	lsrs	r3, r1, #28
 80002b6:	b293      	uxth	r3, r2
 80002b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002bc:	83fb      	strh	r3, [r7, #30]
		throttle_Pos = ((0x00ff) & (rxData >> 40)); //0x00ff are 8 bits mask
 80002be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80002c2:	f04f 0200 	mov.w	r2, #0
 80002c6:	f04f 0300 	mov.w	r3, #0
 80002ca:	0a0a      	lsrs	r2, r1, #8
 80002cc:	2300      	movs	r3, #0
 80002ce:	b293      	uxth	r3, r2
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	833b      	strh	r3, [r7, #24]
		engine_temp = ((0x0fff) & (rxData >> 48));
 80002d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80002d8:	f04f 0200 	mov.w	r2, #0
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	0c0a      	lsrs	r2, r1, #16
 80002e2:	2300      	movs	r3, #0
 80002e4:	b293      	uxth	r3, r2
 80002e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002ea:	837b      	strh	r3, [r7, #26]

		printf("Speed= %ld", speed);
 80002ec:	8bbb      	ldrh	r3, [r7, #28]
 80002ee:	4619      	mov	r1, r3
 80002f0:	4817      	ldr	r0, [pc, #92]	@ (8000350 <main+0x1e0>)
 80002f2:	f002 f84b 	bl	800238c <iprintf>
		printf(" Volt= %ld.%ld", bat_volt / 10, bat_volt % 10);
 80002f6:	8bfb      	ldrh	r3, [r7, #30]
 80002f8:	4a16      	ldr	r2, [pc, #88]	@ (8000354 <main+0x1e4>)
 80002fa:	fba2 2303 	umull	r2, r3, r2, r3
 80002fe:	08db      	lsrs	r3, r3, #3
 8000300:	b29b      	uxth	r3, r3
 8000302:	4618      	mov	r0, r3
 8000304:	8bfa      	ldrh	r2, [r7, #30]
 8000306:	4b13      	ldr	r3, [pc, #76]	@ (8000354 <main+0x1e4>)
 8000308:	fba3 1302 	umull	r1, r3, r3, r2
 800030c:	08d9      	lsrs	r1, r3, #3
 800030e:	460b      	mov	r3, r1
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	440b      	add	r3, r1
 8000314:	005b      	lsls	r3, r3, #1
 8000316:	1ad3      	subs	r3, r2, r3
 8000318:	b29b      	uxth	r3, r3
 800031a:	461a      	mov	r2, r3
 800031c:	4601      	mov	r1, r0
 800031e:	480e      	ldr	r0, [pc, #56]	@ (8000358 <main+0x1e8>)
 8000320:	f002 f834 	bl	800238c <iprintf>
		printf(" Temp= %ld", engine_temp);
 8000324:	8b7b      	ldrh	r3, [r7, #26]
 8000326:	4619      	mov	r1, r3
 8000328:	480c      	ldr	r0, [pc, #48]	@ (800035c <main+0x1ec>)
 800032a:	f002 f82f 	bl	800238c <iprintf>
		printf(" Throttle= %ld", throttle_Pos);
 800032e:	8b3b      	ldrh	r3, [r7, #24]
 8000330:	4619      	mov	r1, r3
 8000332:	480b      	ldr	r0, [pc, #44]	@ (8000360 <main+0x1f0>)
 8000334:	f002 f82a 	bl	800238c <iprintf>
		printf("\r\n");
 8000338:	480a      	ldr	r0, [pc, #40]	@ (8000364 <main+0x1f4>)
 800033a:	f002 f88f 	bl	800245c <puts>
		HAL_UART_Receive(&huart1, &selection, 1, HAL_MAX_DELAY);
 800033e:	e743      	b.n	80001c8 <main+0x58>
 8000340:	0800314c 	.word	0x0800314c
 8000344:	200000dc 	.word	0x200000dc
 8000348:	40010c00 	.word	0x40010c00
 800034c:	20000084 	.word	0x20000084
 8000350:	0800315c 	.word	0x0800315c
 8000354:	cccccccd 	.word	0xcccccccd
 8000358:	08003168 	.word	0x08003168
 800035c:	08003178 	.word	0x08003178
 8000360:	08003184 	.word	0x08003184
 8000364:	08003194 	.word	0x08003194

08000368 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b090      	sub	sp, #64	@ 0x40
 800036c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800036e:	f107 0318 	add.w	r3, r7, #24
 8000372:	2228      	movs	r2, #40	@ 0x28
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f002 f950 	bl	800261c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
 8000388:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800038a:	2302      	movs	r3, #2
 800038c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038e:	2301      	movs	r3, #1
 8000390:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000392:	2310      	movs	r3, #16
 8000394:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000396:	2300      	movs	r3, #0
 8000398:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800039a:	f107 0318 	add.w	r3, r7, #24
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 fd80 	bl	8000ea4 <HAL_RCC_OscConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x46>
		Error_Handler();
 80003aa:	f000 f8b7 	bl	800051c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80003ae:	230f      	movs	r3, #15
 80003b0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003be:	2300      	movs	r3, #0
 80003c0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 ffee 	bl	80013a8 <HAL_RCC_ClockConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0x6e>
		Error_Handler();
 80003d2:	f000 f8a3 	bl	800051c <Error_Handler>
	}
}
 80003d6:	bf00      	nop
 80003d8:	3740      	adds	r7, #64	@ 0x40
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
	...

080003e0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80003e4:	4b17      	ldr	r3, [pc, #92]	@ (8000444 <MX_SPI1_Init+0x64>)
 80003e6:	4a18      	ldr	r2, [pc, #96]	@ (8000448 <MX_SPI1_Init+0x68>)
 80003e8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80003ea:	4b16      	ldr	r3, [pc, #88]	@ (8000444 <MX_SPI1_Init+0x64>)
 80003ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80003f0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003f2:	4b14      	ldr	r3, [pc, #80]	@ (8000444 <MX_SPI1_Init+0x64>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003f8:	4b12      	ldr	r3, [pc, #72]	@ (8000444 <MX_SPI1_Init+0x64>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003fe:	4b11      	ldr	r3, [pc, #68]	@ (8000444 <MX_SPI1_Init+0x64>)
 8000400:	2200      	movs	r2, #0
 8000402:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000404:	4b0f      	ldr	r3, [pc, #60]	@ (8000444 <MX_SPI1_Init+0x64>)
 8000406:	2200      	movs	r2, #0
 8000408:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800040a:	4b0e      	ldr	r3, [pc, #56]	@ (8000444 <MX_SPI1_Init+0x64>)
 800040c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000410:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000412:	4b0c      	ldr	r3, [pc, #48]	@ (8000444 <MX_SPI1_Init+0x64>)
 8000414:	2238      	movs	r2, #56	@ 0x38
 8000416:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000418:	4b0a      	ldr	r3, [pc, #40]	@ (8000444 <MX_SPI1_Init+0x64>)
 800041a:	2200      	movs	r2, #0
 800041c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800041e:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <MX_SPI1_Init+0x64>)
 8000420:	2200      	movs	r2, #0
 8000422:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000424:	4b07      	ldr	r3, [pc, #28]	@ (8000444 <MX_SPI1_Init+0x64>)
 8000426:	2200      	movs	r2, #0
 8000428:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 800042a:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <MX_SPI1_Init+0x64>)
 800042c:	220a      	movs	r2, #10
 800042e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000430:	4804      	ldr	r0, [pc, #16]	@ (8000444 <MX_SPI1_Init+0x64>)
 8000432:	f001 f947 	bl	80016c4 <HAL_SPI_Init>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_SPI1_Init+0x60>
		Error_Handler();
 800043c:	f000 f86e 	bl	800051c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000440:	bf00      	nop
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000084 	.word	0x20000084
 8000448:	40013000 	.word	0x40013000

0800044c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000450:	4b11      	ldr	r3, [pc, #68]	@ (8000498 <MX_USART1_UART_Init+0x4c>)
 8000452:	4a12      	ldr	r2, [pc, #72]	@ (800049c <MX_USART1_UART_Init+0x50>)
 8000454:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000456:	4b10      	ldr	r3, [pc, #64]	@ (8000498 <MX_USART1_UART_Init+0x4c>)
 8000458:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800045c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800045e:	4b0e      	ldr	r3, [pc, #56]	@ (8000498 <MX_USART1_UART_Init+0x4c>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000464:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <MX_USART1_UART_Init+0x4c>)
 8000466:	2200      	movs	r2, #0
 8000468:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800046a:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <MX_USART1_UART_Init+0x4c>)
 800046c:	2200      	movs	r2, #0
 800046e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000470:	4b09      	ldr	r3, [pc, #36]	@ (8000498 <MX_USART1_UART_Init+0x4c>)
 8000472:	220c      	movs	r2, #12
 8000474:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000476:	4b08      	ldr	r3, [pc, #32]	@ (8000498 <MX_USART1_UART_Init+0x4c>)
 8000478:	2200      	movs	r2, #0
 800047a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800047c:	4b06      	ldr	r3, [pc, #24]	@ (8000498 <MX_USART1_UART_Init+0x4c>)
 800047e:	2200      	movs	r2, #0
 8000480:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000482:	4805      	ldr	r0, [pc, #20]	@ (8000498 <MX_USART1_UART_Init+0x4c>)
 8000484:	f001 fc05 	bl	8001c92 <HAL_UART_Init>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800048e:	f000 f845 	bl	800051c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	200000dc 	.word	0x200000dc
 800049c:	40013800 	.word	0x40013800

080004a0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80004a6:	f107 0308 	add.w	r3, r7, #8
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004b4:	4b17      	ldr	r3, [pc, #92]	@ (8000514 <MX_GPIO_Init+0x74>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a16      	ldr	r2, [pc, #88]	@ (8000514 <MX_GPIO_Init+0x74>)
 80004ba:	f043 0304 	orr.w	r3, r3, #4
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b14      	ldr	r3, [pc, #80]	@ (8000514 <MX_GPIO_Init+0x74>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0304 	and.w	r3, r3, #4
 80004c8:	607b      	str	r3, [r7, #4]
 80004ca:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80004cc:	4b11      	ldr	r3, [pc, #68]	@ (8000514 <MX_GPIO_Init+0x74>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a10      	ldr	r2, [pc, #64]	@ (8000514 <MX_GPIO_Init+0x74>)
 80004d2:	f043 0308 	orr.w	r3, r3, #8
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000514 <MX_GPIO_Init+0x74>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0308 	and.w	r3, r3, #8
 80004e0:	603b      	str	r3, [r7, #0]
 80004e2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2101      	movs	r1, #1
 80004e8:	480b      	ldr	r0, [pc, #44]	@ (8000518 <MX_GPIO_Init+0x78>)
 80004ea:	f000 fcc3 	bl	8000e74 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004ee:	2301      	movs	r3, #1
 80004f0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f2:	2301      	movs	r3, #1
 80004f4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fa:	2302      	movs	r3, #2
 80004fc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004fe:	f107 0308 	add.w	r3, r7, #8
 8000502:	4619      	mov	r1, r3
 8000504:	4804      	ldr	r0, [pc, #16]	@ (8000518 <MX_GPIO_Init+0x78>)
 8000506:	f000 fb39 	bl	8000b7c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 800050a:	bf00      	nop
 800050c:	3718      	adds	r7, #24
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40021000 	.word	0x40021000
 8000518:	40010c00 	.word	0x40010c00

0800051c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000520:	b672      	cpsid	i
}
 8000522:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <Error_Handler+0x8>

08000528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800052e:	4b15      	ldr	r3, [pc, #84]	@ (8000584 <HAL_MspInit+0x5c>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	4a14      	ldr	r2, [pc, #80]	@ (8000584 <HAL_MspInit+0x5c>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6193      	str	r3, [r2, #24]
 800053a:	4b12      	ldr	r3, [pc, #72]	@ (8000584 <HAL_MspInit+0x5c>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000546:	4b0f      	ldr	r3, [pc, #60]	@ (8000584 <HAL_MspInit+0x5c>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	4a0e      	ldr	r2, [pc, #56]	@ (8000584 <HAL_MspInit+0x5c>)
 800054c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000550:	61d3      	str	r3, [r2, #28]
 8000552:	4b0c      	ldr	r3, [pc, #48]	@ (8000584 <HAL_MspInit+0x5c>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800055e:	4b0a      	ldr	r3, [pc, #40]	@ (8000588 <HAL_MspInit+0x60>)
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	4a04      	ldr	r2, [pc, #16]	@ (8000588 <HAL_MspInit+0x60>)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057a:	bf00      	nop
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	40021000 	.word	0x40021000
 8000588:	40010000 	.word	0x40010000

0800058c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a1b      	ldr	r2, [pc, #108]	@ (8000614 <HAL_SPI_MspInit+0x88>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d12f      	bne.n	800060c <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000618 <HAL_SPI_MspInit+0x8c>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a19      	ldr	r2, [pc, #100]	@ (8000618 <HAL_SPI_MspInit+0x8c>)
 80005b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b17      	ldr	r3, [pc, #92]	@ (8000618 <HAL_SPI_MspInit+0x8c>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c4:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <HAL_SPI_MspInit+0x8c>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a13      	ldr	r2, [pc, #76]	@ (8000618 <HAL_SPI_MspInit+0x8c>)
 80005ca:	f043 0304 	orr.w	r3, r3, #4
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <HAL_SPI_MspInit+0x8c>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0304 	and.w	r3, r3, #4
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80005dc:	23a0      	movs	r3, #160	@ 0xa0
 80005de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e0:	2302      	movs	r3, #2
 80005e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e4:	2303      	movs	r3, #3
 80005e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	4619      	mov	r1, r3
 80005ee:	480b      	ldr	r0, [pc, #44]	@ (800061c <HAL_SPI_MspInit+0x90>)
 80005f0:	f000 fac4 	bl	8000b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005f4:	2340      	movs	r3, #64	@ 0x40
 80005f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4619      	mov	r1, r3
 8000606:	4805      	ldr	r0, [pc, #20]	@ (800061c <HAL_SPI_MspInit+0x90>)
 8000608:	f000 fab8 	bl	8000b7c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800060c:	bf00      	nop
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40013000 	.word	0x40013000
 8000618:	40021000 	.word	0x40021000
 800061c:	40010800 	.word	0x40010800

08000620 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a1c      	ldr	r2, [pc, #112]	@ (80006ac <HAL_UART_MspInit+0x8c>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d131      	bne.n	80006a4 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000640:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <HAL_UART_MspInit+0x90>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a1a      	ldr	r2, [pc, #104]	@ (80006b0 <HAL_UART_MspInit+0x90>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <HAL_UART_MspInit+0x90>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000658:	4b15      	ldr	r3, [pc, #84]	@ (80006b0 <HAL_UART_MspInit+0x90>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a14      	ldr	r2, [pc, #80]	@ (80006b0 <HAL_UART_MspInit+0x90>)
 800065e:	f043 0304 	orr.w	r3, r3, #4
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <HAL_UART_MspInit+0x90>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f003 0304 	and.w	r3, r3, #4
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000670:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000674:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000676:	2302      	movs	r3, #2
 8000678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800067a:	2303      	movs	r3, #3
 800067c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	4619      	mov	r1, r3
 8000684:	480b      	ldr	r0, [pc, #44]	@ (80006b4 <HAL_UART_MspInit+0x94>)
 8000686:	f000 fa79 	bl	8000b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800068a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800068e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	f107 0310 	add.w	r3, r7, #16
 800069c:	4619      	mov	r1, r3
 800069e:	4805      	ldr	r0, [pc, #20]	@ (80006b4 <HAL_UART_MspInit+0x94>)
 80006a0:	f000 fa6c 	bl	8000b7c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80006a4:	bf00      	nop
 80006a6:	3720      	adds	r7, #32
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40013800 	.word	0x40013800
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40010800 	.word	0x40010800

080006b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <NMI_Handler+0x4>

080006c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <HardFault_Handler+0x4>

080006c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <MemManage_Handler+0x4>

080006d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <BusFault_Handler+0x4>

080006d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <UsageFault_Handler+0x4>

080006e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000708:	f000 f914 	bl	8000934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}

08000710 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	e00a      	b.n	8000738 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000722:	f3af 8000 	nop.w
 8000726:	4601      	mov	r1, r0
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	1c5a      	adds	r2, r3, #1
 800072c:	60ba      	str	r2, [r7, #8]
 800072e:	b2ca      	uxtb	r2, r1
 8000730:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	3301      	adds	r3, #1
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	429a      	cmp	r2, r3
 800073e:	dbf0      	blt.n	8000722 <_read+0x12>
  }

  return len;
 8000740:	687b      	ldr	r3, [r7, #4]
}
 8000742:	4618      	mov	r0, r3
 8000744:	3718      	adds	r7, #24
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b086      	sub	sp, #24
 800074e:	af00      	add	r7, sp, #0
 8000750:	60f8      	str	r0, [r7, #12]
 8000752:	60b9      	str	r1, [r7, #8]
 8000754:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	e009      	b.n	8000770 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	60ba      	str	r2, [r7, #8]
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff fcf1 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	3301      	adds	r3, #1
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697a      	ldr	r2, [r7, #20]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	429a      	cmp	r2, r3
 8000776:	dbf1      	blt.n	800075c <_write+0x12>
  }
  return len;
 8000778:	687b      	ldr	r3, [r7, #4]
}
 800077a:	4618      	mov	r0, r3
 800077c:	3718      	adds	r7, #24
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <_close>:

int _close(int file)
{
 8000782:	b480      	push	{r7}
 8000784:	b083      	sub	sp, #12
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800078a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800078e:	4618      	mov	r0, r3
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007a8:	605a      	str	r2, [r3, #4]
  return 0;
 80007aa:	2300      	movs	r3, #0
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr

080007b6 <_isatty>:

int _isatty(int file)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b083      	sub	sp, #12
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007be:	2301      	movs	r3, #1
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b085      	sub	sp, #20
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	60f8      	str	r0, [r7, #12]
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007d6:	2300      	movs	r3, #0
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
	...

080007e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007ec:	4a14      	ldr	r2, [pc, #80]	@ (8000840 <_sbrk+0x5c>)
 80007ee:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <_sbrk+0x60>)
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007f8:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <_sbrk+0x64>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d102      	bne.n	8000806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000800:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <_sbrk+0x64>)
 8000802:	4a12      	ldr	r2, [pc, #72]	@ (800084c <_sbrk+0x68>)
 8000804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000806:	4b10      	ldr	r3, [pc, #64]	@ (8000848 <_sbrk+0x64>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	693a      	ldr	r2, [r7, #16]
 8000810:	429a      	cmp	r2, r3
 8000812:	d207      	bcs.n	8000824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000814:	f001 ff50 	bl	80026b8 <__errno>
 8000818:	4603      	mov	r3, r0
 800081a:	220c      	movs	r2, #12
 800081c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800081e:	f04f 33ff 	mov.w	r3, #4294967295
 8000822:	e009      	b.n	8000838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000824:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <_sbrk+0x64>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800082a:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <_sbrk+0x64>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4413      	add	r3, r2
 8000832:	4a05      	ldr	r2, [pc, #20]	@ (8000848 <_sbrk+0x64>)
 8000834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000836:	68fb      	ldr	r3, [r7, #12]
}
 8000838:	4618      	mov	r0, r3
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20002800 	.word	0x20002800
 8000844:	00000400 	.word	0x00000400
 8000848:	20000124 	.word	0x20000124
 800084c:	20000278 	.word	0x20000278

08000850 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800085c:	f7ff fff8 	bl	8000850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000860:	480b      	ldr	r0, [pc, #44]	@ (8000890 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000862:	490c      	ldr	r1, [pc, #48]	@ (8000894 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000864:	4a0c      	ldr	r2, [pc, #48]	@ (8000898 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000868:	e002      	b.n	8000870 <LoopCopyDataInit>

0800086a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800086c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086e:	3304      	adds	r3, #4

08000870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000874:	d3f9      	bcc.n	800086a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000876:	4a09      	ldr	r2, [pc, #36]	@ (800089c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000878:	4c09      	ldr	r4, [pc, #36]	@ (80008a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800087c:	e001      	b.n	8000882 <LoopFillZerobss>

0800087e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000880:	3204      	adds	r2, #4

08000882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000884:	d3fb      	bcc.n	800087e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000886:	f001 ff1d 	bl	80026c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088a:	f7ff fc71 	bl	8000170 <main>
  bx lr
 800088e:	4770      	bx	lr
  ldr r0, =_sdata
 8000890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000894:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000898:	08003200 	.word	0x08003200
  ldr r2, =_sbss
 800089c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008a0:	20000278 	.word	0x20000278

080008a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a4:	e7fe      	b.n	80008a4 <ADC1_2_IRQHandler>
	...

080008a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ac:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <HAL_Init+0x28>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a07      	ldr	r2, [pc, #28]	@ (80008d0 <HAL_Init+0x28>)
 80008b2:	f043 0310 	orr.w	r3, r3, #16
 80008b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b8:	2003      	movs	r0, #3
 80008ba:	f000 f92b 	bl	8000b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008be:	200f      	movs	r0, #15
 80008c0:	f000 f808 	bl	80008d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c4:	f7ff fe30 	bl	8000528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40022000 	.word	0x40022000

080008d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008dc:	4b12      	ldr	r3, [pc, #72]	@ (8000928 <HAL_InitTick+0x54>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <HAL_InitTick+0x58>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f935 	bl	8000b62 <HAL_SYSTICK_Config>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e00e      	b.n	8000920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b0f      	cmp	r3, #15
 8000906:	d80a      	bhi.n	800091e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000908:	2200      	movs	r2, #0
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	f04f 30ff 	mov.w	r0, #4294967295
 8000910:	f000 f90b 	bl	8000b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000914:	4a06      	ldr	r2, [pc, #24]	@ (8000930 <HAL_InitTick+0x5c>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091a:	2300      	movs	r3, #0
 800091c:	e000      	b.n	8000920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000000 	.word	0x20000000
 800092c:	20000008 	.word	0x20000008
 8000930:	20000004 	.word	0x20000004

08000934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000938:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <HAL_IncTick+0x1c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	4b05      	ldr	r3, [pc, #20]	@ (8000954 <HAL_IncTick+0x20>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4413      	add	r3, r2
 8000944:	4a03      	ldr	r2, [pc, #12]	@ (8000954 <HAL_IncTick+0x20>)
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	20000008 	.word	0x20000008
 8000954:	20000128 	.word	0x20000128

08000958 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b02      	ldr	r3, [pc, #8]	@ (8000968 <HAL_GetTick+0x10>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	20000128 	.word	0x20000128

0800096c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000974:	f7ff fff0 	bl	8000958 <HAL_GetTick>
 8000978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000984:	d005      	beq.n	8000992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000986:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <HAL_Delay+0x44>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	4413      	add	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000992:	bf00      	nop
 8000994:	f7ff ffe0 	bl	8000958 <HAL_GetTick>
 8000998:	4602      	mov	r2, r0
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d8f7      	bhi.n	8000994 <HAL_Delay+0x28>
  {
  }
}
 80009a4:	bf00      	nop
 80009a6:	bf00      	nop
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000008 	.word	0x20000008

080009b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c4:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009d0:	4013      	ands	r3, r2
 80009d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e6:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	60d3      	str	r3, [r2, #12]
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a00:	4b04      	ldr	r3, [pc, #16]	@ (8000a14 <__NVIC_GetPriorityGrouping+0x18>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	f003 0307 	and.w	r3, r3, #7
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	6039      	str	r1, [r7, #0]
 8000a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	db0a      	blt.n	8000a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	490c      	ldr	r1, [pc, #48]	@ (8000a64 <__NVIC_SetPriority+0x4c>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	0112      	lsls	r2, r2, #4
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a40:	e00a      	b.n	8000a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4908      	ldr	r1, [pc, #32]	@ (8000a68 <__NVIC_SetPriority+0x50>)
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	f003 030f 	and.w	r3, r3, #15
 8000a4e:	3b04      	subs	r3, #4
 8000a50:	0112      	lsls	r2, r2, #4
 8000a52:	b2d2      	uxtb	r2, r2
 8000a54:	440b      	add	r3, r1
 8000a56:	761a      	strb	r2, [r3, #24]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000e100 	.word	0xe000e100
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	@ 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	f1c3 0307 	rsb	r3, r3, #7
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	bf28      	it	cs
 8000a8a:	2304      	movcs	r3, #4
 8000a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3304      	adds	r3, #4
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d902      	bls.n	8000a9c <NVIC_EncodePriority+0x30>
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3b03      	subs	r3, #3
 8000a9a:	e000      	b.n	8000a9e <NVIC_EncodePriority+0x32>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	401a      	ands	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa01 f303 	lsl.w	r3, r1, r3
 8000abe:	43d9      	mvns	r1, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	4313      	orrs	r3, r2
         );
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3724      	adds	r7, #36	@ 0x24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ae0:	d301      	bcc.n	8000ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00f      	b.n	8000b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b10 <SysTick_Config+0x40>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aee:	210f      	movs	r1, #15
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f7ff ff90 	bl	8000a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af8:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <SysTick_Config+0x40>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afe:	4b04      	ldr	r3, [pc, #16]	@ (8000b10 <SysTick_Config+0x40>)
 8000b00:	2207      	movs	r2, #7
 8000b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	e000e010 	.word	0xe000e010

08000b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff49 	bl	80009b4 <__NVIC_SetPriorityGrouping>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b3c:	f7ff ff5e 	bl	80009fc <__NVIC_GetPriorityGrouping>
 8000b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	6978      	ldr	r0, [r7, #20]
 8000b48:	f7ff ff90 	bl	8000a6c <NVIC_EncodePriority>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b52:	4611      	mov	r1, r2
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff5f 	bl	8000a18 <__NVIC_SetPriority>
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ffb0 	bl	8000ad0 <SysTick_Config>
 8000b70:	4603      	mov	r3, r0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b08b      	sub	sp, #44	@ 0x2c
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b8e:	e161      	b.n	8000e54 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b90:	2201      	movs	r2, #1
 8000b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	69fa      	ldr	r2, [r7, #28]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	f040 8150 	bne.w	8000e4e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	4a97      	ldr	r2, [pc, #604]	@ (8000e10 <HAL_GPIO_Init+0x294>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d05e      	beq.n	8000c76 <HAL_GPIO_Init+0xfa>
 8000bb8:	4a95      	ldr	r2, [pc, #596]	@ (8000e10 <HAL_GPIO_Init+0x294>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d875      	bhi.n	8000caa <HAL_GPIO_Init+0x12e>
 8000bbe:	4a95      	ldr	r2, [pc, #596]	@ (8000e14 <HAL_GPIO_Init+0x298>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d058      	beq.n	8000c76 <HAL_GPIO_Init+0xfa>
 8000bc4:	4a93      	ldr	r2, [pc, #588]	@ (8000e14 <HAL_GPIO_Init+0x298>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d86f      	bhi.n	8000caa <HAL_GPIO_Init+0x12e>
 8000bca:	4a93      	ldr	r2, [pc, #588]	@ (8000e18 <HAL_GPIO_Init+0x29c>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d052      	beq.n	8000c76 <HAL_GPIO_Init+0xfa>
 8000bd0:	4a91      	ldr	r2, [pc, #580]	@ (8000e18 <HAL_GPIO_Init+0x29c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d869      	bhi.n	8000caa <HAL_GPIO_Init+0x12e>
 8000bd6:	4a91      	ldr	r2, [pc, #580]	@ (8000e1c <HAL_GPIO_Init+0x2a0>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d04c      	beq.n	8000c76 <HAL_GPIO_Init+0xfa>
 8000bdc:	4a8f      	ldr	r2, [pc, #572]	@ (8000e1c <HAL_GPIO_Init+0x2a0>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d863      	bhi.n	8000caa <HAL_GPIO_Init+0x12e>
 8000be2:	4a8f      	ldr	r2, [pc, #572]	@ (8000e20 <HAL_GPIO_Init+0x2a4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d046      	beq.n	8000c76 <HAL_GPIO_Init+0xfa>
 8000be8:	4a8d      	ldr	r2, [pc, #564]	@ (8000e20 <HAL_GPIO_Init+0x2a4>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d85d      	bhi.n	8000caa <HAL_GPIO_Init+0x12e>
 8000bee:	2b12      	cmp	r3, #18
 8000bf0:	d82a      	bhi.n	8000c48 <HAL_GPIO_Init+0xcc>
 8000bf2:	2b12      	cmp	r3, #18
 8000bf4:	d859      	bhi.n	8000caa <HAL_GPIO_Init+0x12e>
 8000bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8000bfc <HAL_GPIO_Init+0x80>)
 8000bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfc:	08000c77 	.word	0x08000c77
 8000c00:	08000c51 	.word	0x08000c51
 8000c04:	08000c63 	.word	0x08000c63
 8000c08:	08000ca5 	.word	0x08000ca5
 8000c0c:	08000cab 	.word	0x08000cab
 8000c10:	08000cab 	.word	0x08000cab
 8000c14:	08000cab 	.word	0x08000cab
 8000c18:	08000cab 	.word	0x08000cab
 8000c1c:	08000cab 	.word	0x08000cab
 8000c20:	08000cab 	.word	0x08000cab
 8000c24:	08000cab 	.word	0x08000cab
 8000c28:	08000cab 	.word	0x08000cab
 8000c2c:	08000cab 	.word	0x08000cab
 8000c30:	08000cab 	.word	0x08000cab
 8000c34:	08000cab 	.word	0x08000cab
 8000c38:	08000cab 	.word	0x08000cab
 8000c3c:	08000cab 	.word	0x08000cab
 8000c40:	08000c59 	.word	0x08000c59
 8000c44:	08000c6d 	.word	0x08000c6d
 8000c48:	4a76      	ldr	r2, [pc, #472]	@ (8000e24 <HAL_GPIO_Init+0x2a8>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d013      	beq.n	8000c76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c4e:	e02c      	b.n	8000caa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	623b      	str	r3, [r7, #32]
          break;
 8000c56:	e029      	b.n	8000cac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	623b      	str	r3, [r7, #32]
          break;
 8000c60:	e024      	b.n	8000cac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	3308      	adds	r3, #8
 8000c68:	623b      	str	r3, [r7, #32]
          break;
 8000c6a:	e01f      	b.n	8000cac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	330c      	adds	r3, #12
 8000c72:	623b      	str	r3, [r7, #32]
          break;
 8000c74:	e01a      	b.n	8000cac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d102      	bne.n	8000c84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c7e:	2304      	movs	r3, #4
 8000c80:	623b      	str	r3, [r7, #32]
          break;
 8000c82:	e013      	b.n	8000cac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d105      	bne.n	8000c98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c8c:	2308      	movs	r3, #8
 8000c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69fa      	ldr	r2, [r7, #28]
 8000c94:	611a      	str	r2, [r3, #16]
          break;
 8000c96:	e009      	b.n	8000cac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c98:	2308      	movs	r3, #8
 8000c9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	69fa      	ldr	r2, [r7, #28]
 8000ca0:	615a      	str	r2, [r3, #20]
          break;
 8000ca2:	e003      	b.n	8000cac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	623b      	str	r3, [r7, #32]
          break;
 8000ca8:	e000      	b.n	8000cac <HAL_GPIO_Init+0x130>
          break;
 8000caa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	2bff      	cmp	r3, #255	@ 0xff
 8000cb0:	d801      	bhi.n	8000cb6 <HAL_GPIO_Init+0x13a>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	e001      	b.n	8000cba <HAL_GPIO_Init+0x13e>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	2bff      	cmp	r3, #255	@ 0xff
 8000cc0:	d802      	bhi.n	8000cc8 <HAL_GPIO_Init+0x14c>
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	e002      	b.n	8000cce <HAL_GPIO_Init+0x152>
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cca:	3b08      	subs	r3, #8
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	210f      	movs	r1, #15
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	401a      	ands	r2, r3
 8000ce0:	6a39      	ldr	r1, [r7, #32]
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f000 80a9 	beq.w	8000e4e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cfc:	4b4a      	ldr	r3, [pc, #296]	@ (8000e28 <HAL_GPIO_Init+0x2ac>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a49      	ldr	r2, [pc, #292]	@ (8000e28 <HAL_GPIO_Init+0x2ac>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b47      	ldr	r3, [pc, #284]	@ (8000e28 <HAL_GPIO_Init+0x2ac>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d14:	4a45      	ldr	r2, [pc, #276]	@ (8000e2c <HAL_GPIO_Init+0x2b0>)
 8000d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d18:	089b      	lsrs	r3, r3, #2
 8000d1a:	3302      	adds	r3, #2
 8000d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	220f      	movs	r2, #15
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	4013      	ands	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a3d      	ldr	r2, [pc, #244]	@ (8000e30 <HAL_GPIO_Init+0x2b4>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d00d      	beq.n	8000d5c <HAL_GPIO_Init+0x1e0>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a3c      	ldr	r2, [pc, #240]	@ (8000e34 <HAL_GPIO_Init+0x2b8>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d007      	beq.n	8000d58 <HAL_GPIO_Init+0x1dc>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a3b      	ldr	r2, [pc, #236]	@ (8000e38 <HAL_GPIO_Init+0x2bc>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d101      	bne.n	8000d54 <HAL_GPIO_Init+0x1d8>
 8000d50:	2302      	movs	r3, #2
 8000d52:	e004      	b.n	8000d5e <HAL_GPIO_Init+0x1e2>
 8000d54:	2303      	movs	r3, #3
 8000d56:	e002      	b.n	8000d5e <HAL_GPIO_Init+0x1e2>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e000      	b.n	8000d5e <HAL_GPIO_Init+0x1e2>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d60:	f002 0203 	and.w	r2, r2, #3
 8000d64:	0092      	lsls	r2, r2, #2
 8000d66:	4093      	lsls	r3, r2
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d6e:	492f      	ldr	r1, [pc, #188]	@ (8000e2c <HAL_GPIO_Init+0x2b0>)
 8000d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	3302      	adds	r3, #2
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d006      	beq.n	8000d96 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d88:	4b2c      	ldr	r3, [pc, #176]	@ (8000e3c <HAL_GPIO_Init+0x2c0>)
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	492b      	ldr	r1, [pc, #172]	@ (8000e3c <HAL_GPIO_Init+0x2c0>)
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	608b      	str	r3, [r1, #8]
 8000d94:	e006      	b.n	8000da4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d96:	4b29      	ldr	r3, [pc, #164]	@ (8000e3c <HAL_GPIO_Init+0x2c0>)
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	4927      	ldr	r1, [pc, #156]	@ (8000e3c <HAL_GPIO_Init+0x2c0>)
 8000da0:	4013      	ands	r3, r2
 8000da2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d006      	beq.n	8000dbe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000db0:	4b22      	ldr	r3, [pc, #136]	@ (8000e3c <HAL_GPIO_Init+0x2c0>)
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	4921      	ldr	r1, [pc, #132]	@ (8000e3c <HAL_GPIO_Init+0x2c0>)
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	60cb      	str	r3, [r1, #12]
 8000dbc:	e006      	b.n	8000dcc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8000e3c <HAL_GPIO_Init+0x2c0>)
 8000dc0:	68da      	ldr	r2, [r3, #12]
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	491d      	ldr	r1, [pc, #116]	@ (8000e3c <HAL_GPIO_Init+0x2c0>)
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d006      	beq.n	8000de6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dd8:	4b18      	ldr	r3, [pc, #96]	@ (8000e3c <HAL_GPIO_Init+0x2c0>)
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	4917      	ldr	r1, [pc, #92]	@ (8000e3c <HAL_GPIO_Init+0x2c0>)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	604b      	str	r3, [r1, #4]
 8000de4:	e006      	b.n	8000df4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000de6:	4b15      	ldr	r3, [pc, #84]	@ (8000e3c <HAL_GPIO_Init+0x2c0>)
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	43db      	mvns	r3, r3
 8000dee:	4913      	ldr	r1, [pc, #76]	@ (8000e3c <HAL_GPIO_Init+0x2c0>)
 8000df0:	4013      	ands	r3, r2
 8000df2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d01f      	beq.n	8000e40 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e00:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <HAL_GPIO_Init+0x2c0>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	490d      	ldr	r1, [pc, #52]	@ (8000e3c <HAL_GPIO_Init+0x2c0>)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	600b      	str	r3, [r1, #0]
 8000e0c:	e01f      	b.n	8000e4e <HAL_GPIO_Init+0x2d2>
 8000e0e:	bf00      	nop
 8000e10:	10320000 	.word	0x10320000
 8000e14:	10310000 	.word	0x10310000
 8000e18:	10220000 	.word	0x10220000
 8000e1c:	10210000 	.word	0x10210000
 8000e20:	10120000 	.word	0x10120000
 8000e24:	10110000 	.word	0x10110000
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40010000 	.word	0x40010000
 8000e30:	40010800 	.word	0x40010800
 8000e34:	40010c00 	.word	0x40010c00
 8000e38:	40011000 	.word	0x40011000
 8000e3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e40:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <HAL_GPIO_Init+0x2f4>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	43db      	mvns	r3, r3
 8000e48:	4909      	ldr	r1, [pc, #36]	@ (8000e70 <HAL_GPIO_Init+0x2f4>)
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e50:	3301      	adds	r3, #1
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f47f ae96 	bne.w	8000b90 <HAL_GPIO_Init+0x14>
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	372c      	adds	r7, #44	@ 0x2c
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	40010400 	.word	0x40010400

08000e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	807b      	strh	r3, [r7, #2]
 8000e80:	4613      	mov	r3, r2
 8000e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e84:	787b      	ldrb	r3, [r7, #1]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e8a:	887a      	ldrh	r2, [r7, #2]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e90:	e003      	b.n	8000e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e92:	887b      	ldrh	r3, [r7, #2]
 8000e94:	041a      	lsls	r2, r3, #16
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	611a      	str	r2, [r3, #16]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e272      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f000 8087 	beq.w	8000fd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ec4:	4b92      	ldr	r3, [pc, #584]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 030c 	and.w	r3, r3, #12
 8000ecc:	2b04      	cmp	r3, #4
 8000ece:	d00c      	beq.n	8000eea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ed0:	4b8f      	ldr	r3, [pc, #572]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 030c 	and.w	r3, r3, #12
 8000ed8:	2b08      	cmp	r3, #8
 8000eda:	d112      	bne.n	8000f02 <HAL_RCC_OscConfig+0x5e>
 8000edc:	4b8c      	ldr	r3, [pc, #560]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ee8:	d10b      	bne.n	8000f02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eea:	4b89      	ldr	r3, [pc, #548]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d06c      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x12c>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d168      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e24c      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f0a:	d106      	bne.n	8000f1a <HAL_RCC_OscConfig+0x76>
 8000f0c:	4b80      	ldr	r3, [pc, #512]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a7f      	ldr	r2, [pc, #508]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	e02e      	b.n	8000f78 <HAL_RCC_OscConfig+0xd4>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10c      	bne.n	8000f3c <HAL_RCC_OscConfig+0x98>
 8000f22:	4b7b      	ldr	r3, [pc, #492]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a7a      	ldr	r2, [pc, #488]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	4b78      	ldr	r3, [pc, #480]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a77      	ldr	r2, [pc, #476]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	e01d      	b.n	8000f78 <HAL_RCC_OscConfig+0xd4>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f44:	d10c      	bne.n	8000f60 <HAL_RCC_OscConfig+0xbc>
 8000f46:	4b72      	ldr	r3, [pc, #456]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a71      	ldr	r2, [pc, #452]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	4b6f      	ldr	r3, [pc, #444]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a6e      	ldr	r2, [pc, #440]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e00b      	b.n	8000f78 <HAL_RCC_OscConfig+0xd4>
 8000f60:	4b6b      	ldr	r3, [pc, #428]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a6a      	ldr	r2, [pc, #424]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4b68      	ldr	r3, [pc, #416]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a67      	ldr	r2, [pc, #412]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d013      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f80:	f7ff fcea 	bl	8000958 <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f88:	f7ff fce6 	bl	8000958 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b64      	cmp	r3, #100	@ 0x64
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e200      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9a:	4b5d      	ldr	r3, [pc, #372]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0f0      	beq.n	8000f88 <HAL_RCC_OscConfig+0xe4>
 8000fa6:	e014      	b.n	8000fd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fcd6 	bl	8000958 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb0:	f7ff fcd2 	bl	8000958 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b64      	cmp	r3, #100	@ 0x64
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e1ec      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc2:	4b53      	ldr	r3, [pc, #332]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f0      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x10c>
 8000fce:	e000      	b.n	8000fd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d063      	beq.n	80010a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fde:	4b4c      	ldr	r3, [pc, #304]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00b      	beq.n	8001002 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fea:	4b49      	ldr	r3, [pc, #292]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 030c 	and.w	r3, r3, #12
 8000ff2:	2b08      	cmp	r3, #8
 8000ff4:	d11c      	bne.n	8001030 <HAL_RCC_OscConfig+0x18c>
 8000ff6:	4b46      	ldr	r3, [pc, #280]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d116      	bne.n	8001030 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001002:	4b43      	ldr	r3, [pc, #268]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d005      	beq.n	800101a <HAL_RCC_OscConfig+0x176>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d001      	beq.n	800101a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e1c0      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800101a:	4b3d      	ldr	r3, [pc, #244]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	4939      	ldr	r1, [pc, #228]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 800102a:	4313      	orrs	r3, r2
 800102c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102e:	e03a      	b.n	80010a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d020      	beq.n	800107a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001038:	4b36      	ldr	r3, [pc, #216]	@ (8001114 <HAL_RCC_OscConfig+0x270>)
 800103a:	2201      	movs	r2, #1
 800103c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103e:	f7ff fc8b 	bl	8000958 <HAL_GetTick>
 8001042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001046:	f7ff fc87 	bl	8000958 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e1a1      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001058:	4b2d      	ldr	r3, [pc, #180]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0f0      	beq.n	8001046 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001064:	4b2a      	ldr	r3, [pc, #168]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	4927      	ldr	r1, [pc, #156]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 8001074:	4313      	orrs	r3, r2
 8001076:	600b      	str	r3, [r1, #0]
 8001078:	e015      	b.n	80010a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800107a:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <HAL_RCC_OscConfig+0x270>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001080:	f7ff fc6a 	bl	8000958 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001088:	f7ff fc66 	bl	8000958 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e180      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800109a:	4b1d      	ldr	r3, [pc, #116]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f0      	bne.n	8001088 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d03a      	beq.n	8001128 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d019      	beq.n	80010ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ba:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <HAL_RCC_OscConfig+0x274>)
 80010bc:	2201      	movs	r2, #1
 80010be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c0:	f7ff fc4a 	bl	8000958 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010c8:	f7ff fc46 	bl	8000958 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e160      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010da:	4b0d      	ldr	r3, [pc, #52]	@ (8001110 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0f0      	beq.n	80010c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010e6:	2001      	movs	r0, #1
 80010e8:	f000 face 	bl	8001688 <RCC_Delay>
 80010ec:	e01c      	b.n	8001128 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001118 <HAL_RCC_OscConfig+0x274>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f4:	f7ff fc30 	bl	8000958 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010fa:	e00f      	b.n	800111c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010fc:	f7ff fc2c 	bl	8000958 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d908      	bls.n	800111c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e146      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000
 8001114:	42420000 	.word	0x42420000
 8001118:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800111c:	4b92      	ldr	r3, [pc, #584]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 800111e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1e9      	bne.n	80010fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	2b00      	cmp	r3, #0
 8001132:	f000 80a6 	beq.w	8001282 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001136:	2300      	movs	r3, #0
 8001138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800113a:	4b8b      	ldr	r3, [pc, #556]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10d      	bne.n	8001162 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	4b88      	ldr	r3, [pc, #544]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	4a87      	ldr	r2, [pc, #540]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001150:	61d3      	str	r3, [r2, #28]
 8001152:	4b85      	ldr	r3, [pc, #532]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800115e:	2301      	movs	r3, #1
 8001160:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001162:	4b82      	ldr	r3, [pc, #520]	@ (800136c <HAL_RCC_OscConfig+0x4c8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800116a:	2b00      	cmp	r3, #0
 800116c:	d118      	bne.n	80011a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800116e:	4b7f      	ldr	r3, [pc, #508]	@ (800136c <HAL_RCC_OscConfig+0x4c8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a7e      	ldr	r2, [pc, #504]	@ (800136c <HAL_RCC_OscConfig+0x4c8>)
 8001174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800117a:	f7ff fbed 	bl	8000958 <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001182:	f7ff fbe9 	bl	8000958 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b64      	cmp	r3, #100	@ 0x64
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e103      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001194:	4b75      	ldr	r3, [pc, #468]	@ (800136c <HAL_RCC_OscConfig+0x4c8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0f0      	beq.n	8001182 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d106      	bne.n	80011b6 <HAL_RCC_OscConfig+0x312>
 80011a8:	4b6f      	ldr	r3, [pc, #444]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	4a6e      	ldr	r2, [pc, #440]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6213      	str	r3, [r2, #32]
 80011b4:	e02d      	b.n	8001212 <HAL_RCC_OscConfig+0x36e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x334>
 80011be:	4b6a      	ldr	r3, [pc, #424]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	4a69      	ldr	r2, [pc, #420]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80011c4:	f023 0301 	bic.w	r3, r3, #1
 80011c8:	6213      	str	r3, [r2, #32]
 80011ca:	4b67      	ldr	r3, [pc, #412]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	4a66      	ldr	r2, [pc, #408]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80011d0:	f023 0304 	bic.w	r3, r3, #4
 80011d4:	6213      	str	r3, [r2, #32]
 80011d6:	e01c      	b.n	8001212 <HAL_RCC_OscConfig+0x36e>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	2b05      	cmp	r3, #5
 80011de:	d10c      	bne.n	80011fa <HAL_RCC_OscConfig+0x356>
 80011e0:	4b61      	ldr	r3, [pc, #388]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	4a60      	ldr	r2, [pc, #384]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80011e6:	f043 0304 	orr.w	r3, r3, #4
 80011ea:	6213      	str	r3, [r2, #32]
 80011ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	4a5d      	ldr	r2, [pc, #372]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6213      	str	r3, [r2, #32]
 80011f8:	e00b      	b.n	8001212 <HAL_RCC_OscConfig+0x36e>
 80011fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	6a1b      	ldr	r3, [r3, #32]
 80011fe:	4a5a      	ldr	r2, [pc, #360]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 8001200:	f023 0301 	bic.w	r3, r3, #1
 8001204:	6213      	str	r3, [r2, #32]
 8001206:	4b58      	ldr	r3, [pc, #352]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	4a57      	ldr	r2, [pc, #348]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 800120c:	f023 0304 	bic.w	r3, r3, #4
 8001210:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d015      	beq.n	8001246 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121a:	f7ff fb9d 	bl	8000958 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001220:	e00a      	b.n	8001238 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001222:	f7ff fb99 	bl	8000958 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001230:	4293      	cmp	r3, r2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e0b1      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001238:	4b4b      	ldr	r3, [pc, #300]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0ee      	beq.n	8001222 <HAL_RCC_OscConfig+0x37e>
 8001244:	e014      	b.n	8001270 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001246:	f7ff fb87 	bl	8000958 <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800124c:	e00a      	b.n	8001264 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800124e:	f7ff fb83 	bl	8000958 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800125c:	4293      	cmp	r3, r2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e09b      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001264:	4b40      	ldr	r3, [pc, #256]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1ee      	bne.n	800124e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d105      	bne.n	8001282 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001276:	4b3c      	ldr	r3, [pc, #240]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	4a3b      	ldr	r2, [pc, #236]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 800127c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001280:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 8087 	beq.w	800139a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800128c:	4b36      	ldr	r3, [pc, #216]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	2b08      	cmp	r3, #8
 8001296:	d061      	beq.n	800135c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	2b02      	cmp	r3, #2
 800129e:	d146      	bne.n	800132e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a0:	4b33      	ldr	r3, [pc, #204]	@ (8001370 <HAL_RCC_OscConfig+0x4cc>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a6:	f7ff fb57 	bl	8000958 <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ae:	f7ff fb53 	bl	8000958 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e06d      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c0:	4b29      	ldr	r3, [pc, #164]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1f0      	bne.n	80012ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012d4:	d108      	bne.n	80012e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012d6:	4b24      	ldr	r3, [pc, #144]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	4921      	ldr	r1, [pc, #132]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a19      	ldr	r1, [r3, #32]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f8:	430b      	orrs	r3, r1
 80012fa:	491b      	ldr	r1, [pc, #108]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001300:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <HAL_RCC_OscConfig+0x4cc>)
 8001302:	2201      	movs	r2, #1
 8001304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001306:	f7ff fb27 	bl	8000958 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800130e:	f7ff fb23 	bl	8000958 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e03d      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001320:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f0      	beq.n	800130e <HAL_RCC_OscConfig+0x46a>
 800132c:	e035      	b.n	800139a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800132e:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <HAL_RCC_OscConfig+0x4cc>)
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fb10 	bl	8000958 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800133c:	f7ff fb0c 	bl	8000958 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e026      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <HAL_RCC_OscConfig+0x4c4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0x498>
 800135a:	e01e      	b.n	800139a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69db      	ldr	r3, [r3, #28]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d107      	bne.n	8001374 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e019      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
 8001368:	40021000 	.word	0x40021000
 800136c:	40007000 	.word	0x40007000
 8001370:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001374:	4b0b      	ldr	r3, [pc, #44]	@ (80013a4 <HAL_RCC_OscConfig+0x500>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	429a      	cmp	r2, r3
 8001386:	d106      	bne.n	8001396 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001392:	429a      	cmp	r2, r3
 8001394:	d001      	beq.n	800139a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40021000 	.word	0x40021000

080013a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e0d0      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d910      	bls.n	80013ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ca:	4b67      	ldr	r3, [pc, #412]	@ (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f023 0207 	bic.w	r2, r3, #7
 80013d2:	4965      	ldr	r1, [pc, #404]	@ (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013da:	4b63      	ldr	r3, [pc, #396]	@ (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d001      	beq.n	80013ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e0b8      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d020      	beq.n	800143a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001404:	4b59      	ldr	r3, [pc, #356]	@ (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4a58      	ldr	r2, [pc, #352]	@ (800156c <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800140e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800141c:	4b53      	ldr	r3, [pc, #332]	@ (800156c <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	4a52      	ldr	r2, [pc, #328]	@ (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001422:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001426:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001428:	4b50      	ldr	r3, [pc, #320]	@ (800156c <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	494d      	ldr	r1, [pc, #308]	@ (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001436:	4313      	orrs	r3, r2
 8001438:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d040      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d107      	bne.n	800145e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144e:	4b47      	ldr	r3, [pc, #284]	@ (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d115      	bne.n	8001486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e07f      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d107      	bne.n	8001476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001466:	4b41      	ldr	r3, [pc, #260]	@ (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d109      	bne.n	8001486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e073      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001476:	4b3d      	ldr	r3, [pc, #244]	@ (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e06b      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001486:	4b39      	ldr	r3, [pc, #228]	@ (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f023 0203 	bic.w	r2, r3, #3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	4936      	ldr	r1, [pc, #216]	@ (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001494:	4313      	orrs	r3, r2
 8001496:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001498:	f7ff fa5e 	bl	8000958 <HAL_GetTick>
 800149c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149e:	e00a      	b.n	80014b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a0:	f7ff fa5a 	bl	8000958 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e053      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b6:	4b2d      	ldr	r3, [pc, #180]	@ (800156c <HAL_RCC_ClockConfig+0x1c4>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 020c 	and.w	r2, r3, #12
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d1eb      	bne.n	80014a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014c8:	4b27      	ldr	r3, [pc, #156]	@ (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d210      	bcs.n	80014f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d6:	4b24      	ldr	r3, [pc, #144]	@ (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 0207 	bic.w	r2, r3, #7
 80014de:	4922      	ldr	r1, [pc, #136]	@ (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e6:	4b20      	ldr	r3, [pc, #128]	@ (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d001      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e032      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	d008      	beq.n	8001516 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001504:	4b19      	ldr	r3, [pc, #100]	@ (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	4916      	ldr	r1, [pc, #88]	@ (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	4313      	orrs	r3, r2
 8001514:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b00      	cmp	r3, #0
 8001520:	d009      	beq.n	8001536 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001522:	4b12      	ldr	r3, [pc, #72]	@ (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	490e      	ldr	r1, [pc, #56]	@ (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001532:	4313      	orrs	r3, r2
 8001534:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001536:	f000 f821 	bl	800157c <HAL_RCC_GetSysClockFreq>
 800153a:	4602      	mov	r2, r0
 800153c:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <HAL_RCC_ClockConfig+0x1c4>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	091b      	lsrs	r3, r3, #4
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	490a      	ldr	r1, [pc, #40]	@ (8001570 <HAL_RCC_ClockConfig+0x1c8>)
 8001548:	5ccb      	ldrb	r3, [r1, r3]
 800154a:	fa22 f303 	lsr.w	r3, r2, r3
 800154e:	4a09      	ldr	r2, [pc, #36]	@ (8001574 <HAL_RCC_ClockConfig+0x1cc>)
 8001550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001552:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <HAL_RCC_ClockConfig+0x1d0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff f9bc 	bl	80008d4 <HAL_InitTick>

  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40022000 	.word	0x40022000
 800156c:	40021000 	.word	0x40021000
 8001570:	08003198 	.word	0x08003198
 8001574:	20000000 	.word	0x20000000
 8001578:	20000004 	.word	0x20000004

0800157c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001596:	4b1e      	ldr	r3, [pc, #120]	@ (8001610 <HAL_RCC_GetSysClockFreq+0x94>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d002      	beq.n	80015ac <HAL_RCC_GetSysClockFreq+0x30>
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d003      	beq.n	80015b2 <HAL_RCC_GetSysClockFreq+0x36>
 80015aa:	e027      	b.n	80015fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015ac:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <HAL_RCC_GetSysClockFreq+0x98>)
 80015ae:	613b      	str	r3, [r7, #16]
      break;
 80015b0:	e027      	b.n	8001602 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	0c9b      	lsrs	r3, r3, #18
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	4a17      	ldr	r2, [pc, #92]	@ (8001618 <HAL_RCC_GetSysClockFreq+0x9c>)
 80015bc:	5cd3      	ldrb	r3, [r2, r3]
 80015be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d010      	beq.n	80015ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015ca:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <HAL_RCC_GetSysClockFreq+0x94>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	0c5b      	lsrs	r3, r3, #17
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	4a11      	ldr	r2, [pc, #68]	@ (800161c <HAL_RCC_GetSysClockFreq+0xa0>)
 80015d6:	5cd3      	ldrb	r3, [r2, r3]
 80015d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001614 <HAL_RCC_GetSysClockFreq+0x98>)
 80015de:	fb03 f202 	mul.w	r2, r3, r2
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	e004      	b.n	80015f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001620 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015f0:	fb02 f303 	mul.w	r3, r2, r3
 80015f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	613b      	str	r3, [r7, #16]
      break;
 80015fa:	e002      	b.n	8001602 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015fc:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <HAL_RCC_GetSysClockFreq+0x98>)
 80015fe:	613b      	str	r3, [r7, #16]
      break;
 8001600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001602:	693b      	ldr	r3, [r7, #16]
}
 8001604:	4618      	mov	r0, r3
 8001606:	371c      	adds	r7, #28
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40021000 	.word	0x40021000
 8001614:	007a1200 	.word	0x007a1200
 8001618:	080031b0 	.word	0x080031b0
 800161c:	080031c0 	.word	0x080031c0
 8001620:	003d0900 	.word	0x003d0900

08001624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001628:	4b02      	ldr	r3, [pc, #8]	@ (8001634 <HAL_RCC_GetHCLKFreq+0x10>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	20000000 	.word	0x20000000

08001638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800163c:	f7ff fff2 	bl	8001624 <HAL_RCC_GetHCLKFreq>
 8001640:	4602      	mov	r2, r0
 8001642:	4b05      	ldr	r3, [pc, #20]	@ (8001658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	0a1b      	lsrs	r3, r3, #8
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	4903      	ldr	r1, [pc, #12]	@ (800165c <HAL_RCC_GetPCLK1Freq+0x24>)
 800164e:	5ccb      	ldrb	r3, [r1, r3]
 8001650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001654:	4618      	mov	r0, r3
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40021000 	.word	0x40021000
 800165c:	080031a8 	.word	0x080031a8

08001660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001664:	f7ff ffde 	bl	8001624 <HAL_RCC_GetHCLKFreq>
 8001668:	4602      	mov	r2, r0
 800166a:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	0adb      	lsrs	r3, r3, #11
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	4903      	ldr	r1, [pc, #12]	@ (8001684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001676:	5ccb      	ldrb	r3, [r1, r3]
 8001678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800167c:	4618      	mov	r0, r3
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40021000 	.word	0x40021000
 8001684:	080031a8 	.word	0x080031a8

08001688 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001690:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <RCC_Delay+0x34>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0a      	ldr	r2, [pc, #40]	@ (80016c0 <RCC_Delay+0x38>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	0a5b      	lsrs	r3, r3, #9
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	fb02 f303 	mul.w	r3, r2, r3
 80016a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016a4:	bf00      	nop
  }
  while (Delay --);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	1e5a      	subs	r2, r3, #1
 80016aa:	60fa      	str	r2, [r7, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f9      	bne.n	80016a4 <RCC_Delay+0x1c>
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	20000000 	.word	0x20000000
 80016c0:	10624dd3 	.word	0x10624dd3

080016c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e076      	b.n	80017c4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d108      	bne.n	80016f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80016e6:	d009      	beq.n	80016fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
 80016ee:	e005      	b.n	80016fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7fe ff38 	bl	800058c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2202      	movs	r2, #2
 8001720:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001732:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	431a      	orrs	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001780:	ea42 0103 	orr.w	r1, r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001788:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	0c1a      	lsrs	r2, r3, #16
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f002 0204 	and.w	r2, r2, #4
 80017a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	69da      	ldr	r2, [r3, #28]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	@ 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80017da:	2301      	movs	r3, #1
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80017de:	f7ff f8bb 	bl	8000958 <HAL_GetTick>
 80017e2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80017ea:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80017f2:	887b      	ldrh	r3, [r7, #2]
 80017f4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80017f6:	7ffb      	ldrb	r3, [r7, #31]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d00c      	beq.n	8001816 <HAL_SPI_TransmitReceive+0x4a>
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001802:	d106      	bne.n	8001812 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d102      	bne.n	8001812 <HAL_SPI_TransmitReceive+0x46>
 800180c:	7ffb      	ldrb	r3, [r7, #31]
 800180e:	2b04      	cmp	r3, #4
 8001810:	d001      	beq.n	8001816 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001812:	2302      	movs	r3, #2
 8001814:	e17f      	b.n	8001b16 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_SPI_TransmitReceive+0x5c>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <HAL_SPI_TransmitReceive+0x5c>
 8001822:	887b      	ldrh	r3, [r7, #2]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e174      	b.n	8001b16 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001832:	2b01      	cmp	r3, #1
 8001834:	d101      	bne.n	800183a <HAL_SPI_TransmitReceive+0x6e>
 8001836:	2302      	movs	r3, #2
 8001838:	e16d      	b.n	8001b16 <HAL_SPI_TransmitReceive+0x34a>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b04      	cmp	r3, #4
 800184c:	d003      	beq.n	8001856 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2205      	movs	r2, #5
 8001852:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	887a      	ldrh	r2, [r7, #2]
 8001866:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	887a      	ldrh	r2, [r7, #2]
 800186c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	887a      	ldrh	r2, [r7, #2]
 800187e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001896:	2b40      	cmp	r3, #64	@ 0x40
 8001898:	d007      	beq.n	80018aa <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018b2:	d17e      	bne.n	80019b2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <HAL_SPI_TransmitReceive+0xf6>
 80018bc:	8afb      	ldrh	r3, [r7, #22]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d16c      	bne.n	800199c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	881a      	ldrh	r2, [r3, #0]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	1c9a      	adds	r2, r3, #2
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80018dc:	b29b      	uxth	r3, r3
 80018de:	3b01      	subs	r3, #1
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80018e6:	e059      	b.n	800199c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d11b      	bne.n	800192e <HAL_SPI_TransmitReceive+0x162>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d016      	beq.n	800192e <HAL_SPI_TransmitReceive+0x162>
 8001900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001902:	2b01      	cmp	r3, #1
 8001904:	d113      	bne.n	800192e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	881a      	ldrh	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	1c9a      	adds	r2, r3, #2
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001920:	b29b      	uxth	r3, r3
 8001922:	3b01      	subs	r3, #1
 8001924:	b29a      	uxth	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800192a:	2300      	movs	r3, #0
 800192c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b01      	cmp	r3, #1
 800193a:	d119      	bne.n	8001970 <HAL_SPI_TransmitReceive+0x1a4>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001940:	b29b      	uxth	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d014      	beq.n	8001970 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001950:	b292      	uxth	r2, r2
 8001952:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001958:	1c9a      	adds	r2, r3, #2
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001962:	b29b      	uxth	r3, r3
 8001964:	3b01      	subs	r3, #1
 8001966:	b29a      	uxth	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800196c:	2301      	movs	r3, #1
 800196e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001970:	f7fe fff2 	bl	8000958 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800197c:	429a      	cmp	r2, r3
 800197e:	d80d      	bhi.n	800199c <HAL_SPI_TransmitReceive+0x1d0>
 8001980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001986:	d009      	beq.n	800199c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e0bc      	b.n	8001b16 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1a0      	bne.n	80018e8 <HAL_SPI_TransmitReceive+0x11c>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d19b      	bne.n	80018e8 <HAL_SPI_TransmitReceive+0x11c>
 80019b0:	e082      	b.n	8001ab8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <HAL_SPI_TransmitReceive+0x1f4>
 80019ba:	8afb      	ldrh	r3, [r7, #22]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d171      	bne.n	8001aa4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	330c      	adds	r3, #12
 80019ca:	7812      	ldrb	r2, [r2, #0]
 80019cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80019dc:	b29b      	uxth	r3, r3
 80019de:	3b01      	subs	r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80019e6:	e05d      	b.n	8001aa4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d11c      	bne.n	8001a30 <HAL_SPI_TransmitReceive+0x264>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d017      	beq.n	8001a30 <HAL_SPI_TransmitReceive+0x264>
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d114      	bne.n	8001a30 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	330c      	adds	r3, #12
 8001a10:	7812      	ldrb	r2, [r2, #0]
 8001a12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d119      	bne.n	8001a72 <HAL_SPI_TransmitReceive+0x2a6>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d014      	beq.n	8001a72 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	3b01      	subs	r3, #1
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001a72:	f7fe ff71 	bl	8000958 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d803      	bhi.n	8001a8a <HAL_SPI_TransmitReceive+0x2be>
 8001a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a88:	d102      	bne.n	8001a90 <HAL_SPI_TransmitReceive+0x2c4>
 8001a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d109      	bne.n	8001aa4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e038      	b.n	8001b16 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d19c      	bne.n	80019e8 <HAL_SPI_TransmitReceive+0x21c>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d197      	bne.n	80019e8 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ab8:	6a3a      	ldr	r2, [r7, #32]
 8001aba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f000 f8b7 	bl	8001c30 <SPI_EndRxTxTransaction>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2220      	movs	r2, #32
 8001acc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e01d      	b.n	8001b16 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10a      	bne.n	8001af8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8001b14:	2300      	movs	r3, #0
  }
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3728      	adds	r7, #40	@ 0x28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001b30:	f7fe ff12 	bl	8000958 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b38:	1a9b      	subs	r3, r3, r2
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001b40:	f7fe ff0a 	bl	8000958 <HAL_GetTick>
 8001b44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001b46:	4b39      	ldr	r3, [pc, #228]	@ (8001c2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	015b      	lsls	r3, r3, #5
 8001b4c:	0d1b      	lsrs	r3, r3, #20
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	fb02 f303 	mul.w	r3, r2, r3
 8001b54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b56:	e054      	b.n	8001c02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5e:	d050      	beq.n	8001c02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001b60:	f7fe fefa 	bl	8000958 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d902      	bls.n	8001b76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d13d      	bne.n	8001bf2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001b84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001b8e:	d111      	bne.n	8001bb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b98:	d004      	beq.n	8001ba4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ba2:	d107      	bne.n	8001bb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001bb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bbc:	d10f      	bne.n	8001bde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001bdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e017      	b.n	8001c22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	bf0c      	ite	eq
 8001c12:	2301      	moveq	r3, #1
 8001c14:	2300      	movne	r3, #0
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d19b      	bne.n	8001b58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3720      	adds	r7, #32
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000000 	.word	0x20000000

08001c30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2201      	movs	r2, #1
 8001c44:	2102      	movs	r1, #2
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f7ff ff6a 	bl	8001b20 <SPI_WaitFlagStateUntilTimeout>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d007      	beq.n	8001c62 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c56:	f043 0220 	orr.w	r2, r3, #32
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e013      	b.n	8001c8a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2180      	movs	r1, #128	@ 0x80
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f7ff ff57 	bl	8001b20 <SPI_WaitFlagStateUntilTimeout>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d007      	beq.n	8001c88 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c7c:	f043 0220 	orr.w	r2, r3, #32
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e000      	b.n	8001c8a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e042      	b.n	8001d2a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d106      	bne.n	8001cbe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7fe fcb1 	bl	8000620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2224      	movs	r2, #36	@ 0x24
 8001cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cd4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 fa08 	bl	80020ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691a      	ldr	r2, [r3, #16]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001cea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001cfa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d0a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2220      	movs	r2, #32
 8001d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b08a      	sub	sp, #40	@ 0x28
 8001d36:	af02      	add	r7, sp, #8
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	603b      	str	r3, [r7, #0]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b20      	cmp	r3, #32
 8001d50:	d175      	bne.n	8001e3e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <HAL_UART_Transmit+0x2c>
 8001d58:	88fb      	ldrh	r3, [r7, #6]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e06e      	b.n	8001e40 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2221      	movs	r2, #33	@ 0x21
 8001d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d70:	f7fe fdf2 	bl	8000958 <HAL_GetTick>
 8001d74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	88fa      	ldrh	r2, [r7, #6]
 8001d7a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	88fa      	ldrh	r2, [r7, #6]
 8001d80:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d8a:	d108      	bne.n	8001d9e <HAL_UART_Transmit+0x6c>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d104      	bne.n	8001d9e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	61bb      	str	r3, [r7, #24]
 8001d9c:	e003      	b.n	8001da6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001da6:	e02e      	b.n	8001e06 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	2200      	movs	r2, #0
 8001db0:	2180      	movs	r1, #128	@ 0x80
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 f8df 	bl	8001f76 <UART_WaitOnFlagUntilTimeout>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d005      	beq.n	8001dca <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e03a      	b.n	8001e40 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10b      	bne.n	8001de8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dde:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	3302      	adds	r3, #2
 8001de4:	61bb      	str	r3, [r7, #24]
 8001de6:	e007      	b.n	8001df8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	781a      	ldrb	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3301      	adds	r3, #1
 8001df6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1cb      	bne.n	8001da8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2200      	movs	r2, #0
 8001e18:	2140      	movs	r1, #64	@ 0x40
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 f8ab 	bl	8001f76 <UART_WaitOnFlagUntilTimeout>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e006      	b.n	8001e40 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2220      	movs	r2, #32
 8001e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e000      	b.n	8001e40 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001e3e:	2302      	movs	r3, #2
  }
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3720      	adds	r7, #32
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	@ 0x28
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	4613      	mov	r3, r2
 8001e56:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b20      	cmp	r3, #32
 8001e66:	f040 8081 	bne.w	8001f6c <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <HAL_UART_Receive+0x2e>
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e079      	b.n	8001f6e <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2222      	movs	r2, #34	@ 0x22
 8001e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e8e:	f7fe fd63 	bl	8000958 <HAL_GetTick>
 8001e92:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	88fa      	ldrh	r2, [r7, #6]
 8001e98:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	88fa      	ldrh	r2, [r7, #6]
 8001e9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ea8:	d108      	bne.n	8001ebc <HAL_UART_Receive+0x74>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d104      	bne.n	8001ebc <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	61bb      	str	r3, [r7, #24]
 8001eba:	e003      	b.n	8001ec4 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001ec4:	e047      	b.n	8001f56 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2120      	movs	r1, #32
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 f850 	bl	8001f76 <UART_WaitOnFlagUntilTimeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e042      	b.n	8001f6e <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10c      	bne.n	8001f08 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	3302      	adds	r3, #2
 8001f04:	61bb      	str	r3, [r7, #24]
 8001f06:	e01f      	b.n	8001f48 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f10:	d007      	beq.n	8001f22 <HAL_UART_Receive+0xda>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10a      	bne.n	8001f30 <HAL_UART_Receive+0xe8>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d106      	bne.n	8001f30 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	701a      	strb	r2, [r3, #0]
 8001f2e:	e008      	b.n	8001f42 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3301      	adds	r3, #1
 8001f46:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1b2      	bne.n	8001ec6 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e000      	b.n	8001f6e <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001f6c:	2302      	movs	r3, #2
  }
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3720      	adds	r7, #32
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b086      	sub	sp, #24
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	603b      	str	r3, [r7, #0]
 8001f82:	4613      	mov	r3, r2
 8001f84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f86:	e03b      	b.n	8002000 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8e:	d037      	beq.n	8002000 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f90:	f7fe fce2 	bl	8000958 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	6a3a      	ldr	r2, [r7, #32]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d302      	bcc.n	8001fa6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e03a      	b.n	8002020 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d023      	beq.n	8002000 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2b80      	cmp	r3, #128	@ 0x80
 8001fbc:	d020      	beq.n	8002000 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2b40      	cmp	r3, #64	@ 0x40
 8001fc2:	d01d      	beq.n	8002000 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d116      	bne.n	8002000 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 f81d 	bl	8002028 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e00f      	b.n	8002020 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	4013      	ands	r3, r2
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	429a      	cmp	r2, r3
 800200e:	bf0c      	ite	eq
 8002010:	2301      	moveq	r3, #1
 8002012:	2300      	movne	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	461a      	mov	r2, r3
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	429a      	cmp	r2, r3
 800201c:	d0b4      	beq.n	8001f88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002028:	b480      	push	{r7}
 800202a:	b095      	sub	sp, #84	@ 0x54
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	330c      	adds	r3, #12
 8002036:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800203a:	e853 3f00 	ldrex	r3, [r3]
 800203e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002042:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002046:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	330c      	adds	r3, #12
 800204e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002050:	643a      	str	r2, [r7, #64]	@ 0x40
 8002052:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002054:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002056:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002058:	e841 2300 	strex	r3, r2, [r1]
 800205c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800205e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1e5      	bne.n	8002030 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3314      	adds	r3, #20
 800206a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	e853 3f00 	ldrex	r3, [r3]
 8002072:	61fb      	str	r3, [r7, #28]
   return(result);
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	3314      	adds	r3, #20
 8002082:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002084:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002086:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002088:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800208a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800208c:	e841 2300 	strex	r3, r2, [r1]
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1e5      	bne.n	8002064 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209c:	2b01      	cmp	r3, #1
 800209e:	d119      	bne.n	80020d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	330c      	adds	r3, #12
 80020a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	e853 3f00 	ldrex	r3, [r3]
 80020ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f023 0310 	bic.w	r3, r3, #16
 80020b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	330c      	adds	r3, #12
 80020be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020c0:	61ba      	str	r2, [r7, #24]
 80020c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020c4:	6979      	ldr	r1, [r7, #20]
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	e841 2300 	strex	r3, r2, [r1]
 80020cc:	613b      	str	r3, [r7, #16]
   return(result);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1e5      	bne.n	80020a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80020e2:	bf00      	nop
 80020e4:	3754      	adds	r7, #84	@ 0x54
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	4313      	orrs	r3, r2
 800211a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002126:	f023 030c 	bic.w	r3, r3, #12
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	68b9      	ldr	r1, [r7, #8]
 8002130:	430b      	orrs	r3, r1
 8002132:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699a      	ldr	r2, [r3, #24]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a2c      	ldr	r2, [pc, #176]	@ (8002200 <UART_SetConfig+0x114>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d103      	bne.n	800215c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002154:	f7ff fa84 	bl	8001660 <HAL_RCC_GetPCLK2Freq>
 8002158:	60f8      	str	r0, [r7, #12]
 800215a:	e002      	b.n	8002162 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800215c:	f7ff fa6c 	bl	8001638 <HAL_RCC_GetPCLK1Freq>
 8002160:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	009a      	lsls	r2, r3, #2
 800216c:	441a      	add	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	fbb2 f3f3 	udiv	r3, r2, r3
 8002178:	4a22      	ldr	r2, [pc, #136]	@ (8002204 <UART_SetConfig+0x118>)
 800217a:	fba2 2303 	umull	r2, r3, r2, r3
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	0119      	lsls	r1, r3, #4
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	009a      	lsls	r2, r3, #2
 800218c:	441a      	add	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	fbb2 f2f3 	udiv	r2, r2, r3
 8002198:	4b1a      	ldr	r3, [pc, #104]	@ (8002204 <UART_SetConfig+0x118>)
 800219a:	fba3 0302 	umull	r0, r3, r3, r2
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	2064      	movs	r0, #100	@ 0x64
 80021a2:	fb00 f303 	mul.w	r3, r0, r3
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	3332      	adds	r3, #50	@ 0x32
 80021ac:	4a15      	ldr	r2, [pc, #84]	@ (8002204 <UART_SetConfig+0x118>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021b8:	4419      	add	r1, r3
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	009a      	lsls	r2, r3, #2
 80021c4:	441a      	add	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80021d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002204 <UART_SetConfig+0x118>)
 80021d2:	fba3 0302 	umull	r0, r3, r3, r2
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	2064      	movs	r0, #100	@ 0x64
 80021da:	fb00 f303 	mul.w	r3, r0, r3
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	3332      	adds	r3, #50	@ 0x32
 80021e4:	4a07      	ldr	r2, [pc, #28]	@ (8002204 <UART_SetConfig+0x118>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	f003 020f 	and.w	r2, r3, #15
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	440a      	add	r2, r1
 80021f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40013800 	.word	0x40013800
 8002204:	51eb851f 	.word	0x51eb851f

08002208 <std>:
 8002208:	2300      	movs	r3, #0
 800220a:	b510      	push	{r4, lr}
 800220c:	4604      	mov	r4, r0
 800220e:	e9c0 3300 	strd	r3, r3, [r0]
 8002212:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002216:	6083      	str	r3, [r0, #8]
 8002218:	8181      	strh	r1, [r0, #12]
 800221a:	6643      	str	r3, [r0, #100]	@ 0x64
 800221c:	81c2      	strh	r2, [r0, #14]
 800221e:	6183      	str	r3, [r0, #24]
 8002220:	4619      	mov	r1, r3
 8002222:	2208      	movs	r2, #8
 8002224:	305c      	adds	r0, #92	@ 0x5c
 8002226:	f000 f9f9 	bl	800261c <memset>
 800222a:	4b0d      	ldr	r3, [pc, #52]	@ (8002260 <std+0x58>)
 800222c:	6224      	str	r4, [r4, #32]
 800222e:	6263      	str	r3, [r4, #36]	@ 0x24
 8002230:	4b0c      	ldr	r3, [pc, #48]	@ (8002264 <std+0x5c>)
 8002232:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002234:	4b0c      	ldr	r3, [pc, #48]	@ (8002268 <std+0x60>)
 8002236:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002238:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <std+0x64>)
 800223a:	6323      	str	r3, [r4, #48]	@ 0x30
 800223c:	4b0c      	ldr	r3, [pc, #48]	@ (8002270 <std+0x68>)
 800223e:	429c      	cmp	r4, r3
 8002240:	d006      	beq.n	8002250 <std+0x48>
 8002242:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002246:	4294      	cmp	r4, r2
 8002248:	d002      	beq.n	8002250 <std+0x48>
 800224a:	33d0      	adds	r3, #208	@ 0xd0
 800224c:	429c      	cmp	r4, r3
 800224e:	d105      	bne.n	800225c <std+0x54>
 8002250:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002258:	f000 ba58 	b.w	800270c <__retarget_lock_init_recursive>
 800225c:	bd10      	pop	{r4, pc}
 800225e:	bf00      	nop
 8002260:	0800246d 	.word	0x0800246d
 8002264:	0800248f 	.word	0x0800248f
 8002268:	080024c7 	.word	0x080024c7
 800226c:	080024eb 	.word	0x080024eb
 8002270:	2000012c 	.word	0x2000012c

08002274 <stdio_exit_handler>:
 8002274:	4a02      	ldr	r2, [pc, #8]	@ (8002280 <stdio_exit_handler+0xc>)
 8002276:	4903      	ldr	r1, [pc, #12]	@ (8002284 <stdio_exit_handler+0x10>)
 8002278:	4803      	ldr	r0, [pc, #12]	@ (8002288 <stdio_exit_handler+0x14>)
 800227a:	f000 b869 	b.w	8002350 <_fwalk_sglue>
 800227e:	bf00      	nop
 8002280:	2000000c 	.word	0x2000000c
 8002284:	08002fa1 	.word	0x08002fa1
 8002288:	2000001c 	.word	0x2000001c

0800228c <cleanup_stdio>:
 800228c:	6841      	ldr	r1, [r0, #4]
 800228e:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <cleanup_stdio+0x34>)
 8002290:	b510      	push	{r4, lr}
 8002292:	4299      	cmp	r1, r3
 8002294:	4604      	mov	r4, r0
 8002296:	d001      	beq.n	800229c <cleanup_stdio+0x10>
 8002298:	f000 fe82 	bl	8002fa0 <_fflush_r>
 800229c:	68a1      	ldr	r1, [r4, #8]
 800229e:	4b09      	ldr	r3, [pc, #36]	@ (80022c4 <cleanup_stdio+0x38>)
 80022a0:	4299      	cmp	r1, r3
 80022a2:	d002      	beq.n	80022aa <cleanup_stdio+0x1e>
 80022a4:	4620      	mov	r0, r4
 80022a6:	f000 fe7b 	bl	8002fa0 <_fflush_r>
 80022aa:	68e1      	ldr	r1, [r4, #12]
 80022ac:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <cleanup_stdio+0x3c>)
 80022ae:	4299      	cmp	r1, r3
 80022b0:	d004      	beq.n	80022bc <cleanup_stdio+0x30>
 80022b2:	4620      	mov	r0, r4
 80022b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022b8:	f000 be72 	b.w	8002fa0 <_fflush_r>
 80022bc:	bd10      	pop	{r4, pc}
 80022be:	bf00      	nop
 80022c0:	2000012c 	.word	0x2000012c
 80022c4:	20000194 	.word	0x20000194
 80022c8:	200001fc 	.word	0x200001fc

080022cc <global_stdio_init.part.0>:
 80022cc:	b510      	push	{r4, lr}
 80022ce:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <global_stdio_init.part.0+0x30>)
 80022d0:	4c0b      	ldr	r4, [pc, #44]	@ (8002300 <global_stdio_init.part.0+0x34>)
 80022d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002304 <global_stdio_init.part.0+0x38>)
 80022d4:	4620      	mov	r0, r4
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	2104      	movs	r1, #4
 80022da:	2200      	movs	r2, #0
 80022dc:	f7ff ff94 	bl	8002208 <std>
 80022e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80022e4:	2201      	movs	r2, #1
 80022e6:	2109      	movs	r1, #9
 80022e8:	f7ff ff8e 	bl	8002208 <std>
 80022ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80022f0:	2202      	movs	r2, #2
 80022f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022f6:	2112      	movs	r1, #18
 80022f8:	f7ff bf86 	b.w	8002208 <std>
 80022fc:	20000264 	.word	0x20000264
 8002300:	2000012c 	.word	0x2000012c
 8002304:	08002275 	.word	0x08002275

08002308 <__sfp_lock_acquire>:
 8002308:	4801      	ldr	r0, [pc, #4]	@ (8002310 <__sfp_lock_acquire+0x8>)
 800230a:	f000 ba00 	b.w	800270e <__retarget_lock_acquire_recursive>
 800230e:	bf00      	nop
 8002310:	2000026d 	.word	0x2000026d

08002314 <__sfp_lock_release>:
 8002314:	4801      	ldr	r0, [pc, #4]	@ (800231c <__sfp_lock_release+0x8>)
 8002316:	f000 b9fb 	b.w	8002710 <__retarget_lock_release_recursive>
 800231a:	bf00      	nop
 800231c:	2000026d 	.word	0x2000026d

08002320 <__sinit>:
 8002320:	b510      	push	{r4, lr}
 8002322:	4604      	mov	r4, r0
 8002324:	f7ff fff0 	bl	8002308 <__sfp_lock_acquire>
 8002328:	6a23      	ldr	r3, [r4, #32]
 800232a:	b11b      	cbz	r3, 8002334 <__sinit+0x14>
 800232c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002330:	f7ff bff0 	b.w	8002314 <__sfp_lock_release>
 8002334:	4b04      	ldr	r3, [pc, #16]	@ (8002348 <__sinit+0x28>)
 8002336:	6223      	str	r3, [r4, #32]
 8002338:	4b04      	ldr	r3, [pc, #16]	@ (800234c <__sinit+0x2c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f5      	bne.n	800232c <__sinit+0xc>
 8002340:	f7ff ffc4 	bl	80022cc <global_stdio_init.part.0>
 8002344:	e7f2      	b.n	800232c <__sinit+0xc>
 8002346:	bf00      	nop
 8002348:	0800228d 	.word	0x0800228d
 800234c:	20000264 	.word	0x20000264

08002350 <_fwalk_sglue>:
 8002350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002354:	4607      	mov	r7, r0
 8002356:	4688      	mov	r8, r1
 8002358:	4614      	mov	r4, r2
 800235a:	2600      	movs	r6, #0
 800235c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002360:	f1b9 0901 	subs.w	r9, r9, #1
 8002364:	d505      	bpl.n	8002372 <_fwalk_sglue+0x22>
 8002366:	6824      	ldr	r4, [r4, #0]
 8002368:	2c00      	cmp	r4, #0
 800236a:	d1f7      	bne.n	800235c <_fwalk_sglue+0xc>
 800236c:	4630      	mov	r0, r6
 800236e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002372:	89ab      	ldrh	r3, [r5, #12]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d907      	bls.n	8002388 <_fwalk_sglue+0x38>
 8002378:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800237c:	3301      	adds	r3, #1
 800237e:	d003      	beq.n	8002388 <_fwalk_sglue+0x38>
 8002380:	4629      	mov	r1, r5
 8002382:	4638      	mov	r0, r7
 8002384:	47c0      	blx	r8
 8002386:	4306      	orrs	r6, r0
 8002388:	3568      	adds	r5, #104	@ 0x68
 800238a:	e7e9      	b.n	8002360 <_fwalk_sglue+0x10>

0800238c <iprintf>:
 800238c:	b40f      	push	{r0, r1, r2, r3}
 800238e:	b507      	push	{r0, r1, r2, lr}
 8002390:	4906      	ldr	r1, [pc, #24]	@ (80023ac <iprintf+0x20>)
 8002392:	ab04      	add	r3, sp, #16
 8002394:	6808      	ldr	r0, [r1, #0]
 8002396:	f853 2b04 	ldr.w	r2, [r3], #4
 800239a:	6881      	ldr	r1, [r0, #8]
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	f000 fad7 	bl	8002950 <_vfiprintf_r>
 80023a2:	b003      	add	sp, #12
 80023a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80023a8:	b004      	add	sp, #16
 80023aa:	4770      	bx	lr
 80023ac:	20000018 	.word	0x20000018

080023b0 <_puts_r>:
 80023b0:	6a03      	ldr	r3, [r0, #32]
 80023b2:	b570      	push	{r4, r5, r6, lr}
 80023b4:	4605      	mov	r5, r0
 80023b6:	460e      	mov	r6, r1
 80023b8:	6884      	ldr	r4, [r0, #8]
 80023ba:	b90b      	cbnz	r3, 80023c0 <_puts_r+0x10>
 80023bc:	f7ff ffb0 	bl	8002320 <__sinit>
 80023c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80023c2:	07db      	lsls	r3, r3, #31
 80023c4:	d405      	bmi.n	80023d2 <_puts_r+0x22>
 80023c6:	89a3      	ldrh	r3, [r4, #12]
 80023c8:	0598      	lsls	r0, r3, #22
 80023ca:	d402      	bmi.n	80023d2 <_puts_r+0x22>
 80023cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023ce:	f000 f99e 	bl	800270e <__retarget_lock_acquire_recursive>
 80023d2:	89a3      	ldrh	r3, [r4, #12]
 80023d4:	0719      	lsls	r1, r3, #28
 80023d6:	d502      	bpl.n	80023de <_puts_r+0x2e>
 80023d8:	6923      	ldr	r3, [r4, #16]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d135      	bne.n	800244a <_puts_r+0x9a>
 80023de:	4621      	mov	r1, r4
 80023e0:	4628      	mov	r0, r5
 80023e2:	f000 f8c5 	bl	8002570 <__swsetup_r>
 80023e6:	b380      	cbz	r0, 800244a <_puts_r+0x9a>
 80023e8:	f04f 35ff 	mov.w	r5, #4294967295
 80023ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80023ee:	07da      	lsls	r2, r3, #31
 80023f0:	d405      	bmi.n	80023fe <_puts_r+0x4e>
 80023f2:	89a3      	ldrh	r3, [r4, #12]
 80023f4:	059b      	lsls	r3, r3, #22
 80023f6:	d402      	bmi.n	80023fe <_puts_r+0x4e>
 80023f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023fa:	f000 f989 	bl	8002710 <__retarget_lock_release_recursive>
 80023fe:	4628      	mov	r0, r5
 8002400:	bd70      	pop	{r4, r5, r6, pc}
 8002402:	2b00      	cmp	r3, #0
 8002404:	da04      	bge.n	8002410 <_puts_r+0x60>
 8002406:	69a2      	ldr	r2, [r4, #24]
 8002408:	429a      	cmp	r2, r3
 800240a:	dc17      	bgt.n	800243c <_puts_r+0x8c>
 800240c:	290a      	cmp	r1, #10
 800240e:	d015      	beq.n	800243c <_puts_r+0x8c>
 8002410:	6823      	ldr	r3, [r4, #0]
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	6022      	str	r2, [r4, #0]
 8002416:	7019      	strb	r1, [r3, #0]
 8002418:	68a3      	ldr	r3, [r4, #8]
 800241a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800241e:	3b01      	subs	r3, #1
 8002420:	60a3      	str	r3, [r4, #8]
 8002422:	2900      	cmp	r1, #0
 8002424:	d1ed      	bne.n	8002402 <_puts_r+0x52>
 8002426:	2b00      	cmp	r3, #0
 8002428:	da11      	bge.n	800244e <_puts_r+0x9e>
 800242a:	4622      	mov	r2, r4
 800242c:	210a      	movs	r1, #10
 800242e:	4628      	mov	r0, r5
 8002430:	f000 f85f 	bl	80024f2 <__swbuf_r>
 8002434:	3001      	adds	r0, #1
 8002436:	d0d7      	beq.n	80023e8 <_puts_r+0x38>
 8002438:	250a      	movs	r5, #10
 800243a:	e7d7      	b.n	80023ec <_puts_r+0x3c>
 800243c:	4622      	mov	r2, r4
 800243e:	4628      	mov	r0, r5
 8002440:	f000 f857 	bl	80024f2 <__swbuf_r>
 8002444:	3001      	adds	r0, #1
 8002446:	d1e7      	bne.n	8002418 <_puts_r+0x68>
 8002448:	e7ce      	b.n	80023e8 <_puts_r+0x38>
 800244a:	3e01      	subs	r6, #1
 800244c:	e7e4      	b.n	8002418 <_puts_r+0x68>
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	6022      	str	r2, [r4, #0]
 8002454:	220a      	movs	r2, #10
 8002456:	701a      	strb	r2, [r3, #0]
 8002458:	e7ee      	b.n	8002438 <_puts_r+0x88>
	...

0800245c <puts>:
 800245c:	4b02      	ldr	r3, [pc, #8]	@ (8002468 <puts+0xc>)
 800245e:	4601      	mov	r1, r0
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	f7ff bfa5 	b.w	80023b0 <_puts_r>
 8002466:	bf00      	nop
 8002468:	20000018 	.word	0x20000018

0800246c <__sread>:
 800246c:	b510      	push	{r4, lr}
 800246e:	460c      	mov	r4, r1
 8002470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002474:	f000 f8fc 	bl	8002670 <_read_r>
 8002478:	2800      	cmp	r0, #0
 800247a:	bfab      	itete	ge
 800247c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800247e:	89a3      	ldrhlt	r3, [r4, #12]
 8002480:	181b      	addge	r3, r3, r0
 8002482:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002486:	bfac      	ite	ge
 8002488:	6563      	strge	r3, [r4, #84]	@ 0x54
 800248a:	81a3      	strhlt	r3, [r4, #12]
 800248c:	bd10      	pop	{r4, pc}

0800248e <__swrite>:
 800248e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002492:	461f      	mov	r7, r3
 8002494:	898b      	ldrh	r3, [r1, #12]
 8002496:	4605      	mov	r5, r0
 8002498:	05db      	lsls	r3, r3, #23
 800249a:	460c      	mov	r4, r1
 800249c:	4616      	mov	r6, r2
 800249e:	d505      	bpl.n	80024ac <__swrite+0x1e>
 80024a0:	2302      	movs	r3, #2
 80024a2:	2200      	movs	r2, #0
 80024a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024a8:	f000 f8d0 	bl	800264c <_lseek_r>
 80024ac:	89a3      	ldrh	r3, [r4, #12]
 80024ae:	4632      	mov	r2, r6
 80024b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80024b4:	81a3      	strh	r3, [r4, #12]
 80024b6:	4628      	mov	r0, r5
 80024b8:	463b      	mov	r3, r7
 80024ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024c2:	f000 b8e7 	b.w	8002694 <_write_r>

080024c6 <__sseek>:
 80024c6:	b510      	push	{r4, lr}
 80024c8:	460c      	mov	r4, r1
 80024ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024ce:	f000 f8bd 	bl	800264c <_lseek_r>
 80024d2:	1c43      	adds	r3, r0, #1
 80024d4:	89a3      	ldrh	r3, [r4, #12]
 80024d6:	bf15      	itete	ne
 80024d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80024da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80024de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80024e2:	81a3      	strheq	r3, [r4, #12]
 80024e4:	bf18      	it	ne
 80024e6:	81a3      	strhne	r3, [r4, #12]
 80024e8:	bd10      	pop	{r4, pc}

080024ea <__sclose>:
 80024ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024ee:	f000 b89d 	b.w	800262c <_close_r>

080024f2 <__swbuf_r>:
 80024f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f4:	460e      	mov	r6, r1
 80024f6:	4614      	mov	r4, r2
 80024f8:	4605      	mov	r5, r0
 80024fa:	b118      	cbz	r0, 8002504 <__swbuf_r+0x12>
 80024fc:	6a03      	ldr	r3, [r0, #32]
 80024fe:	b90b      	cbnz	r3, 8002504 <__swbuf_r+0x12>
 8002500:	f7ff ff0e 	bl	8002320 <__sinit>
 8002504:	69a3      	ldr	r3, [r4, #24]
 8002506:	60a3      	str	r3, [r4, #8]
 8002508:	89a3      	ldrh	r3, [r4, #12]
 800250a:	071a      	lsls	r2, r3, #28
 800250c:	d501      	bpl.n	8002512 <__swbuf_r+0x20>
 800250e:	6923      	ldr	r3, [r4, #16]
 8002510:	b943      	cbnz	r3, 8002524 <__swbuf_r+0x32>
 8002512:	4621      	mov	r1, r4
 8002514:	4628      	mov	r0, r5
 8002516:	f000 f82b 	bl	8002570 <__swsetup_r>
 800251a:	b118      	cbz	r0, 8002524 <__swbuf_r+0x32>
 800251c:	f04f 37ff 	mov.w	r7, #4294967295
 8002520:	4638      	mov	r0, r7
 8002522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002524:	6823      	ldr	r3, [r4, #0]
 8002526:	6922      	ldr	r2, [r4, #16]
 8002528:	b2f6      	uxtb	r6, r6
 800252a:	1a98      	subs	r0, r3, r2
 800252c:	6963      	ldr	r3, [r4, #20]
 800252e:	4637      	mov	r7, r6
 8002530:	4283      	cmp	r3, r0
 8002532:	dc05      	bgt.n	8002540 <__swbuf_r+0x4e>
 8002534:	4621      	mov	r1, r4
 8002536:	4628      	mov	r0, r5
 8002538:	f000 fd32 	bl	8002fa0 <_fflush_r>
 800253c:	2800      	cmp	r0, #0
 800253e:	d1ed      	bne.n	800251c <__swbuf_r+0x2a>
 8002540:	68a3      	ldr	r3, [r4, #8]
 8002542:	3b01      	subs	r3, #1
 8002544:	60a3      	str	r3, [r4, #8]
 8002546:	6823      	ldr	r3, [r4, #0]
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	6022      	str	r2, [r4, #0]
 800254c:	701e      	strb	r6, [r3, #0]
 800254e:	6962      	ldr	r2, [r4, #20]
 8002550:	1c43      	adds	r3, r0, #1
 8002552:	429a      	cmp	r2, r3
 8002554:	d004      	beq.n	8002560 <__swbuf_r+0x6e>
 8002556:	89a3      	ldrh	r3, [r4, #12]
 8002558:	07db      	lsls	r3, r3, #31
 800255a:	d5e1      	bpl.n	8002520 <__swbuf_r+0x2e>
 800255c:	2e0a      	cmp	r6, #10
 800255e:	d1df      	bne.n	8002520 <__swbuf_r+0x2e>
 8002560:	4621      	mov	r1, r4
 8002562:	4628      	mov	r0, r5
 8002564:	f000 fd1c 	bl	8002fa0 <_fflush_r>
 8002568:	2800      	cmp	r0, #0
 800256a:	d0d9      	beq.n	8002520 <__swbuf_r+0x2e>
 800256c:	e7d6      	b.n	800251c <__swbuf_r+0x2a>
	...

08002570 <__swsetup_r>:
 8002570:	b538      	push	{r3, r4, r5, lr}
 8002572:	4b29      	ldr	r3, [pc, #164]	@ (8002618 <__swsetup_r+0xa8>)
 8002574:	4605      	mov	r5, r0
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	460c      	mov	r4, r1
 800257a:	b118      	cbz	r0, 8002584 <__swsetup_r+0x14>
 800257c:	6a03      	ldr	r3, [r0, #32]
 800257e:	b90b      	cbnz	r3, 8002584 <__swsetup_r+0x14>
 8002580:	f7ff fece 	bl	8002320 <__sinit>
 8002584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002588:	0719      	lsls	r1, r3, #28
 800258a:	d422      	bmi.n	80025d2 <__swsetup_r+0x62>
 800258c:	06da      	lsls	r2, r3, #27
 800258e:	d407      	bmi.n	80025a0 <__swsetup_r+0x30>
 8002590:	2209      	movs	r2, #9
 8002592:	602a      	str	r2, [r5, #0]
 8002594:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002598:	f04f 30ff 	mov.w	r0, #4294967295
 800259c:	81a3      	strh	r3, [r4, #12]
 800259e:	e033      	b.n	8002608 <__swsetup_r+0x98>
 80025a0:	0758      	lsls	r0, r3, #29
 80025a2:	d512      	bpl.n	80025ca <__swsetup_r+0x5a>
 80025a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80025a6:	b141      	cbz	r1, 80025ba <__swsetup_r+0x4a>
 80025a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80025ac:	4299      	cmp	r1, r3
 80025ae:	d002      	beq.n	80025b6 <__swsetup_r+0x46>
 80025b0:	4628      	mov	r0, r5
 80025b2:	f000 f8af 	bl	8002714 <_free_r>
 80025b6:	2300      	movs	r3, #0
 80025b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80025ba:	89a3      	ldrh	r3, [r4, #12]
 80025bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80025c0:	81a3      	strh	r3, [r4, #12]
 80025c2:	2300      	movs	r3, #0
 80025c4:	6063      	str	r3, [r4, #4]
 80025c6:	6923      	ldr	r3, [r4, #16]
 80025c8:	6023      	str	r3, [r4, #0]
 80025ca:	89a3      	ldrh	r3, [r4, #12]
 80025cc:	f043 0308 	orr.w	r3, r3, #8
 80025d0:	81a3      	strh	r3, [r4, #12]
 80025d2:	6923      	ldr	r3, [r4, #16]
 80025d4:	b94b      	cbnz	r3, 80025ea <__swsetup_r+0x7a>
 80025d6:	89a3      	ldrh	r3, [r4, #12]
 80025d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80025dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025e0:	d003      	beq.n	80025ea <__swsetup_r+0x7a>
 80025e2:	4621      	mov	r1, r4
 80025e4:	4628      	mov	r0, r5
 80025e6:	f000 fd28 	bl	800303a <__smakebuf_r>
 80025ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025ee:	f013 0201 	ands.w	r2, r3, #1
 80025f2:	d00a      	beq.n	800260a <__swsetup_r+0x9a>
 80025f4:	2200      	movs	r2, #0
 80025f6:	60a2      	str	r2, [r4, #8]
 80025f8:	6962      	ldr	r2, [r4, #20]
 80025fa:	4252      	negs	r2, r2
 80025fc:	61a2      	str	r2, [r4, #24]
 80025fe:	6922      	ldr	r2, [r4, #16]
 8002600:	b942      	cbnz	r2, 8002614 <__swsetup_r+0xa4>
 8002602:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002606:	d1c5      	bne.n	8002594 <__swsetup_r+0x24>
 8002608:	bd38      	pop	{r3, r4, r5, pc}
 800260a:	0799      	lsls	r1, r3, #30
 800260c:	bf58      	it	pl
 800260e:	6962      	ldrpl	r2, [r4, #20]
 8002610:	60a2      	str	r2, [r4, #8]
 8002612:	e7f4      	b.n	80025fe <__swsetup_r+0x8e>
 8002614:	2000      	movs	r0, #0
 8002616:	e7f7      	b.n	8002608 <__swsetup_r+0x98>
 8002618:	20000018 	.word	0x20000018

0800261c <memset>:
 800261c:	4603      	mov	r3, r0
 800261e:	4402      	add	r2, r0
 8002620:	4293      	cmp	r3, r2
 8002622:	d100      	bne.n	8002626 <memset+0xa>
 8002624:	4770      	bx	lr
 8002626:	f803 1b01 	strb.w	r1, [r3], #1
 800262a:	e7f9      	b.n	8002620 <memset+0x4>

0800262c <_close_r>:
 800262c:	b538      	push	{r3, r4, r5, lr}
 800262e:	2300      	movs	r3, #0
 8002630:	4d05      	ldr	r5, [pc, #20]	@ (8002648 <_close_r+0x1c>)
 8002632:	4604      	mov	r4, r0
 8002634:	4608      	mov	r0, r1
 8002636:	602b      	str	r3, [r5, #0]
 8002638:	f7fe f8a3 	bl	8000782 <_close>
 800263c:	1c43      	adds	r3, r0, #1
 800263e:	d102      	bne.n	8002646 <_close_r+0x1a>
 8002640:	682b      	ldr	r3, [r5, #0]
 8002642:	b103      	cbz	r3, 8002646 <_close_r+0x1a>
 8002644:	6023      	str	r3, [r4, #0]
 8002646:	bd38      	pop	{r3, r4, r5, pc}
 8002648:	20000268 	.word	0x20000268

0800264c <_lseek_r>:
 800264c:	b538      	push	{r3, r4, r5, lr}
 800264e:	4604      	mov	r4, r0
 8002650:	4608      	mov	r0, r1
 8002652:	4611      	mov	r1, r2
 8002654:	2200      	movs	r2, #0
 8002656:	4d05      	ldr	r5, [pc, #20]	@ (800266c <_lseek_r+0x20>)
 8002658:	602a      	str	r2, [r5, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	f7fe f8b5 	bl	80007ca <_lseek>
 8002660:	1c43      	adds	r3, r0, #1
 8002662:	d102      	bne.n	800266a <_lseek_r+0x1e>
 8002664:	682b      	ldr	r3, [r5, #0]
 8002666:	b103      	cbz	r3, 800266a <_lseek_r+0x1e>
 8002668:	6023      	str	r3, [r4, #0]
 800266a:	bd38      	pop	{r3, r4, r5, pc}
 800266c:	20000268 	.word	0x20000268

08002670 <_read_r>:
 8002670:	b538      	push	{r3, r4, r5, lr}
 8002672:	4604      	mov	r4, r0
 8002674:	4608      	mov	r0, r1
 8002676:	4611      	mov	r1, r2
 8002678:	2200      	movs	r2, #0
 800267a:	4d05      	ldr	r5, [pc, #20]	@ (8002690 <_read_r+0x20>)
 800267c:	602a      	str	r2, [r5, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	f7fe f846 	bl	8000710 <_read>
 8002684:	1c43      	adds	r3, r0, #1
 8002686:	d102      	bne.n	800268e <_read_r+0x1e>
 8002688:	682b      	ldr	r3, [r5, #0]
 800268a:	b103      	cbz	r3, 800268e <_read_r+0x1e>
 800268c:	6023      	str	r3, [r4, #0]
 800268e:	bd38      	pop	{r3, r4, r5, pc}
 8002690:	20000268 	.word	0x20000268

08002694 <_write_r>:
 8002694:	b538      	push	{r3, r4, r5, lr}
 8002696:	4604      	mov	r4, r0
 8002698:	4608      	mov	r0, r1
 800269a:	4611      	mov	r1, r2
 800269c:	2200      	movs	r2, #0
 800269e:	4d05      	ldr	r5, [pc, #20]	@ (80026b4 <_write_r+0x20>)
 80026a0:	602a      	str	r2, [r5, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	f7fe f851 	bl	800074a <_write>
 80026a8:	1c43      	adds	r3, r0, #1
 80026aa:	d102      	bne.n	80026b2 <_write_r+0x1e>
 80026ac:	682b      	ldr	r3, [r5, #0]
 80026ae:	b103      	cbz	r3, 80026b2 <_write_r+0x1e>
 80026b0:	6023      	str	r3, [r4, #0]
 80026b2:	bd38      	pop	{r3, r4, r5, pc}
 80026b4:	20000268 	.word	0x20000268

080026b8 <__errno>:
 80026b8:	4b01      	ldr	r3, [pc, #4]	@ (80026c0 <__errno+0x8>)
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000018 	.word	0x20000018

080026c4 <__libc_init_array>:
 80026c4:	b570      	push	{r4, r5, r6, lr}
 80026c6:	2600      	movs	r6, #0
 80026c8:	4d0c      	ldr	r5, [pc, #48]	@ (80026fc <__libc_init_array+0x38>)
 80026ca:	4c0d      	ldr	r4, [pc, #52]	@ (8002700 <__libc_init_array+0x3c>)
 80026cc:	1b64      	subs	r4, r4, r5
 80026ce:	10a4      	asrs	r4, r4, #2
 80026d0:	42a6      	cmp	r6, r4
 80026d2:	d109      	bne.n	80026e8 <__libc_init_array+0x24>
 80026d4:	f000 fd2e 	bl	8003134 <_init>
 80026d8:	2600      	movs	r6, #0
 80026da:	4d0a      	ldr	r5, [pc, #40]	@ (8002704 <__libc_init_array+0x40>)
 80026dc:	4c0a      	ldr	r4, [pc, #40]	@ (8002708 <__libc_init_array+0x44>)
 80026de:	1b64      	subs	r4, r4, r5
 80026e0:	10a4      	asrs	r4, r4, #2
 80026e2:	42a6      	cmp	r6, r4
 80026e4:	d105      	bne.n	80026f2 <__libc_init_array+0x2e>
 80026e6:	bd70      	pop	{r4, r5, r6, pc}
 80026e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ec:	4798      	blx	r3
 80026ee:	3601      	adds	r6, #1
 80026f0:	e7ee      	b.n	80026d0 <__libc_init_array+0xc>
 80026f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f6:	4798      	blx	r3
 80026f8:	3601      	adds	r6, #1
 80026fa:	e7f2      	b.n	80026e2 <__libc_init_array+0x1e>
 80026fc:	080031f8 	.word	0x080031f8
 8002700:	080031f8 	.word	0x080031f8
 8002704:	080031f8 	.word	0x080031f8
 8002708:	080031fc 	.word	0x080031fc

0800270c <__retarget_lock_init_recursive>:
 800270c:	4770      	bx	lr

0800270e <__retarget_lock_acquire_recursive>:
 800270e:	4770      	bx	lr

08002710 <__retarget_lock_release_recursive>:
 8002710:	4770      	bx	lr
	...

08002714 <_free_r>:
 8002714:	b538      	push	{r3, r4, r5, lr}
 8002716:	4605      	mov	r5, r0
 8002718:	2900      	cmp	r1, #0
 800271a:	d040      	beq.n	800279e <_free_r+0x8a>
 800271c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002720:	1f0c      	subs	r4, r1, #4
 8002722:	2b00      	cmp	r3, #0
 8002724:	bfb8      	it	lt
 8002726:	18e4      	addlt	r4, r4, r3
 8002728:	f000 f8de 	bl	80028e8 <__malloc_lock>
 800272c:	4a1c      	ldr	r2, [pc, #112]	@ (80027a0 <_free_r+0x8c>)
 800272e:	6813      	ldr	r3, [r2, #0]
 8002730:	b933      	cbnz	r3, 8002740 <_free_r+0x2c>
 8002732:	6063      	str	r3, [r4, #4]
 8002734:	6014      	str	r4, [r2, #0]
 8002736:	4628      	mov	r0, r5
 8002738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800273c:	f000 b8da 	b.w	80028f4 <__malloc_unlock>
 8002740:	42a3      	cmp	r3, r4
 8002742:	d908      	bls.n	8002756 <_free_r+0x42>
 8002744:	6820      	ldr	r0, [r4, #0]
 8002746:	1821      	adds	r1, r4, r0
 8002748:	428b      	cmp	r3, r1
 800274a:	bf01      	itttt	eq
 800274c:	6819      	ldreq	r1, [r3, #0]
 800274e:	685b      	ldreq	r3, [r3, #4]
 8002750:	1809      	addeq	r1, r1, r0
 8002752:	6021      	streq	r1, [r4, #0]
 8002754:	e7ed      	b.n	8002732 <_free_r+0x1e>
 8002756:	461a      	mov	r2, r3
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	b10b      	cbz	r3, 8002760 <_free_r+0x4c>
 800275c:	42a3      	cmp	r3, r4
 800275e:	d9fa      	bls.n	8002756 <_free_r+0x42>
 8002760:	6811      	ldr	r1, [r2, #0]
 8002762:	1850      	adds	r0, r2, r1
 8002764:	42a0      	cmp	r0, r4
 8002766:	d10b      	bne.n	8002780 <_free_r+0x6c>
 8002768:	6820      	ldr	r0, [r4, #0]
 800276a:	4401      	add	r1, r0
 800276c:	1850      	adds	r0, r2, r1
 800276e:	4283      	cmp	r3, r0
 8002770:	6011      	str	r1, [r2, #0]
 8002772:	d1e0      	bne.n	8002736 <_free_r+0x22>
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	4408      	add	r0, r1
 800277a:	6010      	str	r0, [r2, #0]
 800277c:	6053      	str	r3, [r2, #4]
 800277e:	e7da      	b.n	8002736 <_free_r+0x22>
 8002780:	d902      	bls.n	8002788 <_free_r+0x74>
 8002782:	230c      	movs	r3, #12
 8002784:	602b      	str	r3, [r5, #0]
 8002786:	e7d6      	b.n	8002736 <_free_r+0x22>
 8002788:	6820      	ldr	r0, [r4, #0]
 800278a:	1821      	adds	r1, r4, r0
 800278c:	428b      	cmp	r3, r1
 800278e:	bf01      	itttt	eq
 8002790:	6819      	ldreq	r1, [r3, #0]
 8002792:	685b      	ldreq	r3, [r3, #4]
 8002794:	1809      	addeq	r1, r1, r0
 8002796:	6021      	streq	r1, [r4, #0]
 8002798:	6063      	str	r3, [r4, #4]
 800279a:	6054      	str	r4, [r2, #4]
 800279c:	e7cb      	b.n	8002736 <_free_r+0x22>
 800279e:	bd38      	pop	{r3, r4, r5, pc}
 80027a0:	20000274 	.word	0x20000274

080027a4 <sbrk_aligned>:
 80027a4:	b570      	push	{r4, r5, r6, lr}
 80027a6:	4e0f      	ldr	r6, [pc, #60]	@ (80027e4 <sbrk_aligned+0x40>)
 80027a8:	460c      	mov	r4, r1
 80027aa:	6831      	ldr	r1, [r6, #0]
 80027ac:	4605      	mov	r5, r0
 80027ae:	b911      	cbnz	r1, 80027b6 <sbrk_aligned+0x12>
 80027b0:	f000 fca2 	bl	80030f8 <_sbrk_r>
 80027b4:	6030      	str	r0, [r6, #0]
 80027b6:	4621      	mov	r1, r4
 80027b8:	4628      	mov	r0, r5
 80027ba:	f000 fc9d 	bl	80030f8 <_sbrk_r>
 80027be:	1c43      	adds	r3, r0, #1
 80027c0:	d103      	bne.n	80027ca <sbrk_aligned+0x26>
 80027c2:	f04f 34ff 	mov.w	r4, #4294967295
 80027c6:	4620      	mov	r0, r4
 80027c8:	bd70      	pop	{r4, r5, r6, pc}
 80027ca:	1cc4      	adds	r4, r0, #3
 80027cc:	f024 0403 	bic.w	r4, r4, #3
 80027d0:	42a0      	cmp	r0, r4
 80027d2:	d0f8      	beq.n	80027c6 <sbrk_aligned+0x22>
 80027d4:	1a21      	subs	r1, r4, r0
 80027d6:	4628      	mov	r0, r5
 80027d8:	f000 fc8e 	bl	80030f8 <_sbrk_r>
 80027dc:	3001      	adds	r0, #1
 80027de:	d1f2      	bne.n	80027c6 <sbrk_aligned+0x22>
 80027e0:	e7ef      	b.n	80027c2 <sbrk_aligned+0x1e>
 80027e2:	bf00      	nop
 80027e4:	20000270 	.word	0x20000270

080027e8 <_malloc_r>:
 80027e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027ec:	1ccd      	adds	r5, r1, #3
 80027ee:	f025 0503 	bic.w	r5, r5, #3
 80027f2:	3508      	adds	r5, #8
 80027f4:	2d0c      	cmp	r5, #12
 80027f6:	bf38      	it	cc
 80027f8:	250c      	movcc	r5, #12
 80027fa:	2d00      	cmp	r5, #0
 80027fc:	4606      	mov	r6, r0
 80027fe:	db01      	blt.n	8002804 <_malloc_r+0x1c>
 8002800:	42a9      	cmp	r1, r5
 8002802:	d904      	bls.n	800280e <_malloc_r+0x26>
 8002804:	230c      	movs	r3, #12
 8002806:	6033      	str	r3, [r6, #0]
 8002808:	2000      	movs	r0, #0
 800280a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800280e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80028e4 <_malloc_r+0xfc>
 8002812:	f000 f869 	bl	80028e8 <__malloc_lock>
 8002816:	f8d8 3000 	ldr.w	r3, [r8]
 800281a:	461c      	mov	r4, r3
 800281c:	bb44      	cbnz	r4, 8002870 <_malloc_r+0x88>
 800281e:	4629      	mov	r1, r5
 8002820:	4630      	mov	r0, r6
 8002822:	f7ff ffbf 	bl	80027a4 <sbrk_aligned>
 8002826:	1c43      	adds	r3, r0, #1
 8002828:	4604      	mov	r4, r0
 800282a:	d158      	bne.n	80028de <_malloc_r+0xf6>
 800282c:	f8d8 4000 	ldr.w	r4, [r8]
 8002830:	4627      	mov	r7, r4
 8002832:	2f00      	cmp	r7, #0
 8002834:	d143      	bne.n	80028be <_malloc_r+0xd6>
 8002836:	2c00      	cmp	r4, #0
 8002838:	d04b      	beq.n	80028d2 <_malloc_r+0xea>
 800283a:	6823      	ldr	r3, [r4, #0]
 800283c:	4639      	mov	r1, r7
 800283e:	4630      	mov	r0, r6
 8002840:	eb04 0903 	add.w	r9, r4, r3
 8002844:	f000 fc58 	bl	80030f8 <_sbrk_r>
 8002848:	4581      	cmp	r9, r0
 800284a:	d142      	bne.n	80028d2 <_malloc_r+0xea>
 800284c:	6821      	ldr	r1, [r4, #0]
 800284e:	4630      	mov	r0, r6
 8002850:	1a6d      	subs	r5, r5, r1
 8002852:	4629      	mov	r1, r5
 8002854:	f7ff ffa6 	bl	80027a4 <sbrk_aligned>
 8002858:	3001      	adds	r0, #1
 800285a:	d03a      	beq.n	80028d2 <_malloc_r+0xea>
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	442b      	add	r3, r5
 8002860:	6023      	str	r3, [r4, #0]
 8002862:	f8d8 3000 	ldr.w	r3, [r8]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	bb62      	cbnz	r2, 80028c4 <_malloc_r+0xdc>
 800286a:	f8c8 7000 	str.w	r7, [r8]
 800286e:	e00f      	b.n	8002890 <_malloc_r+0xa8>
 8002870:	6822      	ldr	r2, [r4, #0]
 8002872:	1b52      	subs	r2, r2, r5
 8002874:	d420      	bmi.n	80028b8 <_malloc_r+0xd0>
 8002876:	2a0b      	cmp	r2, #11
 8002878:	d917      	bls.n	80028aa <_malloc_r+0xc2>
 800287a:	1961      	adds	r1, r4, r5
 800287c:	42a3      	cmp	r3, r4
 800287e:	6025      	str	r5, [r4, #0]
 8002880:	bf18      	it	ne
 8002882:	6059      	strne	r1, [r3, #4]
 8002884:	6863      	ldr	r3, [r4, #4]
 8002886:	bf08      	it	eq
 8002888:	f8c8 1000 	streq.w	r1, [r8]
 800288c:	5162      	str	r2, [r4, r5]
 800288e:	604b      	str	r3, [r1, #4]
 8002890:	4630      	mov	r0, r6
 8002892:	f000 f82f 	bl	80028f4 <__malloc_unlock>
 8002896:	f104 000b 	add.w	r0, r4, #11
 800289a:	1d23      	adds	r3, r4, #4
 800289c:	f020 0007 	bic.w	r0, r0, #7
 80028a0:	1ac2      	subs	r2, r0, r3
 80028a2:	bf1c      	itt	ne
 80028a4:	1a1b      	subne	r3, r3, r0
 80028a6:	50a3      	strne	r3, [r4, r2]
 80028a8:	e7af      	b.n	800280a <_malloc_r+0x22>
 80028aa:	6862      	ldr	r2, [r4, #4]
 80028ac:	42a3      	cmp	r3, r4
 80028ae:	bf0c      	ite	eq
 80028b0:	f8c8 2000 	streq.w	r2, [r8]
 80028b4:	605a      	strne	r2, [r3, #4]
 80028b6:	e7eb      	b.n	8002890 <_malloc_r+0xa8>
 80028b8:	4623      	mov	r3, r4
 80028ba:	6864      	ldr	r4, [r4, #4]
 80028bc:	e7ae      	b.n	800281c <_malloc_r+0x34>
 80028be:	463c      	mov	r4, r7
 80028c0:	687f      	ldr	r7, [r7, #4]
 80028c2:	e7b6      	b.n	8002832 <_malloc_r+0x4a>
 80028c4:	461a      	mov	r2, r3
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	42a3      	cmp	r3, r4
 80028ca:	d1fb      	bne.n	80028c4 <_malloc_r+0xdc>
 80028cc:	2300      	movs	r3, #0
 80028ce:	6053      	str	r3, [r2, #4]
 80028d0:	e7de      	b.n	8002890 <_malloc_r+0xa8>
 80028d2:	230c      	movs	r3, #12
 80028d4:	4630      	mov	r0, r6
 80028d6:	6033      	str	r3, [r6, #0]
 80028d8:	f000 f80c 	bl	80028f4 <__malloc_unlock>
 80028dc:	e794      	b.n	8002808 <_malloc_r+0x20>
 80028de:	6005      	str	r5, [r0, #0]
 80028e0:	e7d6      	b.n	8002890 <_malloc_r+0xa8>
 80028e2:	bf00      	nop
 80028e4:	20000274 	.word	0x20000274

080028e8 <__malloc_lock>:
 80028e8:	4801      	ldr	r0, [pc, #4]	@ (80028f0 <__malloc_lock+0x8>)
 80028ea:	f7ff bf10 	b.w	800270e <__retarget_lock_acquire_recursive>
 80028ee:	bf00      	nop
 80028f0:	2000026c 	.word	0x2000026c

080028f4 <__malloc_unlock>:
 80028f4:	4801      	ldr	r0, [pc, #4]	@ (80028fc <__malloc_unlock+0x8>)
 80028f6:	f7ff bf0b 	b.w	8002710 <__retarget_lock_release_recursive>
 80028fa:	bf00      	nop
 80028fc:	2000026c 	.word	0x2000026c

08002900 <__sfputc_r>:
 8002900:	6893      	ldr	r3, [r2, #8]
 8002902:	b410      	push	{r4}
 8002904:	3b01      	subs	r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	6093      	str	r3, [r2, #8]
 800290a:	da07      	bge.n	800291c <__sfputc_r+0x1c>
 800290c:	6994      	ldr	r4, [r2, #24]
 800290e:	42a3      	cmp	r3, r4
 8002910:	db01      	blt.n	8002916 <__sfputc_r+0x16>
 8002912:	290a      	cmp	r1, #10
 8002914:	d102      	bne.n	800291c <__sfputc_r+0x1c>
 8002916:	bc10      	pop	{r4}
 8002918:	f7ff bdeb 	b.w	80024f2 <__swbuf_r>
 800291c:	6813      	ldr	r3, [r2, #0]
 800291e:	1c58      	adds	r0, r3, #1
 8002920:	6010      	str	r0, [r2, #0]
 8002922:	7019      	strb	r1, [r3, #0]
 8002924:	4608      	mov	r0, r1
 8002926:	bc10      	pop	{r4}
 8002928:	4770      	bx	lr

0800292a <__sfputs_r>:
 800292a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292c:	4606      	mov	r6, r0
 800292e:	460f      	mov	r7, r1
 8002930:	4614      	mov	r4, r2
 8002932:	18d5      	adds	r5, r2, r3
 8002934:	42ac      	cmp	r4, r5
 8002936:	d101      	bne.n	800293c <__sfputs_r+0x12>
 8002938:	2000      	movs	r0, #0
 800293a:	e007      	b.n	800294c <__sfputs_r+0x22>
 800293c:	463a      	mov	r2, r7
 800293e:	4630      	mov	r0, r6
 8002940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002944:	f7ff ffdc 	bl	8002900 <__sfputc_r>
 8002948:	1c43      	adds	r3, r0, #1
 800294a:	d1f3      	bne.n	8002934 <__sfputs_r+0xa>
 800294c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002950 <_vfiprintf_r>:
 8002950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002954:	460d      	mov	r5, r1
 8002956:	4614      	mov	r4, r2
 8002958:	4698      	mov	r8, r3
 800295a:	4606      	mov	r6, r0
 800295c:	b09d      	sub	sp, #116	@ 0x74
 800295e:	b118      	cbz	r0, 8002968 <_vfiprintf_r+0x18>
 8002960:	6a03      	ldr	r3, [r0, #32]
 8002962:	b90b      	cbnz	r3, 8002968 <_vfiprintf_r+0x18>
 8002964:	f7ff fcdc 	bl	8002320 <__sinit>
 8002968:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800296a:	07d9      	lsls	r1, r3, #31
 800296c:	d405      	bmi.n	800297a <_vfiprintf_r+0x2a>
 800296e:	89ab      	ldrh	r3, [r5, #12]
 8002970:	059a      	lsls	r2, r3, #22
 8002972:	d402      	bmi.n	800297a <_vfiprintf_r+0x2a>
 8002974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002976:	f7ff feca 	bl	800270e <__retarget_lock_acquire_recursive>
 800297a:	89ab      	ldrh	r3, [r5, #12]
 800297c:	071b      	lsls	r3, r3, #28
 800297e:	d501      	bpl.n	8002984 <_vfiprintf_r+0x34>
 8002980:	692b      	ldr	r3, [r5, #16]
 8002982:	b99b      	cbnz	r3, 80029ac <_vfiprintf_r+0x5c>
 8002984:	4629      	mov	r1, r5
 8002986:	4630      	mov	r0, r6
 8002988:	f7ff fdf2 	bl	8002570 <__swsetup_r>
 800298c:	b170      	cbz	r0, 80029ac <_vfiprintf_r+0x5c>
 800298e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002990:	07dc      	lsls	r4, r3, #31
 8002992:	d504      	bpl.n	800299e <_vfiprintf_r+0x4e>
 8002994:	f04f 30ff 	mov.w	r0, #4294967295
 8002998:	b01d      	add	sp, #116	@ 0x74
 800299a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800299e:	89ab      	ldrh	r3, [r5, #12]
 80029a0:	0598      	lsls	r0, r3, #22
 80029a2:	d4f7      	bmi.n	8002994 <_vfiprintf_r+0x44>
 80029a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80029a6:	f7ff feb3 	bl	8002710 <__retarget_lock_release_recursive>
 80029aa:	e7f3      	b.n	8002994 <_vfiprintf_r+0x44>
 80029ac:	2300      	movs	r3, #0
 80029ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80029b0:	2320      	movs	r3, #32
 80029b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80029b6:	2330      	movs	r3, #48	@ 0x30
 80029b8:	f04f 0901 	mov.w	r9, #1
 80029bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80029c0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002b6c <_vfiprintf_r+0x21c>
 80029c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80029c8:	4623      	mov	r3, r4
 80029ca:	469a      	mov	sl, r3
 80029cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029d0:	b10a      	cbz	r2, 80029d6 <_vfiprintf_r+0x86>
 80029d2:	2a25      	cmp	r2, #37	@ 0x25
 80029d4:	d1f9      	bne.n	80029ca <_vfiprintf_r+0x7a>
 80029d6:	ebba 0b04 	subs.w	fp, sl, r4
 80029da:	d00b      	beq.n	80029f4 <_vfiprintf_r+0xa4>
 80029dc:	465b      	mov	r3, fp
 80029de:	4622      	mov	r2, r4
 80029e0:	4629      	mov	r1, r5
 80029e2:	4630      	mov	r0, r6
 80029e4:	f7ff ffa1 	bl	800292a <__sfputs_r>
 80029e8:	3001      	adds	r0, #1
 80029ea:	f000 80a7 	beq.w	8002b3c <_vfiprintf_r+0x1ec>
 80029ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80029f0:	445a      	add	r2, fp
 80029f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80029f4:	f89a 3000 	ldrb.w	r3, [sl]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 809f 	beq.w	8002b3c <_vfiprintf_r+0x1ec>
 80029fe:	2300      	movs	r3, #0
 8002a00:	f04f 32ff 	mov.w	r2, #4294967295
 8002a04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a08:	f10a 0a01 	add.w	sl, sl, #1
 8002a0c:	9304      	str	r3, [sp, #16]
 8002a0e:	9307      	str	r3, [sp, #28]
 8002a10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002a14:	931a      	str	r3, [sp, #104]	@ 0x68
 8002a16:	4654      	mov	r4, sl
 8002a18:	2205      	movs	r2, #5
 8002a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a1e:	4853      	ldr	r0, [pc, #332]	@ (8002b6c <_vfiprintf_r+0x21c>)
 8002a20:	f000 fb7a 	bl	8003118 <memchr>
 8002a24:	9a04      	ldr	r2, [sp, #16]
 8002a26:	b9d8      	cbnz	r0, 8002a60 <_vfiprintf_r+0x110>
 8002a28:	06d1      	lsls	r1, r2, #27
 8002a2a:	bf44      	itt	mi
 8002a2c:	2320      	movmi	r3, #32
 8002a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a32:	0713      	lsls	r3, r2, #28
 8002a34:	bf44      	itt	mi
 8002a36:	232b      	movmi	r3, #43	@ 0x2b
 8002a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8002a40:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a42:	d015      	beq.n	8002a70 <_vfiprintf_r+0x120>
 8002a44:	4654      	mov	r4, sl
 8002a46:	2000      	movs	r0, #0
 8002a48:	f04f 0c0a 	mov.w	ip, #10
 8002a4c:	9a07      	ldr	r2, [sp, #28]
 8002a4e:	4621      	mov	r1, r4
 8002a50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a54:	3b30      	subs	r3, #48	@ 0x30
 8002a56:	2b09      	cmp	r3, #9
 8002a58:	d94b      	bls.n	8002af2 <_vfiprintf_r+0x1a2>
 8002a5a:	b1b0      	cbz	r0, 8002a8a <_vfiprintf_r+0x13a>
 8002a5c:	9207      	str	r2, [sp, #28]
 8002a5e:	e014      	b.n	8002a8a <_vfiprintf_r+0x13a>
 8002a60:	eba0 0308 	sub.w	r3, r0, r8
 8002a64:	fa09 f303 	lsl.w	r3, r9, r3
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	46a2      	mov	sl, r4
 8002a6c:	9304      	str	r3, [sp, #16]
 8002a6e:	e7d2      	b.n	8002a16 <_vfiprintf_r+0xc6>
 8002a70:	9b03      	ldr	r3, [sp, #12]
 8002a72:	1d19      	adds	r1, r3, #4
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	9103      	str	r1, [sp, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	bfbb      	ittet	lt
 8002a7c:	425b      	neglt	r3, r3
 8002a7e:	f042 0202 	orrlt.w	r2, r2, #2
 8002a82:	9307      	strge	r3, [sp, #28]
 8002a84:	9307      	strlt	r3, [sp, #28]
 8002a86:	bfb8      	it	lt
 8002a88:	9204      	strlt	r2, [sp, #16]
 8002a8a:	7823      	ldrb	r3, [r4, #0]
 8002a8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8002a8e:	d10a      	bne.n	8002aa6 <_vfiprintf_r+0x156>
 8002a90:	7863      	ldrb	r3, [r4, #1]
 8002a92:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a94:	d132      	bne.n	8002afc <_vfiprintf_r+0x1ac>
 8002a96:	9b03      	ldr	r3, [sp, #12]
 8002a98:	3402      	adds	r4, #2
 8002a9a:	1d1a      	adds	r2, r3, #4
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	9203      	str	r2, [sp, #12]
 8002aa0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002aa4:	9305      	str	r3, [sp, #20]
 8002aa6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002b70 <_vfiprintf_r+0x220>
 8002aaa:	2203      	movs	r2, #3
 8002aac:	4650      	mov	r0, sl
 8002aae:	7821      	ldrb	r1, [r4, #0]
 8002ab0:	f000 fb32 	bl	8003118 <memchr>
 8002ab4:	b138      	cbz	r0, 8002ac6 <_vfiprintf_r+0x176>
 8002ab6:	2240      	movs	r2, #64	@ 0x40
 8002ab8:	9b04      	ldr	r3, [sp, #16]
 8002aba:	eba0 000a 	sub.w	r0, r0, sl
 8002abe:	4082      	lsls	r2, r0
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	3401      	adds	r4, #1
 8002ac4:	9304      	str	r3, [sp, #16]
 8002ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002aca:	2206      	movs	r2, #6
 8002acc:	4829      	ldr	r0, [pc, #164]	@ (8002b74 <_vfiprintf_r+0x224>)
 8002ace:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002ad2:	f000 fb21 	bl	8003118 <memchr>
 8002ad6:	2800      	cmp	r0, #0
 8002ad8:	d03f      	beq.n	8002b5a <_vfiprintf_r+0x20a>
 8002ada:	4b27      	ldr	r3, [pc, #156]	@ (8002b78 <_vfiprintf_r+0x228>)
 8002adc:	bb1b      	cbnz	r3, 8002b26 <_vfiprintf_r+0x1d6>
 8002ade:	9b03      	ldr	r3, [sp, #12]
 8002ae0:	3307      	adds	r3, #7
 8002ae2:	f023 0307 	bic.w	r3, r3, #7
 8002ae6:	3308      	adds	r3, #8
 8002ae8:	9303      	str	r3, [sp, #12]
 8002aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002aec:	443b      	add	r3, r7
 8002aee:	9309      	str	r3, [sp, #36]	@ 0x24
 8002af0:	e76a      	b.n	80029c8 <_vfiprintf_r+0x78>
 8002af2:	460c      	mov	r4, r1
 8002af4:	2001      	movs	r0, #1
 8002af6:	fb0c 3202 	mla	r2, ip, r2, r3
 8002afa:	e7a8      	b.n	8002a4e <_vfiprintf_r+0xfe>
 8002afc:	2300      	movs	r3, #0
 8002afe:	f04f 0c0a 	mov.w	ip, #10
 8002b02:	4619      	mov	r1, r3
 8002b04:	3401      	adds	r4, #1
 8002b06:	9305      	str	r3, [sp, #20]
 8002b08:	4620      	mov	r0, r4
 8002b0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b0e:	3a30      	subs	r2, #48	@ 0x30
 8002b10:	2a09      	cmp	r2, #9
 8002b12:	d903      	bls.n	8002b1c <_vfiprintf_r+0x1cc>
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0c6      	beq.n	8002aa6 <_vfiprintf_r+0x156>
 8002b18:	9105      	str	r1, [sp, #20]
 8002b1a:	e7c4      	b.n	8002aa6 <_vfiprintf_r+0x156>
 8002b1c:	4604      	mov	r4, r0
 8002b1e:	2301      	movs	r3, #1
 8002b20:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b24:	e7f0      	b.n	8002b08 <_vfiprintf_r+0x1b8>
 8002b26:	ab03      	add	r3, sp, #12
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	462a      	mov	r2, r5
 8002b2c:	4630      	mov	r0, r6
 8002b2e:	4b13      	ldr	r3, [pc, #76]	@ (8002b7c <_vfiprintf_r+0x22c>)
 8002b30:	a904      	add	r1, sp, #16
 8002b32:	f3af 8000 	nop.w
 8002b36:	4607      	mov	r7, r0
 8002b38:	1c78      	adds	r0, r7, #1
 8002b3a:	d1d6      	bne.n	8002aea <_vfiprintf_r+0x19a>
 8002b3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002b3e:	07d9      	lsls	r1, r3, #31
 8002b40:	d405      	bmi.n	8002b4e <_vfiprintf_r+0x1fe>
 8002b42:	89ab      	ldrh	r3, [r5, #12]
 8002b44:	059a      	lsls	r2, r3, #22
 8002b46:	d402      	bmi.n	8002b4e <_vfiprintf_r+0x1fe>
 8002b48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002b4a:	f7ff fde1 	bl	8002710 <__retarget_lock_release_recursive>
 8002b4e:	89ab      	ldrh	r3, [r5, #12]
 8002b50:	065b      	lsls	r3, r3, #25
 8002b52:	f53f af1f 	bmi.w	8002994 <_vfiprintf_r+0x44>
 8002b56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002b58:	e71e      	b.n	8002998 <_vfiprintf_r+0x48>
 8002b5a:	ab03      	add	r3, sp, #12
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	462a      	mov	r2, r5
 8002b60:	4630      	mov	r0, r6
 8002b62:	4b06      	ldr	r3, [pc, #24]	@ (8002b7c <_vfiprintf_r+0x22c>)
 8002b64:	a904      	add	r1, sp, #16
 8002b66:	f000 f87d 	bl	8002c64 <_printf_i>
 8002b6a:	e7e4      	b.n	8002b36 <_vfiprintf_r+0x1e6>
 8002b6c:	080031c2 	.word	0x080031c2
 8002b70:	080031c8 	.word	0x080031c8
 8002b74:	080031cc 	.word	0x080031cc
 8002b78:	00000000 	.word	0x00000000
 8002b7c:	0800292b 	.word	0x0800292b

08002b80 <_printf_common>:
 8002b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b84:	4616      	mov	r6, r2
 8002b86:	4698      	mov	r8, r3
 8002b88:	688a      	ldr	r2, [r1, #8]
 8002b8a:	690b      	ldr	r3, [r1, #16]
 8002b8c:	4607      	mov	r7, r0
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	bfb8      	it	lt
 8002b92:	4613      	movlt	r3, r2
 8002b94:	6033      	str	r3, [r6, #0]
 8002b96:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002b9a:	460c      	mov	r4, r1
 8002b9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002ba0:	b10a      	cbz	r2, 8002ba6 <_printf_common+0x26>
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	6033      	str	r3, [r6, #0]
 8002ba6:	6823      	ldr	r3, [r4, #0]
 8002ba8:	0699      	lsls	r1, r3, #26
 8002baa:	bf42      	ittt	mi
 8002bac:	6833      	ldrmi	r3, [r6, #0]
 8002bae:	3302      	addmi	r3, #2
 8002bb0:	6033      	strmi	r3, [r6, #0]
 8002bb2:	6825      	ldr	r5, [r4, #0]
 8002bb4:	f015 0506 	ands.w	r5, r5, #6
 8002bb8:	d106      	bne.n	8002bc8 <_printf_common+0x48>
 8002bba:	f104 0a19 	add.w	sl, r4, #25
 8002bbe:	68e3      	ldr	r3, [r4, #12]
 8002bc0:	6832      	ldr	r2, [r6, #0]
 8002bc2:	1a9b      	subs	r3, r3, r2
 8002bc4:	42ab      	cmp	r3, r5
 8002bc6:	dc2b      	bgt.n	8002c20 <_printf_common+0xa0>
 8002bc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002bcc:	6822      	ldr	r2, [r4, #0]
 8002bce:	3b00      	subs	r3, #0
 8002bd0:	bf18      	it	ne
 8002bd2:	2301      	movne	r3, #1
 8002bd4:	0692      	lsls	r2, r2, #26
 8002bd6:	d430      	bmi.n	8002c3a <_printf_common+0xba>
 8002bd8:	4641      	mov	r1, r8
 8002bda:	4638      	mov	r0, r7
 8002bdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002be0:	47c8      	blx	r9
 8002be2:	3001      	adds	r0, #1
 8002be4:	d023      	beq.n	8002c2e <_printf_common+0xae>
 8002be6:	6823      	ldr	r3, [r4, #0]
 8002be8:	6922      	ldr	r2, [r4, #16]
 8002bea:	f003 0306 	and.w	r3, r3, #6
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	bf14      	ite	ne
 8002bf2:	2500      	movne	r5, #0
 8002bf4:	6833      	ldreq	r3, [r6, #0]
 8002bf6:	f04f 0600 	mov.w	r6, #0
 8002bfa:	bf08      	it	eq
 8002bfc:	68e5      	ldreq	r5, [r4, #12]
 8002bfe:	f104 041a 	add.w	r4, r4, #26
 8002c02:	bf08      	it	eq
 8002c04:	1aed      	subeq	r5, r5, r3
 8002c06:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002c0a:	bf08      	it	eq
 8002c0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c10:	4293      	cmp	r3, r2
 8002c12:	bfc4      	itt	gt
 8002c14:	1a9b      	subgt	r3, r3, r2
 8002c16:	18ed      	addgt	r5, r5, r3
 8002c18:	42b5      	cmp	r5, r6
 8002c1a:	d11a      	bne.n	8002c52 <_printf_common+0xd2>
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	e008      	b.n	8002c32 <_printf_common+0xb2>
 8002c20:	2301      	movs	r3, #1
 8002c22:	4652      	mov	r2, sl
 8002c24:	4641      	mov	r1, r8
 8002c26:	4638      	mov	r0, r7
 8002c28:	47c8      	blx	r9
 8002c2a:	3001      	adds	r0, #1
 8002c2c:	d103      	bne.n	8002c36 <_printf_common+0xb6>
 8002c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c36:	3501      	adds	r5, #1
 8002c38:	e7c1      	b.n	8002bbe <_printf_common+0x3e>
 8002c3a:	2030      	movs	r0, #48	@ 0x30
 8002c3c:	18e1      	adds	r1, r4, r3
 8002c3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002c48:	4422      	add	r2, r4
 8002c4a:	3302      	adds	r3, #2
 8002c4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002c50:	e7c2      	b.n	8002bd8 <_printf_common+0x58>
 8002c52:	2301      	movs	r3, #1
 8002c54:	4622      	mov	r2, r4
 8002c56:	4641      	mov	r1, r8
 8002c58:	4638      	mov	r0, r7
 8002c5a:	47c8      	blx	r9
 8002c5c:	3001      	adds	r0, #1
 8002c5e:	d0e6      	beq.n	8002c2e <_printf_common+0xae>
 8002c60:	3601      	adds	r6, #1
 8002c62:	e7d9      	b.n	8002c18 <_printf_common+0x98>

08002c64 <_printf_i>:
 8002c64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c68:	7e0f      	ldrb	r7, [r1, #24]
 8002c6a:	4691      	mov	r9, r2
 8002c6c:	2f78      	cmp	r7, #120	@ 0x78
 8002c6e:	4680      	mov	r8, r0
 8002c70:	460c      	mov	r4, r1
 8002c72:	469a      	mov	sl, r3
 8002c74:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002c76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002c7a:	d807      	bhi.n	8002c8c <_printf_i+0x28>
 8002c7c:	2f62      	cmp	r7, #98	@ 0x62
 8002c7e:	d80a      	bhi.n	8002c96 <_printf_i+0x32>
 8002c80:	2f00      	cmp	r7, #0
 8002c82:	f000 80d1 	beq.w	8002e28 <_printf_i+0x1c4>
 8002c86:	2f58      	cmp	r7, #88	@ 0x58
 8002c88:	f000 80b8 	beq.w	8002dfc <_printf_i+0x198>
 8002c8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002c94:	e03a      	b.n	8002d0c <_printf_i+0xa8>
 8002c96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002c9a:	2b15      	cmp	r3, #21
 8002c9c:	d8f6      	bhi.n	8002c8c <_printf_i+0x28>
 8002c9e:	a101      	add	r1, pc, #4	@ (adr r1, 8002ca4 <_printf_i+0x40>)
 8002ca0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ca4:	08002cfd 	.word	0x08002cfd
 8002ca8:	08002d11 	.word	0x08002d11
 8002cac:	08002c8d 	.word	0x08002c8d
 8002cb0:	08002c8d 	.word	0x08002c8d
 8002cb4:	08002c8d 	.word	0x08002c8d
 8002cb8:	08002c8d 	.word	0x08002c8d
 8002cbc:	08002d11 	.word	0x08002d11
 8002cc0:	08002c8d 	.word	0x08002c8d
 8002cc4:	08002c8d 	.word	0x08002c8d
 8002cc8:	08002c8d 	.word	0x08002c8d
 8002ccc:	08002c8d 	.word	0x08002c8d
 8002cd0:	08002e0f 	.word	0x08002e0f
 8002cd4:	08002d3b 	.word	0x08002d3b
 8002cd8:	08002dc9 	.word	0x08002dc9
 8002cdc:	08002c8d 	.word	0x08002c8d
 8002ce0:	08002c8d 	.word	0x08002c8d
 8002ce4:	08002e31 	.word	0x08002e31
 8002ce8:	08002c8d 	.word	0x08002c8d
 8002cec:	08002d3b 	.word	0x08002d3b
 8002cf0:	08002c8d 	.word	0x08002c8d
 8002cf4:	08002c8d 	.word	0x08002c8d
 8002cf8:	08002dd1 	.word	0x08002dd1
 8002cfc:	6833      	ldr	r3, [r6, #0]
 8002cfe:	1d1a      	adds	r2, r3, #4
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6032      	str	r2, [r6, #0]
 8002d04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e09c      	b.n	8002e4a <_printf_i+0x1e6>
 8002d10:	6833      	ldr	r3, [r6, #0]
 8002d12:	6820      	ldr	r0, [r4, #0]
 8002d14:	1d19      	adds	r1, r3, #4
 8002d16:	6031      	str	r1, [r6, #0]
 8002d18:	0606      	lsls	r6, r0, #24
 8002d1a:	d501      	bpl.n	8002d20 <_printf_i+0xbc>
 8002d1c:	681d      	ldr	r5, [r3, #0]
 8002d1e:	e003      	b.n	8002d28 <_printf_i+0xc4>
 8002d20:	0645      	lsls	r5, r0, #25
 8002d22:	d5fb      	bpl.n	8002d1c <_printf_i+0xb8>
 8002d24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002d28:	2d00      	cmp	r5, #0
 8002d2a:	da03      	bge.n	8002d34 <_printf_i+0xd0>
 8002d2c:	232d      	movs	r3, #45	@ 0x2d
 8002d2e:	426d      	negs	r5, r5
 8002d30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d34:	230a      	movs	r3, #10
 8002d36:	4858      	ldr	r0, [pc, #352]	@ (8002e98 <_printf_i+0x234>)
 8002d38:	e011      	b.n	8002d5e <_printf_i+0xfa>
 8002d3a:	6821      	ldr	r1, [r4, #0]
 8002d3c:	6833      	ldr	r3, [r6, #0]
 8002d3e:	0608      	lsls	r0, r1, #24
 8002d40:	f853 5b04 	ldr.w	r5, [r3], #4
 8002d44:	d402      	bmi.n	8002d4c <_printf_i+0xe8>
 8002d46:	0649      	lsls	r1, r1, #25
 8002d48:	bf48      	it	mi
 8002d4a:	b2ad      	uxthmi	r5, r5
 8002d4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8002d4e:	6033      	str	r3, [r6, #0]
 8002d50:	bf14      	ite	ne
 8002d52:	230a      	movne	r3, #10
 8002d54:	2308      	moveq	r3, #8
 8002d56:	4850      	ldr	r0, [pc, #320]	@ (8002e98 <_printf_i+0x234>)
 8002d58:	2100      	movs	r1, #0
 8002d5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002d5e:	6866      	ldr	r6, [r4, #4]
 8002d60:	2e00      	cmp	r6, #0
 8002d62:	60a6      	str	r6, [r4, #8]
 8002d64:	db05      	blt.n	8002d72 <_printf_i+0x10e>
 8002d66:	6821      	ldr	r1, [r4, #0]
 8002d68:	432e      	orrs	r6, r5
 8002d6a:	f021 0104 	bic.w	r1, r1, #4
 8002d6e:	6021      	str	r1, [r4, #0]
 8002d70:	d04b      	beq.n	8002e0a <_printf_i+0x1a6>
 8002d72:	4616      	mov	r6, r2
 8002d74:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d78:	fb03 5711 	mls	r7, r3, r1, r5
 8002d7c:	5dc7      	ldrb	r7, [r0, r7]
 8002d7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d82:	462f      	mov	r7, r5
 8002d84:	42bb      	cmp	r3, r7
 8002d86:	460d      	mov	r5, r1
 8002d88:	d9f4      	bls.n	8002d74 <_printf_i+0x110>
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d10b      	bne.n	8002da6 <_printf_i+0x142>
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	07df      	lsls	r7, r3, #31
 8002d92:	d508      	bpl.n	8002da6 <_printf_i+0x142>
 8002d94:	6923      	ldr	r3, [r4, #16]
 8002d96:	6861      	ldr	r1, [r4, #4]
 8002d98:	4299      	cmp	r1, r3
 8002d9a:	bfde      	ittt	le
 8002d9c:	2330      	movle	r3, #48	@ 0x30
 8002d9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002da2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002da6:	1b92      	subs	r2, r2, r6
 8002da8:	6122      	str	r2, [r4, #16]
 8002daa:	464b      	mov	r3, r9
 8002dac:	4621      	mov	r1, r4
 8002dae:	4640      	mov	r0, r8
 8002db0:	f8cd a000 	str.w	sl, [sp]
 8002db4:	aa03      	add	r2, sp, #12
 8002db6:	f7ff fee3 	bl	8002b80 <_printf_common>
 8002dba:	3001      	adds	r0, #1
 8002dbc:	d14a      	bne.n	8002e54 <_printf_i+0x1f0>
 8002dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc2:	b004      	add	sp, #16
 8002dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	f043 0320 	orr.w	r3, r3, #32
 8002dce:	6023      	str	r3, [r4, #0]
 8002dd0:	2778      	movs	r7, #120	@ 0x78
 8002dd2:	4832      	ldr	r0, [pc, #200]	@ (8002e9c <_printf_i+0x238>)
 8002dd4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002dd8:	6823      	ldr	r3, [r4, #0]
 8002dda:	6831      	ldr	r1, [r6, #0]
 8002ddc:	061f      	lsls	r7, r3, #24
 8002dde:	f851 5b04 	ldr.w	r5, [r1], #4
 8002de2:	d402      	bmi.n	8002dea <_printf_i+0x186>
 8002de4:	065f      	lsls	r7, r3, #25
 8002de6:	bf48      	it	mi
 8002de8:	b2ad      	uxthmi	r5, r5
 8002dea:	6031      	str	r1, [r6, #0]
 8002dec:	07d9      	lsls	r1, r3, #31
 8002dee:	bf44      	itt	mi
 8002df0:	f043 0320 	orrmi.w	r3, r3, #32
 8002df4:	6023      	strmi	r3, [r4, #0]
 8002df6:	b11d      	cbz	r5, 8002e00 <_printf_i+0x19c>
 8002df8:	2310      	movs	r3, #16
 8002dfa:	e7ad      	b.n	8002d58 <_printf_i+0xf4>
 8002dfc:	4826      	ldr	r0, [pc, #152]	@ (8002e98 <_printf_i+0x234>)
 8002dfe:	e7e9      	b.n	8002dd4 <_printf_i+0x170>
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	f023 0320 	bic.w	r3, r3, #32
 8002e06:	6023      	str	r3, [r4, #0]
 8002e08:	e7f6      	b.n	8002df8 <_printf_i+0x194>
 8002e0a:	4616      	mov	r6, r2
 8002e0c:	e7bd      	b.n	8002d8a <_printf_i+0x126>
 8002e0e:	6833      	ldr	r3, [r6, #0]
 8002e10:	6825      	ldr	r5, [r4, #0]
 8002e12:	1d18      	adds	r0, r3, #4
 8002e14:	6961      	ldr	r1, [r4, #20]
 8002e16:	6030      	str	r0, [r6, #0]
 8002e18:	062e      	lsls	r6, r5, #24
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	d501      	bpl.n	8002e22 <_printf_i+0x1be>
 8002e1e:	6019      	str	r1, [r3, #0]
 8002e20:	e002      	b.n	8002e28 <_printf_i+0x1c4>
 8002e22:	0668      	lsls	r0, r5, #25
 8002e24:	d5fb      	bpl.n	8002e1e <_printf_i+0x1ba>
 8002e26:	8019      	strh	r1, [r3, #0]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	4616      	mov	r6, r2
 8002e2c:	6123      	str	r3, [r4, #16]
 8002e2e:	e7bc      	b.n	8002daa <_printf_i+0x146>
 8002e30:	6833      	ldr	r3, [r6, #0]
 8002e32:	2100      	movs	r1, #0
 8002e34:	1d1a      	adds	r2, r3, #4
 8002e36:	6032      	str	r2, [r6, #0]
 8002e38:	681e      	ldr	r6, [r3, #0]
 8002e3a:	6862      	ldr	r2, [r4, #4]
 8002e3c:	4630      	mov	r0, r6
 8002e3e:	f000 f96b 	bl	8003118 <memchr>
 8002e42:	b108      	cbz	r0, 8002e48 <_printf_i+0x1e4>
 8002e44:	1b80      	subs	r0, r0, r6
 8002e46:	6060      	str	r0, [r4, #4]
 8002e48:	6863      	ldr	r3, [r4, #4]
 8002e4a:	6123      	str	r3, [r4, #16]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e52:	e7aa      	b.n	8002daa <_printf_i+0x146>
 8002e54:	4632      	mov	r2, r6
 8002e56:	4649      	mov	r1, r9
 8002e58:	4640      	mov	r0, r8
 8002e5a:	6923      	ldr	r3, [r4, #16]
 8002e5c:	47d0      	blx	sl
 8002e5e:	3001      	adds	r0, #1
 8002e60:	d0ad      	beq.n	8002dbe <_printf_i+0x15a>
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	079b      	lsls	r3, r3, #30
 8002e66:	d413      	bmi.n	8002e90 <_printf_i+0x22c>
 8002e68:	68e0      	ldr	r0, [r4, #12]
 8002e6a:	9b03      	ldr	r3, [sp, #12]
 8002e6c:	4298      	cmp	r0, r3
 8002e6e:	bfb8      	it	lt
 8002e70:	4618      	movlt	r0, r3
 8002e72:	e7a6      	b.n	8002dc2 <_printf_i+0x15e>
 8002e74:	2301      	movs	r3, #1
 8002e76:	4632      	mov	r2, r6
 8002e78:	4649      	mov	r1, r9
 8002e7a:	4640      	mov	r0, r8
 8002e7c:	47d0      	blx	sl
 8002e7e:	3001      	adds	r0, #1
 8002e80:	d09d      	beq.n	8002dbe <_printf_i+0x15a>
 8002e82:	3501      	adds	r5, #1
 8002e84:	68e3      	ldr	r3, [r4, #12]
 8002e86:	9903      	ldr	r1, [sp, #12]
 8002e88:	1a5b      	subs	r3, r3, r1
 8002e8a:	42ab      	cmp	r3, r5
 8002e8c:	dcf2      	bgt.n	8002e74 <_printf_i+0x210>
 8002e8e:	e7eb      	b.n	8002e68 <_printf_i+0x204>
 8002e90:	2500      	movs	r5, #0
 8002e92:	f104 0619 	add.w	r6, r4, #25
 8002e96:	e7f5      	b.n	8002e84 <_printf_i+0x220>
 8002e98:	080031d3 	.word	0x080031d3
 8002e9c:	080031e4 	.word	0x080031e4

08002ea0 <__sflush_r>:
 8002ea0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea6:	0716      	lsls	r6, r2, #28
 8002ea8:	4605      	mov	r5, r0
 8002eaa:	460c      	mov	r4, r1
 8002eac:	d454      	bmi.n	8002f58 <__sflush_r+0xb8>
 8002eae:	684b      	ldr	r3, [r1, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	dc02      	bgt.n	8002eba <__sflush_r+0x1a>
 8002eb4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	dd48      	ble.n	8002f4c <__sflush_r+0xac>
 8002eba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002ebc:	2e00      	cmp	r6, #0
 8002ebe:	d045      	beq.n	8002f4c <__sflush_r+0xac>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002ec6:	682f      	ldr	r7, [r5, #0]
 8002ec8:	6a21      	ldr	r1, [r4, #32]
 8002eca:	602b      	str	r3, [r5, #0]
 8002ecc:	d030      	beq.n	8002f30 <__sflush_r+0x90>
 8002ece:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002ed0:	89a3      	ldrh	r3, [r4, #12]
 8002ed2:	0759      	lsls	r1, r3, #29
 8002ed4:	d505      	bpl.n	8002ee2 <__sflush_r+0x42>
 8002ed6:	6863      	ldr	r3, [r4, #4]
 8002ed8:	1ad2      	subs	r2, r2, r3
 8002eda:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002edc:	b10b      	cbz	r3, 8002ee2 <__sflush_r+0x42>
 8002ede:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002ee0:	1ad2      	subs	r2, r2, r3
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	4628      	mov	r0, r5
 8002ee6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002ee8:	6a21      	ldr	r1, [r4, #32]
 8002eea:	47b0      	blx	r6
 8002eec:	1c43      	adds	r3, r0, #1
 8002eee:	89a3      	ldrh	r3, [r4, #12]
 8002ef0:	d106      	bne.n	8002f00 <__sflush_r+0x60>
 8002ef2:	6829      	ldr	r1, [r5, #0]
 8002ef4:	291d      	cmp	r1, #29
 8002ef6:	d82b      	bhi.n	8002f50 <__sflush_r+0xb0>
 8002ef8:	4a28      	ldr	r2, [pc, #160]	@ (8002f9c <__sflush_r+0xfc>)
 8002efa:	40ca      	lsrs	r2, r1
 8002efc:	07d6      	lsls	r6, r2, #31
 8002efe:	d527      	bpl.n	8002f50 <__sflush_r+0xb0>
 8002f00:	2200      	movs	r2, #0
 8002f02:	6062      	str	r2, [r4, #4]
 8002f04:	6922      	ldr	r2, [r4, #16]
 8002f06:	04d9      	lsls	r1, r3, #19
 8002f08:	6022      	str	r2, [r4, #0]
 8002f0a:	d504      	bpl.n	8002f16 <__sflush_r+0x76>
 8002f0c:	1c42      	adds	r2, r0, #1
 8002f0e:	d101      	bne.n	8002f14 <__sflush_r+0x74>
 8002f10:	682b      	ldr	r3, [r5, #0]
 8002f12:	b903      	cbnz	r3, 8002f16 <__sflush_r+0x76>
 8002f14:	6560      	str	r0, [r4, #84]	@ 0x54
 8002f16:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f18:	602f      	str	r7, [r5, #0]
 8002f1a:	b1b9      	cbz	r1, 8002f4c <__sflush_r+0xac>
 8002f1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002f20:	4299      	cmp	r1, r3
 8002f22:	d002      	beq.n	8002f2a <__sflush_r+0x8a>
 8002f24:	4628      	mov	r0, r5
 8002f26:	f7ff fbf5 	bl	8002714 <_free_r>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f2e:	e00d      	b.n	8002f4c <__sflush_r+0xac>
 8002f30:	2301      	movs	r3, #1
 8002f32:	4628      	mov	r0, r5
 8002f34:	47b0      	blx	r6
 8002f36:	4602      	mov	r2, r0
 8002f38:	1c50      	adds	r0, r2, #1
 8002f3a:	d1c9      	bne.n	8002ed0 <__sflush_r+0x30>
 8002f3c:	682b      	ldr	r3, [r5, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0c6      	beq.n	8002ed0 <__sflush_r+0x30>
 8002f42:	2b1d      	cmp	r3, #29
 8002f44:	d001      	beq.n	8002f4a <__sflush_r+0xaa>
 8002f46:	2b16      	cmp	r3, #22
 8002f48:	d11d      	bne.n	8002f86 <__sflush_r+0xe6>
 8002f4a:	602f      	str	r7, [r5, #0]
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	e021      	b.n	8002f94 <__sflush_r+0xf4>
 8002f50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f54:	b21b      	sxth	r3, r3
 8002f56:	e01a      	b.n	8002f8e <__sflush_r+0xee>
 8002f58:	690f      	ldr	r7, [r1, #16]
 8002f5a:	2f00      	cmp	r7, #0
 8002f5c:	d0f6      	beq.n	8002f4c <__sflush_r+0xac>
 8002f5e:	0793      	lsls	r3, r2, #30
 8002f60:	bf18      	it	ne
 8002f62:	2300      	movne	r3, #0
 8002f64:	680e      	ldr	r6, [r1, #0]
 8002f66:	bf08      	it	eq
 8002f68:	694b      	ldreq	r3, [r1, #20]
 8002f6a:	1bf6      	subs	r6, r6, r7
 8002f6c:	600f      	str	r7, [r1, #0]
 8002f6e:	608b      	str	r3, [r1, #8]
 8002f70:	2e00      	cmp	r6, #0
 8002f72:	ddeb      	ble.n	8002f4c <__sflush_r+0xac>
 8002f74:	4633      	mov	r3, r6
 8002f76:	463a      	mov	r2, r7
 8002f78:	4628      	mov	r0, r5
 8002f7a:	6a21      	ldr	r1, [r4, #32]
 8002f7c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002f80:	47e0      	blx	ip
 8002f82:	2800      	cmp	r0, #0
 8002f84:	dc07      	bgt.n	8002f96 <__sflush_r+0xf6>
 8002f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f92:	81a3      	strh	r3, [r4, #12]
 8002f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f96:	4407      	add	r7, r0
 8002f98:	1a36      	subs	r6, r6, r0
 8002f9a:	e7e9      	b.n	8002f70 <__sflush_r+0xd0>
 8002f9c:	20400001 	.word	0x20400001

08002fa0 <_fflush_r>:
 8002fa0:	b538      	push	{r3, r4, r5, lr}
 8002fa2:	690b      	ldr	r3, [r1, #16]
 8002fa4:	4605      	mov	r5, r0
 8002fa6:	460c      	mov	r4, r1
 8002fa8:	b913      	cbnz	r3, 8002fb0 <_fflush_r+0x10>
 8002faa:	2500      	movs	r5, #0
 8002fac:	4628      	mov	r0, r5
 8002fae:	bd38      	pop	{r3, r4, r5, pc}
 8002fb0:	b118      	cbz	r0, 8002fba <_fflush_r+0x1a>
 8002fb2:	6a03      	ldr	r3, [r0, #32]
 8002fb4:	b90b      	cbnz	r3, 8002fba <_fflush_r+0x1a>
 8002fb6:	f7ff f9b3 	bl	8002320 <__sinit>
 8002fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f3      	beq.n	8002faa <_fflush_r+0xa>
 8002fc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002fc4:	07d0      	lsls	r0, r2, #31
 8002fc6:	d404      	bmi.n	8002fd2 <_fflush_r+0x32>
 8002fc8:	0599      	lsls	r1, r3, #22
 8002fca:	d402      	bmi.n	8002fd2 <_fflush_r+0x32>
 8002fcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002fce:	f7ff fb9e 	bl	800270e <__retarget_lock_acquire_recursive>
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	4621      	mov	r1, r4
 8002fd6:	f7ff ff63 	bl	8002ea0 <__sflush_r>
 8002fda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002fdc:	4605      	mov	r5, r0
 8002fde:	07da      	lsls	r2, r3, #31
 8002fe0:	d4e4      	bmi.n	8002fac <_fflush_r+0xc>
 8002fe2:	89a3      	ldrh	r3, [r4, #12]
 8002fe4:	059b      	lsls	r3, r3, #22
 8002fe6:	d4e1      	bmi.n	8002fac <_fflush_r+0xc>
 8002fe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002fea:	f7ff fb91 	bl	8002710 <__retarget_lock_release_recursive>
 8002fee:	e7dd      	b.n	8002fac <_fflush_r+0xc>

08002ff0 <__swhatbuf_r>:
 8002ff0:	b570      	push	{r4, r5, r6, lr}
 8002ff2:	460c      	mov	r4, r1
 8002ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ff8:	4615      	mov	r5, r2
 8002ffa:	2900      	cmp	r1, #0
 8002ffc:	461e      	mov	r6, r3
 8002ffe:	b096      	sub	sp, #88	@ 0x58
 8003000:	da0c      	bge.n	800301c <__swhatbuf_r+0x2c>
 8003002:	89a3      	ldrh	r3, [r4, #12]
 8003004:	2100      	movs	r1, #0
 8003006:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800300a:	bf14      	ite	ne
 800300c:	2340      	movne	r3, #64	@ 0x40
 800300e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003012:	2000      	movs	r0, #0
 8003014:	6031      	str	r1, [r6, #0]
 8003016:	602b      	str	r3, [r5, #0]
 8003018:	b016      	add	sp, #88	@ 0x58
 800301a:	bd70      	pop	{r4, r5, r6, pc}
 800301c:	466a      	mov	r2, sp
 800301e:	f000 f849 	bl	80030b4 <_fstat_r>
 8003022:	2800      	cmp	r0, #0
 8003024:	dbed      	blt.n	8003002 <__swhatbuf_r+0x12>
 8003026:	9901      	ldr	r1, [sp, #4]
 8003028:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800302c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003030:	4259      	negs	r1, r3
 8003032:	4159      	adcs	r1, r3
 8003034:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003038:	e7eb      	b.n	8003012 <__swhatbuf_r+0x22>

0800303a <__smakebuf_r>:
 800303a:	898b      	ldrh	r3, [r1, #12]
 800303c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800303e:	079d      	lsls	r5, r3, #30
 8003040:	4606      	mov	r6, r0
 8003042:	460c      	mov	r4, r1
 8003044:	d507      	bpl.n	8003056 <__smakebuf_r+0x1c>
 8003046:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800304a:	6023      	str	r3, [r4, #0]
 800304c:	6123      	str	r3, [r4, #16]
 800304e:	2301      	movs	r3, #1
 8003050:	6163      	str	r3, [r4, #20]
 8003052:	b003      	add	sp, #12
 8003054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003056:	466a      	mov	r2, sp
 8003058:	ab01      	add	r3, sp, #4
 800305a:	f7ff ffc9 	bl	8002ff0 <__swhatbuf_r>
 800305e:	9f00      	ldr	r7, [sp, #0]
 8003060:	4605      	mov	r5, r0
 8003062:	4639      	mov	r1, r7
 8003064:	4630      	mov	r0, r6
 8003066:	f7ff fbbf 	bl	80027e8 <_malloc_r>
 800306a:	b948      	cbnz	r0, 8003080 <__smakebuf_r+0x46>
 800306c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003070:	059a      	lsls	r2, r3, #22
 8003072:	d4ee      	bmi.n	8003052 <__smakebuf_r+0x18>
 8003074:	f023 0303 	bic.w	r3, r3, #3
 8003078:	f043 0302 	orr.w	r3, r3, #2
 800307c:	81a3      	strh	r3, [r4, #12]
 800307e:	e7e2      	b.n	8003046 <__smakebuf_r+0xc>
 8003080:	89a3      	ldrh	r3, [r4, #12]
 8003082:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800308a:	81a3      	strh	r3, [r4, #12]
 800308c:	9b01      	ldr	r3, [sp, #4]
 800308e:	6020      	str	r0, [r4, #0]
 8003090:	b15b      	cbz	r3, 80030aa <__smakebuf_r+0x70>
 8003092:	4630      	mov	r0, r6
 8003094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003098:	f000 f81e 	bl	80030d8 <_isatty_r>
 800309c:	b128      	cbz	r0, 80030aa <__smakebuf_r+0x70>
 800309e:	89a3      	ldrh	r3, [r4, #12]
 80030a0:	f023 0303 	bic.w	r3, r3, #3
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	81a3      	strh	r3, [r4, #12]
 80030aa:	89a3      	ldrh	r3, [r4, #12]
 80030ac:	431d      	orrs	r5, r3
 80030ae:	81a5      	strh	r5, [r4, #12]
 80030b0:	e7cf      	b.n	8003052 <__smakebuf_r+0x18>
	...

080030b4 <_fstat_r>:
 80030b4:	b538      	push	{r3, r4, r5, lr}
 80030b6:	2300      	movs	r3, #0
 80030b8:	4d06      	ldr	r5, [pc, #24]	@ (80030d4 <_fstat_r+0x20>)
 80030ba:	4604      	mov	r4, r0
 80030bc:	4608      	mov	r0, r1
 80030be:	4611      	mov	r1, r2
 80030c0:	602b      	str	r3, [r5, #0]
 80030c2:	f7fd fb69 	bl	8000798 <_fstat>
 80030c6:	1c43      	adds	r3, r0, #1
 80030c8:	d102      	bne.n	80030d0 <_fstat_r+0x1c>
 80030ca:	682b      	ldr	r3, [r5, #0]
 80030cc:	b103      	cbz	r3, 80030d0 <_fstat_r+0x1c>
 80030ce:	6023      	str	r3, [r4, #0]
 80030d0:	bd38      	pop	{r3, r4, r5, pc}
 80030d2:	bf00      	nop
 80030d4:	20000268 	.word	0x20000268

080030d8 <_isatty_r>:
 80030d8:	b538      	push	{r3, r4, r5, lr}
 80030da:	2300      	movs	r3, #0
 80030dc:	4d05      	ldr	r5, [pc, #20]	@ (80030f4 <_isatty_r+0x1c>)
 80030de:	4604      	mov	r4, r0
 80030e0:	4608      	mov	r0, r1
 80030e2:	602b      	str	r3, [r5, #0]
 80030e4:	f7fd fb67 	bl	80007b6 <_isatty>
 80030e8:	1c43      	adds	r3, r0, #1
 80030ea:	d102      	bne.n	80030f2 <_isatty_r+0x1a>
 80030ec:	682b      	ldr	r3, [r5, #0]
 80030ee:	b103      	cbz	r3, 80030f2 <_isatty_r+0x1a>
 80030f0:	6023      	str	r3, [r4, #0]
 80030f2:	bd38      	pop	{r3, r4, r5, pc}
 80030f4:	20000268 	.word	0x20000268

080030f8 <_sbrk_r>:
 80030f8:	b538      	push	{r3, r4, r5, lr}
 80030fa:	2300      	movs	r3, #0
 80030fc:	4d05      	ldr	r5, [pc, #20]	@ (8003114 <_sbrk_r+0x1c>)
 80030fe:	4604      	mov	r4, r0
 8003100:	4608      	mov	r0, r1
 8003102:	602b      	str	r3, [r5, #0]
 8003104:	f7fd fb6e 	bl	80007e4 <_sbrk>
 8003108:	1c43      	adds	r3, r0, #1
 800310a:	d102      	bne.n	8003112 <_sbrk_r+0x1a>
 800310c:	682b      	ldr	r3, [r5, #0]
 800310e:	b103      	cbz	r3, 8003112 <_sbrk_r+0x1a>
 8003110:	6023      	str	r3, [r4, #0]
 8003112:	bd38      	pop	{r3, r4, r5, pc}
 8003114:	20000268 	.word	0x20000268

08003118 <memchr>:
 8003118:	4603      	mov	r3, r0
 800311a:	b510      	push	{r4, lr}
 800311c:	b2c9      	uxtb	r1, r1
 800311e:	4402      	add	r2, r0
 8003120:	4293      	cmp	r3, r2
 8003122:	4618      	mov	r0, r3
 8003124:	d101      	bne.n	800312a <memchr+0x12>
 8003126:	2000      	movs	r0, #0
 8003128:	e003      	b.n	8003132 <memchr+0x1a>
 800312a:	7804      	ldrb	r4, [r0, #0]
 800312c:	3301      	adds	r3, #1
 800312e:	428c      	cmp	r4, r1
 8003130:	d1f6      	bne.n	8003120 <memchr+0x8>
 8003132:	bd10      	pop	{r4, pc}

08003134 <_init>:
 8003134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003136:	bf00      	nop
 8003138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313a:	bc08      	pop	{r3}
 800313c:	469e      	mov	lr, r3
 800313e:	4770      	bx	lr

08003140 <_fini>:
 8003140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003142:	bf00      	nop
 8003144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003146:	bc08      	pop	{r3}
 8003148:	469e      	mov	lr, r3
 800314a:	4770      	bx	lr
